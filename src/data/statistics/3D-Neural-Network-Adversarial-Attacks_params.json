{
    "src/visualize_feature_vectors_tsne.py": {
        "sklearn": {
            "TSNE_36": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "args.perplexity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/adversarial_attacks.py": {
        "tensorflow": {
            "constant_5": {
                "variable": {
                    "value": "point",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_11": {
                "variable": {
                    "value": "pitch_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[1, 0, 0, 0, tf.cos(pitch), -tf.sin(pitch), 0, tf.sin(pitch), tf.cos(pitch)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "pitch_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pitch_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([1, 0, 0, 0, tf.cos(pitch), -tf.sin(pitch), 0, tf.sin(pitch), tf.cos(pitch)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pitch_mat, [3, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_17": {
                "variable": {
                    "value": "yaw_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cos(yaw), -tf.sin(yaw), 0, tf.sin(yaw), tf.cos(yaw), 0, 0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_22": {
                "variable": {
                    "value": "yaw_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "yaw_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.cos(yaw), -tf.sin(yaw), 0, tf.sin(yaw), tf.cos(yaw), 0, 0, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(yaw_mat, [3, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmin_57": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_float(remove)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_58": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmin(tf.to_float(remove), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.range(tf.shape(x_adv)[0])[:, tf.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.argmax(saliency, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(x_adv)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "variable": {
                    "value": "replace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x_adv * one_hot[:, :, tf.newaxis]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_60": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "replace + tf.zeros_like(x_adv)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_61": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "['not_in_checkpoint']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_228": {
                "variable": {
                    "value": "prev_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pl",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "fill_283": {
                "variable": {
                    "value": "unused",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(x_adv)[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_prod_344": {
                "variable": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.shape(x_adv)[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "fill_345": {
                "variable": {
                    "value": "unused",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(x_adv)[0], size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_402": {
                "variable": {
                    "value": "triangle_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "triangles[:, :, 1] - triangles[:, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "triangles[:, :, 2] - triangles[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_404": {
                "variable": {
                    "value": "side_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cross(triangles[:, :, 1] - triangles[:, :, 0], triangles[:, :, 1] - triangles[:, :, 0] + triangle_normals), tf.cross(triangles[:, :, 2] - triangles[:, :, 1], triangles[:, :, 2] - triangles[:, :, 1] + triangle_normals), tf.cross(triangles[:, :, 0] - triangles[:, :, 2], triangles[:, :, 0] - triangles[:, :, 2] + triangle_normals)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_411": {
                "variable": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "side_normals * d[:, :, tf.newaxis, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_412": {
                "variable": {
                    "value": "zero_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(side_normals * d[:, :, tf.newaxis, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(zero_mask, tf.ones_like(dot), dot)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_413": {
                "variable": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "zero_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(dot, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.ones_like(dot)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(side_normals * d[:, :, tf.newaxis, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(zero_mask, tf.ones_like(dot), dot)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_419": {
                "variable": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_or(zero_mask, b < -float_epsilon)[:, :, :, tf.newaxis] & tf.fill(tf.shape(dir), True)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.fill(tf.shape(dir), inf)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d[:, :, tf.newaxis, :] * b[:, :, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, tf.fill(tf.shape(dir), inf), dir)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, dir, tf.zeros_like(dir))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dir, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, d, dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_422": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d[:, :, tf.newaxis, :] * b[:, :, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, tf.fill(tf.shape(dir), inf), dir)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, dir, tf.zeros_like(dir))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dir, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, d, dir)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_423": {
                "variable": {
                    "value": "min_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x_pl - point[:, tf.newaxis], axis=2)",
                            "Call"
                        ],
                        [
                            "(dists - avg_dist[:, tf.newaxis]) / (avg_dist[:, tf.newaxis] - min_dist[:, tf.newaxis])",
                            "BinOp"
                        ],
                        [
                            "1.0 - tf.sigmoid(dists * 6.0)",
                            "BinOp"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_425": {
                "variable": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "closest_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(min_idx, 3, on_value=True, off_value=False)[:, :, :, tf.newaxis] & tf.fill(tf.shape(dir), True)",
                            "BinOp"
                        ],
                        [
                            "(norm_d < dists)[:, :, tf.newaxis] & tf.fill(tf.shape(dir), True)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d[:, :, tf.newaxis, :] * b[:, :, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, tf.fill(tf.shape(dir), inf), dir)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, dir, tf.zeros_like(dir))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dir, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, d, dir)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_426": {
                "variable": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d[:, :, tf.newaxis, :] * b[:, :, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, tf.fill(tf.shape(dir), inf), dir)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, dir, tf.zeros_like(dir))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dir, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, d, dir)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_428": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d[:, :, tf.newaxis, :] * b[:, :, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, tf.fill(tf.shape(dir), inf), dir)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, dir, tf.zeros_like(dir))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dir, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, d, dir)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_429": {
                "variable": {
                    "value": "norm_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p2 - p1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_431": {
                "variable": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "closest_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(min_idx, 3, on_value=True, off_value=False)[:, :, :, tf.newaxis] & tf.fill(tf.shape(dir), True)",
                            "BinOp"
                        ],
                        [
                            "(norm_d < dists)[:, :, tf.newaxis] & tf.fill(tf.shape(dir), True)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p2 - p1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d[:, :, tf.newaxis, :] * b[:, :, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, tf.fill(tf.shape(dir), inf), dir)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, dir, tf.zeros_like(dir))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dir, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, d, dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_24": {
                "tensor": {
                    "value": "tf.matmul(yaw_mat, tf.matmul(pitch_mat, point))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_33": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_36": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "norm_41": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_pl - point[:, tf.newaxis]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_42": {
                "variable": {
                    "value": "min_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x_pl - point[:, tf.newaxis], axis=2)",
                            "Call"
                        ],
                        [
                            "(dists - avg_dist[:, tf.newaxis]) / (avg_dist[:, tf.newaxis] - min_dist[:, tf.newaxis])",
                            "BinOp"
                        ],
                        [
                            "1.0 - tf.sigmoid(dists * 6.0)",
                            "BinOp"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_43": {
                "variable": {
                    "value": "avg_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x_pl - point[:, tf.newaxis], axis=2)",
                            "Call"
                        ],
                        [
                            "(dists - avg_dist[:, tf.newaxis]) / (avg_dist[:, tf.newaxis] - min_dist[:, tf.newaxis])",
                            "BinOp"
                        ],
                        [
                            "1.0 - tf.sigmoid(dists * 6.0)",
                            "BinOp"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_54": {
                "variable": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1, 2], maxval=pi * 2)",
                            "Call"
                        ],
                        [
                            "rot - alpha * grad",
                            "BinOp"
                        ],
                        [
                            "rot + alpha * grad",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(rot)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_71": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_74": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_77": {
                "variable": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "faces[:, :, 1] - faces[:, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "faces[:, :, 2] - faces[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_114": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x_pl - point[:, tf.newaxis], axis=2)",
                            "Call"
                        ],
                        [
                            "(dists - avg_dist[:, tf.newaxis]) / (avg_dist[:, tf.newaxis] - min_dist[:, tf.newaxis])",
                            "BinOp"
                        ],
                        [
                            "1.0 - tf.sigmoid(dists * 6.0)",
                            "BinOp"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_116": {
                "variable": {
                    "value": "diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "tf.shape(x_pl)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[tf.shape(x_pl)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_117": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diag > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.fill(tf.shape(dists), float('inf'))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x_pl - point[:, tf.newaxis], axis=2)",
                            "Call"
                        ],
                        [
                            "(dists - avg_dist[:, tf.newaxis]) / (avg_dist[:, tf.newaxis] - min_dist[:, tf.newaxis])",
                            "BinOp"
                        ],
                        [
                            "1.0 - tf.sigmoid(dists * 6.0)",
                            "BinOp"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_119": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x_pl - point[:, tf.newaxis], axis=2)",
                            "Call"
                        ],
                        [
                            "(dists - avg_dist[:, tf.newaxis]) / (avg_dist[:, tf.newaxis] - min_dist[:, tf.newaxis])",
                            "BinOp"
                        ],
                        [
                            "1.0 - tf.sigmoid(dists * 6.0)",
                            "BinOp"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "moments_120": {
                "variable": {
                    "value": "(avg, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x_pl - point[:, tf.newaxis], axis=2)",
                            "Call"
                        ],
                        [
                            "(dists - avg_dist[:, tf.newaxis]) / (avg_dist[:, tf.newaxis] - min_dist[:, tf.newaxis])",
                            "BinOp"
                        ],
                        [
                            "1.0 - tf.sigmoid(dists * 6.0)",
                            "BinOp"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_130": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_133": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_136": {
                "variable": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "faces[:, :, 1] - faces[:, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "faces[:, :, 2] - faces[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_159": {
                "variable": {
                    "value": "perturb_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "perturb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha * ord_fn(tf.gradients(loss, x_adv)[0])",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "alpha * ord_fn(grad)",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(increase) * tf.fill(tf.shape(x_adv), -eps) + tf.to_float(decrease) * tf.fill(tf.shape(x_adv), eps)",
                            "BinOp"
                        ],
                        [
                            "tf.one_hot(i, size, on_value=eps, off_value=0.0) + tf.one_hot(j, size, on_value=eps, off_value=0.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(perturb, tf.shape(x_adv))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_180": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_189": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x_pl - point[:, tf.newaxis], axis=2)",
                            "Call"
                        ],
                        [
                            "(dists - avg_dist[:, tf.newaxis]) / (avg_dist[:, tf.newaxis] - min_dist[:, tf.newaxis])",
                            "BinOp"
                        ],
                        [
                            "1.0 - tf.sigmoid(dists * 6.0)",
                            "BinOp"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_191": {
                "variable": {
                    "value": "diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "tf.shape(x_pl)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[tf.shape(x_pl)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_192": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diag > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.fill(tf.shape(dists), float('inf'))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x_pl - point[:, tf.newaxis], axis=2)",
                            "Call"
                        ],
                        [
                            "(dists - avg_dist[:, tf.newaxis]) / (avg_dist[:, tf.newaxis] - min_dist[:, tf.newaxis])",
                            "BinOp"
                        ],
                        [
                            "1.0 - tf.sigmoid(dists * 6.0)",
                            "BinOp"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_194": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x_pl - point[:, tf.newaxis], axis=2)",
                            "Call"
                        ],
                        [
                            "(dists - avg_dist[:, tf.newaxis]) / (avg_dist[:, tf.newaxis] - min_dist[:, tf.newaxis])",
                            "BinOp"
                        ],
                        [
                            "1.0 - tf.sigmoid(dists * 6.0)",
                            "BinOp"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "moments_195": {
                "variable": {
                    "value": "(avg, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x_pl - point[:, tf.newaxis], axis=2)",
                            "Call"
                        ],
                        [
                            "(dists - avg_dist[:, tf.newaxis]) / (avg_dist[:, tf.newaxis] - min_dist[:, tf.newaxis])",
                            "BinOp"
                        ],
                        [
                            "1.0 - tf.sigmoid(dists * 6.0)",
                            "BinOp"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_205": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_208": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_211": {
                "variable": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "faces[:, :, 1] - faces[:, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "faces[:, :, 2] - faces[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_240": {
                "variable": {
                    "value": "perturb_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "perturb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha * ord_fn(tf.gradients(loss, x_adv)[0])",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "alpha * ord_fn(grad)",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(increase) * tf.fill(tf.shape(x_adv), -eps) + tf.to_float(decrease) * tf.fill(tf.shape(x_adv), eps)",
                            "BinOp"
                        ],
                        [
                            "tf.one_hot(i, size, on_value=eps, off_value=0.0) + tf.one_hot(j, size, on_value=eps, off_value=0.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(perturb, tf.shape(x_adv))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_261": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_271": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_272": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_275": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_276": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_279": {
                "variable": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "faces[:, :, 1] - faces[:, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "faces[:, :, 2] - faces[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_295": {
                "variable": {
                    "value": "saliency",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "saliency",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(target_grad) * tf.abs(other_grad)",
                            "BinOp"
                        ],
                        [
                            "saliency * tf.to_float(increase | decrease)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(saliency, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.abs(target_grad) * tf.abs(other_grad)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(saliency, [-1, size])",
                            "Call"
                        ],
                        [
                            "saliency[:, tf.newaxis, :] + saliency[:, :, tf.newaxis]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_297": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "saliency",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(target_grad) * tf.abs(other_grad)",
                            "BinOp"
                        ],
                        [
                            "saliency * tf.to_float(increase | decrease)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(saliency, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.abs(target_grad) * tf.abs(other_grad)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(saliency, [-1, size])",
                            "Call"
                        ],
                        [
                            "saliency[:, tf.newaxis, :] + saliency[:, :, tf.newaxis]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_298": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmin(tf.to_float(remove), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.range(tf.shape(x_adv)[0])[:, tf.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.argmax(saliency, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(saliency)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "on_value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "off_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_322": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_332": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_333": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_336": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_337": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_340": {
                "variable": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "faces[:, :, 1] - faces[:, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "faces[:, :, 2] - faces[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_354": {
                "variable": {
                    "value": "saliency",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "saliency",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(target_grad) * tf.abs(other_grad)",
                            "BinOp"
                        ],
                        [
                            "saliency * tf.to_float(increase | decrease)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(saliency, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.abs(target_grad) * tf.abs(other_grad)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(saliency, [-1, size])",
                            "Call"
                        ],
                        [
                            "saliency[:, tf.newaxis, :] + saliency[:, :, tf.newaxis]",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_356": {
                "variable": {
                    "value": "target_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(tf.reduce_sum(tf.stop_gradient(tf.one_hot(t_pl, tf.shape(logits)[1])) * logits, axis=1), x_adv)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(tf.reduce_sum(tf.stop_gradient(tf.one_hot(t_pl, tf.shape(logits)[1])) * logits, axis=1), x_adv)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(target_grad, [-1, size])",
                            "Call"
                        ],
                        [
                            "target_grad[:, tf.newaxis, :] + target_grad[:, :, tf.newaxis]",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_357": {
                "variable": {
                    "value": "other_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "other_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "total_grad - target_grad",
                            "BinOp"
                        ],
                        [
                            "total_grad - target_grad",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_grad, [-1, size])",
                            "Call"
                        ],
                        [
                            "other_grad[:, tf.newaxis, :] + other_grad[:, :, tf.newaxis]",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_368": {
                "variable": {
                    "value": "diag_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_diag_369": {
                "variable": {
                    "value": "diag_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag_zeros",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([size, size])",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(diag_zeros, tf.zeros(size))",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.zeros(size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_371": {
                "variable": {
                    "value": "idx_both",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.to_float(cond) * diag_zeros[tf.newaxis, :, :] * saliency, [-1, size * size])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int64_372": {
                "x": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(tf.shape(x_adv)[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int64_373": {
                "x": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(tf.shape(x_adv)[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_375": {
                "variable": {
                    "value": "perturb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "perturb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha * ord_fn(tf.gradients(loss, x_adv)[0])",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "alpha * ord_fn(grad)",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(increase) * tf.fill(tf.shape(x_adv), -eps) + tf.to_float(decrease) * tf.fill(tf.shape(x_adv), eps)",
                            "BinOp"
                        ],
                        [
                            "tf.one_hot(i, size, on_value=eps, off_value=0.0) + tf.one_hot(j, size, on_value=eps, off_value=0.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(perturb, tf.shape(x_adv))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(x_adv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_391": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_24": {
                "a": {
                    "value": "pitch_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([1, 0, 0, 0, tf.cos(pitch), -tf.sin(pitch), 0, tf.sin(pitch), tf.cos(pitch)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pitch_mat, [3, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 0, 0])",
                            "Call"
                        ],
                        [
                            "point[:, tf.newaxis]",
                            "Subscript"
                        ],
                        [
                            "rotate_op(rot)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_35": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_57": {
                "x": {
                    "value": "remove",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists < 0.4",
                            "Compare"
                        ]
                    ]
                }
            },
            "one_hot_73": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_82": {
                "control_inputs": {
                    "value": "[tf.variables_initializer([var])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_85": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.gradients(loss, x_adv)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_92": {
                "variable": {
                    "value": "lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmin(grad, axis=1)[:, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_93": {
                "variable": {
                    "value": "higher",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(grad, axis=1)[:, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([idx, lower], axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "higher",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([idx, higher], axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_104": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(x_adv, trainable=False, collections=['not_in_checkpoint'])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_105": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_132": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_162": {
                "variable": {
                    "value": "perturb",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "clip & tf.fill(tf.shape(perturb), True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "perturb * clip_norm[..., tf.newaxis] / perturb_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "perturb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha * ord_fn(tf.gradients(loss, x_adv)[0])",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "alpha * ord_fn(grad)",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(increase) * tf.fill(tf.shape(x_adv), -eps) + tf.to_float(decrease) * tf.fill(tf.shape(x_adv), eps)",
                            "BinOp"
                        ],
                        [
                            "tf.one_hot(i, size, on_value=eps, off_value=0.0) + tf.one_hot(j, size, on_value=eps, off_value=0.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(perturb, tf.shape(x_adv))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_178": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_207": {
                "variable": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_243": {
                "variable": {
                    "value": "perturb",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "clip & tf.fill(tf.shape(perturb), True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "perturb * clip_norm[..., tf.newaxis] / perturb_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "perturb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha * ord_fn(tf.gradients(loss, x_adv)[0])",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "alpha * ord_fn(grad)",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(increase) * tf.fill(tf.shape(x_adv), -eps) + tf.to_float(decrease) * tf.fill(tf.shape(x_adv), eps)",
                            "BinOp"
                        ],
                        [
                            "tf.one_hot(i, size, on_value=eps, off_value=0.0) + tf.one_hot(j, size, on_value=eps, off_value=0.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(perturb, tf.shape(x_adv))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_259": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_320": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_389": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_413": {
                "input": {
                    "value": "dot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(side_normals * d[:, :, tf.newaxis, :], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(zero_mask, tf.ones_like(dot), dot)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_418": {
                "dims": {
                    "value": "tf.shape(dir)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fill_419": {
                "dims": {
                    "value": "tf.shape(dir)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "inf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float('inf')",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_424": {
                "dims": {
                    "value": "tf.shape(dir)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_425": {
                "input": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d[:, :, tf.newaxis, :] * b[:, :, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, tf.fill(tf.shape(dir), inf), dir)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, dir, tf.zeros_like(dir))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dir, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, d, dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_430": {
                "dims": {
                    "value": "tf.shape(dir)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_13": {
                "x": {
                    "value": "pitch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot[0][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_14": {
                "x": {
                    "value": "pitch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot[0][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_14": {
                "x": {
                    "value": "pitch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot[0][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_18": {
                "x": {
                    "value": "yaw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot[0][1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_19": {
                "x": {
                    "value": "yaw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot[0][1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_19": {
                "x": {
                    "value": "yaw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot[0][1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_45": {
                "x": {
                    "value": "dists * 6.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_49": {
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1, 2], maxval=pi * 2)",
                            "Call"
                        ],
                        [
                            "rot - alpha * grad",
                            "BinOp"
                        ],
                        [
                            "rot + alpha * grad",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(rot)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_58": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_60": {
                "dims": {
                    "value": "tf.shape(x_adv)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_60": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_78": {
                "tensor": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scatter_nd_update_99": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(x_adv, trainable=False, collections=['not_in_checkpoint'])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "higher",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.argmax(grad, axis=1)[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack([idx, higher], axis=2), shape=[-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "tf.gather_nd(x_adv, lower) + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scatter_nd_update_102": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(x_adv, trainable=False, collections=['not_in_checkpoint'])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "lower",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.argmin(grad, axis=1)[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack([idx, lower], axis=2), shape=[-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "tf.gather_nd(x_adv, higher) + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fill_117": {
                "dims": {
                    "value": "tf.shape(dists)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_121": {
                "x": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(x_adv, trainable=False, collections=['not_in_checkpoint'])",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_137": {
                "tensor": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_163": {
                "x": {
                    "value": "perturb_norm >= min_norm",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "fill_192": {
                "dims": {
                    "value": "tf.shape(dists)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_196": {
                "x": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(x_adv, trainable=False, collections=['not_in_checkpoint'])",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_212": {
                "tensor": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_232": {
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_233": {
                "input_tensor": {
                    "value": "tf.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, x_pl.shape.ndims))",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_244": {
                "x": {
                    "value": "perturb_norm >= min_norm",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "norm_280": {
                "tensor": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_283": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_287": {
                "ys": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_288": {
                "ys": {
                    "value": "tf.reduce_sum(tf.stop_gradient(tf.one_hot(t_pl, tf.shape(logits)[1])) * logits, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_291": {
                "x": {
                    "value": "other_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "total_grad - target_grad",
                            "BinOp"
                        ],
                        [
                            "total_grad - target_grad",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_grad, [-1, size])",
                            "Call"
                        ],
                        [
                            "other_grad[:, tf.newaxis, :] + other_grad[:, :, tf.newaxis]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_294": {
                "x": {
                    "value": "increase | decrease",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_341": {
                "tensor": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.cross(faces[:, :, 1] - faces[:, :, 0], faces[:, :, 2] - faces[:, :, 1])",
                            "Call"
                        ],
                        [
                            "normal / tf.linalg.norm(normal, axis=2, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_344": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_349": {
                "ys": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_350": {
                "ys": {
                    "value": "tf.reduce_sum(tf.stop_gradient(tf.one_hot(t_pl, tf.shape(logits)[1])) * logits, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_353": {
                "x": {
                    "value": "other_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "total_grad - target_grad",
                            "BinOp"
                        ],
                        [
                            "total_grad - target_grad",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_grad, [-1, size])",
                            "Call"
                        ],
                        [
                            "other_grad[:, tf.newaxis, :] + other_grad[:, :, tf.newaxis]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_369": {
                "shape": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(tf.shape(x_adv)[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_371": {
                "tensor": {
                    "value": "tf.to_float(cond) * diag_zeros[tf.newaxis, :, :] * saliency",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size * size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_374": {
                "indices": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int64(idx_both % tf.to_int64(size))",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(tf.shape(x_adv)[1:])",
                            "Call"
                        ]
                    ]
                },
                "on_value": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_375": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_376": {
                "indices": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int64(idx_both / tf.to_int64(size))",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_prod(tf.shape(x_adv)[1:])",
                            "Call"
                        ]
                    ]
                },
                "on_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "off_value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_405": {
                "a": {
                    "value": "triangles[:, :, 1] - triangles[:, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "triangles[:, :, 1] - triangles[:, :, 0] + triangle_normals",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_406": {
                "a": {
                    "value": "triangles[:, :, 2] - triangles[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "triangles[:, :, 2] - triangles[:, :, 1] + triangle_normals",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_407": {
                "a": {
                    "value": "triangles[:, :, 0] - triangles[:, :, 2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "triangles[:, :, 0] - triangles[:, :, 2] + triangle_normals",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_415": {
                "input_tensor": {
                    "value": "side_normals * a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_or_418": {
                "x": {
                    "value": "zero_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(dot, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b < -float_epsilon",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "shape_418": {
                "input": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d[:, :, tf.newaxis, :] * b[:, :, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, tf.fill(tf.shape(dir), inf), dir)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, dir, tf.zeros_like(dir))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dir, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, d, dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_419": {
                "input": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d[:, :, tf.newaxis, :] * b[:, :, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, tf.fill(tf.shape(dir), inf), dir)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, dir, tf.zeros_like(dir))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dir, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, d, dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_424": {
                "indices": {
                    "value": "min_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmin(dists, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "on_value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "off_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_424": {
                "input": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d[:, :, tf.newaxis, :] * b[:, :, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, tf.fill(tf.shape(dir), inf), dir)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, dir, tf.zeros_like(dir))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dir, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, d, dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_430": {
                "input": {
                    "value": "dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d[:, :, tf.newaxis, :] * b[:, :, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, tf.fill(tf.shape(dir), inf), dir)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, dir, tf.zeros_like(dir))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dir, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.where(closest_mask, d, dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_13": {
                "x": {
                    "value": "pitch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot[0][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_18": {
                "x": {
                    "value": "yaw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot[0][1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_60": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_82": {
                "var_list": {
                    "value": "[var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_94": {
                "values": {
                    "value": "[idx, lower]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_95": {
                "values": {
                    "value": "[idx, higher]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_116": {
                "input": {
                    "value": "x_pl",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_117": {
                "input": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x_pl - point[:, tf.newaxis], axis=2)",
                            "Call"
                        ],
                        [
                            "(dists - avg_dist[:, tf.newaxis]) / (avg_dist[:, tf.newaxis] - min_dist[:, tf.newaxis])",
                            "BinOp"
                        ],
                        [
                            "1.0 - tf.sigmoid(dists * 6.0)",
                            "BinOp"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_191": {
                "input": {
                    "value": "x_pl",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_192": {
                "input": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x_pl - point[:, tf.newaxis], axis=2)",
                            "Call"
                        ],
                        [
                            "(dists - avg_dist[:, tf.newaxis]) / (avg_dist[:, tf.newaxis] - min_dist[:, tf.newaxis])",
                            "BinOp"
                        ],
                        [
                            "1.0 - tf.sigmoid(dists * 6.0)",
                            "BinOp"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "x_pl[:, tf.newaxis] - x_pl[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(dists, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(dir, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_233": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, rot)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(tf.gradients(loss, x_adv)[0], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.gradients(loss, x_adv)[0]",
                            "Subscript"
                        ],
                        [
                            "grad / tf.reduce_mean(tf.abs(grad), axis=list(range(1, x_pl.shape.ndims)), keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "momentum * prev_grad + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_288": {
                "input_tensor": {
                    "value": "tf.stop_gradient(tf.one_hot(t_pl, tf.shape(logits)[1])) * logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_298": {
                "input": {
                    "value": "saliency",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(target_grad) * tf.abs(other_grad)",
                            "BinOp"
                        ],
                        [
                            "saliency * tf.to_float(increase | decrease)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(saliency, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.abs(target_grad) * tf.abs(other_grad)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(saliency, [-1, size])",
                            "Call"
                        ],
                        [
                            "saliency[:, tf.newaxis, :] + saliency[:, :, tf.newaxis]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_305": {
                "x": {
                    "value": "decrease",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(target_grad <= 0.0) & (other_grad >= 0.0) & unused[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "decrease & one_hot[:, :, tf.newaxis]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "fill_305": {
                "dims": {
                    "value": "tf.shape(x_adv)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_345": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_350": {
                "input_tensor": {
                    "value": "tf.stop_gradient(tf.one_hot(t_pl, tf.shape(logits)[1])) * logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_35": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_73": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gradients_85": {
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmin_92": {
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, rot)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(tf.gradients(loss, x_adv)[0], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.gradients(loss, x_adv)[0]",
                            "Subscript"
                        ],
                        [
                            "grad / tf.reduce_mean(tf.abs(grad), axis=list(range(1, x_pl.shape.ndims)), keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "momentum * prev_grad + grad",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_93": {
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, rot)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(tf.gradients(loss, x_adv)[0], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.gradients(loss, x_adv)[0]",
                            "Subscript"
                        ],
                        [
                            "grad / tf.reduce_mean(tf.abs(grad), axis=list(range(1, x_pl.shape.ndims)), keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "momentum * prev_grad + grad",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_132": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "input_tensor": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, x.shape.ndims))",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_147": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_158": {
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_162": {
                "dims": {
                    "value": "tf.shape(perturb)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_172": {
                "input_tensor": {
                    "value": "normal * (x_adv - faces[:, :, 0])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_207": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_217": {
                "input_tensor": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, x.shape.ndims))",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_222": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fill_243": {
                "dims": {
                    "value": "tf.shape(perturb)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_253": {
                "input_tensor": {
                    "value": "normal * (x_adv - faces[:, :, 0])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_305": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_314": {
                "input_tensor": {
                    "value": "normal * (x_adv - faces[:, :, 0])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_383": {
                "input_tensor": {
                    "value": "normal * (x_adv - faces[:, :, 0])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_91": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_99": {
                "params": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "lower",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.argmin(grad, axis=1)[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack([idx, lower], axis=2), shape=[-1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_102": {
                "params": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists[:, :, tf.newaxis] * x_pl",
                            "BinOp"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x_adv), True), replace + tf.zeros_like(x_adv), x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "tf.scatter_nd_update(var, higher, tf.gather_nd(x_adv, lower) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd_update(var, lower, tf.gather_nd(x_adv, higher) + 0.001)",
                            "Call"
                        ],
                        [
                            "tf.assign(var, x_adv)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv - perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ],
                        [
                            "x_pl",
                            "Name"
                        ],
                        [
                            "x_adv + perturb",
                            "BinOp"
                        ],
                        [
                            "x_adv - normal * tf.reduce_sum(normal * (x_adv - faces[:, :, 0]), axis=2, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "triangle_border_intersections_op(x_original, x_adv, faces)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_adv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x_adv)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "higher",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.argmax(grad, axis=1)[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack([idx, higher], axis=2), shape=[-1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_142": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_144": {
                "x": {
                    "value": "tf.reduce_sum(x ** 2, axis=list(range(1, x.shape.ndims)), keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_148": {
                "condition": {
                    "value": "tf.equal(norm, 0.0) & tf.fill(tf.shape(x), True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x / norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_162": {
                "input": {
                    "value": "perturb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha * ord_fn(tf.gradients(loss, x_adv)[0])",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "alpha * ord_fn(grad)",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(increase) * tf.fill(tf.shape(x_adv), -eps) + tf.to_float(decrease) * tf.fill(tf.shape(x_adv), eps)",
                            "BinOp"
                        ],
                        [
                            "tf.one_hot(i, size, on_value=eps, off_value=0.0) + tf.one_hot(j, size, on_value=eps, off_value=0.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(perturb, tf.shape(x_adv))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_217": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_219": {
                "x": {
                    "value": "tf.reduce_sum(x ** 2, axis=list(range(1, x.shape.ndims)), keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_223": {
                "condition": {
                    "value": "tf.equal(norm, 0.0) & tf.fill(tf.shape(x), True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x / norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_243": {
                "input": {
                    "value": "perturb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha * ord_fn(tf.gradients(loss, x_adv)[0])",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "alpha * ord_fn(grad)",
                            "BinOp"
                        ],
                        [
                            "tf.where(clip & tf.fill(tf.shape(perturb), True), perturb * clip_norm[..., tf.newaxis] / perturb_norm, perturb)",
                            "Call"
                        ],
                        [
                            "perturb * tf.to_float(perturb_norm >= min_norm)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(increase) * tf.fill(tf.shape(x_adv), -eps) + tf.to_float(decrease) * tf.fill(tf.shape(x_adv), eps)",
                            "BinOp"
                        ],
                        [
                            "tf.one_hot(i, size, on_value=eps, off_value=0.0) + tf.one_hot(j, size, on_value=eps, off_value=0.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(perturb, tf.shape(x_adv))",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_288": {
                "input": {
                    "value": "tf.one_hot(t_pl, tf.shape(logits)[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_350": {
                "input": {
                    "value": "tf.one_hot(t_pl, tf.shape(logits)[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_371": {
                "x": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "unused[:, tf.newaxis, :] & unused[:, :, tf.newaxis] & (target_grad >= 0.0) & (other_grad <= 0.0)",
                            "BinOp"
                        ],
                        [
                            "unused[:, tf.newaxis, :] & unused[:, :, tf.newaxis] & (target_grad <= 0.0) & (other_grad >= 0.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_144": {
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, x.shape.ndims))",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_148": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_219": {
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, x.shape.ndims))",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_223": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_288": {
                "indices": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "one_hot_350": {
                "indices": {
                    "value": "t_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(t_pl, tf.shape(logits)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "tf.argmax(t_pl, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(t_pl)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_148": {
                "x": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(x, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "fill_148": {
                "dims": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_223": {
                "x": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(x, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(x, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "fill_223": {
                "dims": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_148": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_223": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_288": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_350": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/adversarial_defenses.py": {
        "tensorflow": {
            "norm_5": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[:, tf.newaxis] - x[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(dists * -1.0, k=top_k, sorted=False)[0] * -1.0",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(dists, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_7": {
                "variable": {
                    "value": "diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "tf.shape(x)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_8": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diag > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.fill(tf.shape(dists), float('inf'))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[:, tf.newaxis] - x[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(dists * -1.0, k=top_k, sorted=False)[0] * -1.0",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(dists, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_11": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[:, tf.newaxis] - x[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(dists * -1.0, k=top_k, sorted=False)[0] * -1.0",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(dists, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "moments_12": {
                "variable": {
                    "value": "(avg, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[:, tf.newaxis] - x[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(dists * -1.0, k=top_k, sorted=False)[0] * -1.0",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(dists, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmin_16": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_float(remove)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_17": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmin(tf.to_float(remove), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmin(tf.to_float(remove), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(x)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_18": {
                "variable": {
                    "value": "replace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x * one_hot[:, :, tf.newaxis]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_19": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "replace + tf.zeros_like(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_28": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(grads, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_30": {
                "variable": {
                    "value": "norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(grads, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_31": {
                "variable": {
                    "value": "norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "norms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(grads, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(norms, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_32": {
                "variable": {
                    "value": "(_, remove)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "norms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(grads, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(norms, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_33": {
                "variable": {
                    "value": "remove",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "remove",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists > avg + std",
                            "Compare"
                        ],
                        [
                            "tf.one_hot(remove, tf.shape(x)[1], on_value=True, off_value=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_any(remove, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(x)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "on_value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "off_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_any_34": {
                "variable": {
                    "value": "remove",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "remove",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists > avg + std",
                            "Compare"
                        ],
                        [
                            "tf.one_hot(remove, tf.shape(x)[1], on_value=True, off_value=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_any(remove, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_36": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_float(remove)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_37": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmin(tf.to_float(remove), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmin(tf.to_float(remove), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(x)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_38": {
                "variable": {
                    "value": "replace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x * one_hot[:, :, tf.newaxis]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "replace + tf.zeros_like(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_21": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_41": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_8": {
                "dims": {
                    "value": "tf.shape(dists)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_13": {
                "x": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_16": {
                "x": {
                    "value": "remove",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists > avg + std",
                            "Compare"
                        ],
                        [
                            "tf.one_hot(remove, tf.shape(x)[1], on_value=True, off_value=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_any(remove, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_36": {
                "x": {
                    "value": "remove",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dists > avg + std",
                            "Compare"
                        ],
                        [
                            "tf.one_hot(remove, tf.shape(x)[1], on_value=True, off_value=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_any(remove, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_7": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_8": {
                "input": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[:, tf.newaxis] - x[:, :, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.norm(dists, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.where(diag > 0.0, tf.fill(tf.shape(dists), float('inf')), dists)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(dists * -1.0, k=top_k, sorted=False)[0] * -1.0",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(dists, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_9": {
                "input": {
                    "value": "dists * -1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_17": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_19": {
                "dims": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_19": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_33": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_37": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_39": {
                "dims": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_39": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_19": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_27": {
                "ys": {
                    "value": "logits[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_39": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ],
                        [
                            "tf.where(remove[:, :, tf.newaxis] & tf.fill(tf.shape(x), True), replace + tf.zeros_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/adversarial_pointnet.py": {
        "tensorflow": {
            "placeholder_73": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/adversarial_pointnet2.py": {
        "tensorflow": {
            "placeholder_73": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/adversarial_utils.py": {
        "tensorflow": {
            "softmax_91": {
                "variable": {
                    "value": "def_probs_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "def_logits_op",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_94": {
                "variable": {
                    "value": "probs_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_op",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_127": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_129": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_286": {
                "variable": {
                    "value": "def_probs_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "def_logits_op",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_289": {
                "variable": {
                    "value": "probs_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_op",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_303": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_322": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_324": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_503": {
                "variable": {
                    "value": "probs_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_op",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Saver_510": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_512": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_593": {
                "variable": {
                    "value": "features_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_594": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_595": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds == sparse_t",
                            "Compare"
                        ],
                        [
                            "preds == sparse_p",
                            "Compare"
                        ],
                        [
                            "tf.placeholder(tf.int32, [1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(features_op)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stop_gradient_596": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(idx, tf.shape(features_op)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(mask)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(saliency_class, tf.shape(logits_op)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_602": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_604": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_606": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_666": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_668": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_670": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "faces",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_305": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, len(class_names)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_307": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_311": {
                "variable": {
                    "value": "faces",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_658": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "saliency_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(logits_op)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stop_gradient_659": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(idx, tf.shape(features_op)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(mask)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(saliency_class, tf.shape(logits_op)[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_131": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_326": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_514": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_597": {
                "ys": {
                    "value": "mask * features_op",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_pl",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_595": {
                "input": {
                    "value": "features_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_default_graph().get_tensor_by_name('feature_vector:0')",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_655": {
                "ys": {
                    "value": "loss_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_pl",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gradients_660": {
                "ys": {
                    "value": "mask * logits_op",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_pl",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_658": {
                "input": {
                    "value": "logits_op",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/evaluate_pointnet.py": {
        "tensorflow": {
            "placeholder_63": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/evaluate_pointnet2.py": {
        "tensorflow": {
            "placeholder_63": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/feature_vectors_pointnet.py": {
        "tensorflow": {
            "placeholder_34": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/feature_vectors_pointnet2.py": {
        "tensorflow": {
            "placeholder_34": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/pointnet/models/pointnet_cls.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "labels_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_26": {
                "variable": {
                    "value": "point_cloud_transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "point_cloud",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "transform",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_transform_net(point_cloud, is_training, bn_decay, K=3)",
                            "Call"
                        ],
                        [
                            "feature_transform_net(net, is_training, bn_decay, K=64)",
                            "Call"
                        ],
                        [
                            "end_points['transform']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_27": {
                "variable": {
                    "value": "input_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud_transformed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(point_cloud, transform)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "net_transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(net, axis=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "transform",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_transform_net(point_cloud, is_training, bn_decay, K=3)",
                            "Call"
                        ],
                        [
                            "feature_transform_net(net, is_training, bn_decay, K=64)",
                            "Call"
                        ],
                        [
                            "end_points['transform']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_42": {
                "variable": {
                    "value": "net_transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net_transformed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.squeeze(net, axis=[2]), transform)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(net_transformed, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(input_image, 64, [1, 3], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net_transformed, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv3', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 128, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv4', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 1024, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv5', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(net, [num_point, 1], padding='VALID', scope='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 512, bn=True, is_training=is_training, scope='fc1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp1')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 256, bn=True, is_training=is_training, scope='fc2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp2')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, num_classes, activation_fn=None, scope='fc3')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_62": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(input_image, 64, [1, 3], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net_transformed, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv3', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 128, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv4', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 1024, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv5', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(net, [num_point, 1], padding='VALID', scope='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 512, bn=True, is_training=is_training, scope='fc1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp1')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 256, bn=True, is_training=is_training, scope='fc2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp2')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, num_classes, activation_fn=None, scope='fc3')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "feature_vector",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_79": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "variable": {
                    "value": "classify_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "mat_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "transform",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_transform_net(point_cloud, is_training, bn_decay, K=3)",
                            "Call"
                        ],
                        [
                            "feature_transform_net(net, is_training, bn_decay, K=64)",
                            "Call"
                        ],
                        [
                            "end_points['transform']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(transform, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_88": {
                "variable": {
                    "value": "mat_diff_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "mat_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(transform, tf.transpose(transform, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "mat_diff - tf.constant(np.eye(K), dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_81": {
                "name": {
                    "value": "classify loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_87": {
                "value": {
                    "value": "np.eye(K)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_89": {
                "name": {
                    "value": "mat loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mat_diff_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_loss(mat_diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 1024, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "transform_net1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "transform_net2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_41": {
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(input_image, 64, [1, 3], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net_transformed, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv3', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 128, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv4', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 1024, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='conv5', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(net, [num_point, 1], padding='VALID', scope='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 512, bn=True, is_training=is_training, scope='fc1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp1')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 256, bn=True, is_training=is_training, scope='fc2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.7, is_training=is_training, scope='dp2')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, num_classes, activation_fn=None, scope='fc3')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_86": {
                "a": {
                    "value": "transform",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_transform_net(point_cloud, is_training, bn_decay, K=3)",
                            "Call"
                        ],
                        [
                            "feature_transform_net(net, is_training, bn_decay, K=64)",
                            "Call"
                        ],
                        [
                            "end_points['transform']",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_97": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/pointnet/train.py": {
        "tensorflow": {
            "exponential_decay_77": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "BASE_LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "global_step": {
                    "value": "batch * BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "DECAY_STEP",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.decay_step",
                            "Attribute"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "DECAY_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.decay_rate",
                            "Attribute"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_83": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exponential_decay_87": {
                "variable": {
                    "value": "bn_momentum",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "BN_INIT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "global_step": {
                    "value": "batch * BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "BN_DECAY_DECAY_STEP",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(DECAY_STEP)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "BN_DECAY_DECAY_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "minimum_93": {
                "variable": {
                    "value": "bn_decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "BN_DECAY_CLIP",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - bn_momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConfigProto_147": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_151": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_155": {
                "variable": {
                    "value": "merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_156": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(LOG_DIR, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_158": {
                "variable": {
                    "value": "test_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(LOG_DIR, 'test')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_161": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "is_training_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_105": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_127": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_int64(labels_pl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_144": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_98": {
                "device_name": {
                    "value": "'/gpu:' + str(GPU_INDEX)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_107": {
                "name": {
                    "value": "bn_decay",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.minimum(BN_DECAY_CLIP, 1 - bn_momentum)",
                            "Call"
                        ],
                        [
                            "get_bn_decay(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_112": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MODEL.get_loss(pred, labels_pl, end_points)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "MODEL.get_loss(y, t, end_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_129": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(correct, tf.float32)) / float(BATCH_SIZE)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_133": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "MOMENTUM",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.momentum",
                            "Attribute"
                        ]
                    ]
                }
            },
            "argmax_127": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int64_127": {
                "x": {
                    "value": "labels_pl",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "input_tensor": {
                    "value": "tf.cast(correct, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_137": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ],
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_128": {
                "x": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, 1), tf.to_int64(labels_pl))",
                            "Call"
                        ],
                        [
                            "np.sum(pred_val == current_label[start_idx:end_idx])",
                            "Call"
                        ],
                        [
                            "np.sum(pred_val == current_label[start_idx:end_idx])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/pointnet/utils/tf_util.py": {
        "tensorflow": {
            "get_variable_21": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float16 if use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_44": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_47": {
                "variable": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_94": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_99": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_156": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_161": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_236": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[batch_size, out_height, out_width, num_output_channels]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_241": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_297": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_302": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_338": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[num_input_units, num_outputs], use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_341": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_370": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_395": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool3d_421": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool3d_446": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_583": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(inputs, keep_prob, noise_shape)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : inputs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_19": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_48": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_331": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_367": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_392": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_418": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_443": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_582": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "l2_loss_47": {
                "t": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_98": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_160": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_240": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_301": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_340": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_584": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/pointnet2/models/pointnet2_cls_ssg.py": {
        "tensorflow": {
            "placeholder_16": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "labels_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "point_cloud.get_shape()[0].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l3_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_38": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(l3_points, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 512, bn=True, is_training=is_training, scope='fc1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.5, is_training=is_training, scope='dp1')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 256, bn=True, is_training=is_training, scope='fc2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(net, keep_prob=0.5, is_training=is_training, scope='dp2')",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, num_classes, activation_fn=None, scope='fc3')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "feature_vector",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_51": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "variable": {
                    "value": "classify_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_53": {
                "name": {
                    "value": "classify loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_54": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "classify_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 1024, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Graph_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/pointnet2/train.py": {
        "tensorflow": {}
    },
    "src/saliency_pointnet.py": {
        "tensorflow": {
            "placeholder_31": {
                "variable": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}