{
    "examples/hubert/simple_kmeans/learn_kmeans.py": {
        "sklearn": {
            "MiniBatchKMeans_34": {
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_clusters",
                            "Method Argument"
                        ],
                        [
                            "n_clusters",
                            "Method Argument"
                        ]
                    ]
                },
                "init": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init",
                            "Method Argument"
                        ],
                        [
                            "init",
                            "Method Argument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_iter",
                            "Method Argument"
                        ],
                        [
                            "max_iter",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "compute_labels": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "tol": {
                    "value": "tol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tol",
                            "Method Argument"
                        ],
                        [
                            "tol",
                            "Method Argument"
                        ]
                    ]
                },
                "max_no_improvement": {
                    "value": "max_no_improvement",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_no_improvement",
                            "Method Argument"
                        ],
                        [
                            "max_no_improvement",
                            "Method Argument"
                        ]
                    ]
                },
                "init_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "n_init": {
                    "value": "n_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_init",
                            "Method Argument"
                        ],
                        [
                            "n_init",
                            "Method Argument"
                        ]
                    ]
                },
                "reassignment_ratio": {
                    "value": "reassignment_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reassignment_ratio",
                            "Method Argument"
                        ],
                        [
                            "reassignment_ratio",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/adaptive_span/adagrad_with_grad_clip.py": {
        "torch": {}
    },
    "examples/adaptive_span/adaptive_span_attention.py": {
        "torch": {
            "Parameter_28": {
                "variable": {
                    "value": "self.current_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(*shape) + init_val",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_29": {
                "variable": {
                    "value": "mask_template",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1 - max_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "max_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_135": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key[:, trim_len_cache:, :]",
                            "Subscript"
                        ],
                        [
                            "F.pad(key, [0, 0, -trim_len_cache, 0])",
                            "Call"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, -trim_len_cache, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_136": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value[:, trim_len_cache:, :]",
                            "Subscript"
                        ],
                        [
                            "F.pad(value, [0, 0, -trim_len_cache, 0])",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, -trim_len_cache, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "examples/adaptive_span/adaptive_span_loss.py": {
        "torch": {}
    },
    "examples/adaptive_span/adaptive_span_model.py": {
        "torch": {
            "pad_25": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(X, (0, M + 1), value=pad_value)",
                            "Call"
                        ],
                        [
                            "X.view(B, -1)",
                            "Call"
                        ],
                        [
                            "X[:, :-M]",
                            "Subscript"
                        ],
                        [
                            "X.view(B, M, M + L)",
                            "Call"
                        ],
                        [
                            "X.view(B, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(X, (0, M))",
                            "Call"
                        ],
                        [
                            "X.view(B, M, M + L + 1)",
                            "Call"
                        ],
                        [
                            "X[:, :, :L]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, M + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_38": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(X, (0, M + 1), value=pad_value)",
                            "Call"
                        ],
                        [
                            "X.view(B, -1)",
                            "Call"
                        ],
                        [
                            "X[:, :-M]",
                            "Subscript"
                        ],
                        [
                            "X.view(B, M, M + L)",
                            "Call"
                        ],
                        [
                            "X.view(B, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(X, (0, M))",
                            "Call"
                        ],
                        [
                            "X.view(B, M, M + L + 1)",
                            "Call"
                        ],
                        [
                            "X[:, :, :L]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, M)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "attn_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_query(query)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(query)",
                            "Call"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "attn_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_query(query)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(query)",
                            "Call"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "key_pe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.adaptive_span.trim_memory(query, key, value, key_pe)",
                            "Call"
                        ],
                        [
                            "key_pe",
                            "Method Argument"
                        ],
                        [
                            "key_pe",
                            "Method Argument"
                        ],
                        [
                            "key_pe",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_cont",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "_unskew(attn_cont)",
                            "Call"
                        ],
                        [
                            "_skew(attn, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.adaptive_span.trim_memory(query, key, value, key_pe)",
                            "Call"
                        ],
                        [
                            "self.proj_val(value)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(value)",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.proj_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.proj_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.proj_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.proj_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_inner",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_inner",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_146": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_149": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "h_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_cache, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_195": {
                "variable": {
                    "value": "self.in_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.out_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_204": {
                "variable": {
                    "value": "self.key_pe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, d_model // n_head, attn_span)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_206": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_240": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_emb(h).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_200": {
                "variable": {
                    "value": "self.emb_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "emb_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_204": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "d_model // n_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "attn_span",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_span",
                            "Method Argument"
                        ],
                        [
                            "attn_span",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_229": {
                "variable": {
                    "value": "h_cache_next_l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_cache[l][:, -cache_size + block_size:, :], h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/adaptive_span/adaptive_span_model_wrapper.py": {
        "torch": {
            "zeros_111": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_sz",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "layer.get_cache_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/adaptive_span/truncated_bptt_lm_task.py": {
        "torch": {}
    },
    "examples/bart/summarize.py": {
        "torch": {
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_84": {
                "variable": {
                    "value": "bart",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/fairseq",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "args.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/byte_level_bpe/gru_transformer.py": {
        "torch": {
            "GRU_27": {
                "variable": {
                    "value": "self.emb_ctx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_tokens.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "embed_tokens.embedding_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "examples/criss/save_encoder.py": {
        "torch": {
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/fast_noisy_channel/noisy_channel_beam_search.py": {
        "torch": {
            "gather_66": {
                "variable": {
                    "value": "self.fw_scores_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "fw_lprobs_cum.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_67": {
                "variable": {
                    "value": "self.lm_scores_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_lprobs.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.indices_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_55": {
                "input": {
                    "value": "combined_lprobs.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "min(beam_size * 2, combined_lprobs.view(bsz, -1).size(1) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.scores_buf, self.indices_buf)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "examples/fast_noisy_channel/noisy_channel_sequence_generator.py": {
        "torch": {
            "LogSoftmax_122": {
                "variable": {
                    "value": "self.log_softmax_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "annotate_151": {
                "variable": {
                    "value": "incremental_states",
                    "type": "variable",
                    "possible_values": []
                },
                "the_type": {
                    "value": "List[Dict[str, Dict[str, Optional[Tensor]]]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[torch.jit.annotate(Dict[str, Dict[str, Optional[Tensor]]], {}) for i in range(model.models_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_186": {
                "variable": {
                    "value": "new_order",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[0]",
                            "Subscript"
                        ],
                        [
                            "new_bsz",
                            "variable"
                        ],
                        [
                            "bsz",
                            "Method Argument"
                        ],
                        [
                            "bsz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_225": {
                "variable": {
                    "value": "cand_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "cand_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beam_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "annotate_488": {
                "variable": {
                    "value": "lm_incremental_states",
                    "type": "variable",
                    "possible_values": []
                },
                "the_type": {
                    "value": "List[Dict[str, Dict[str, Optional[Tensor]]]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[torch.jit.annotate(Dict[str, Dict[str, Optional[Tensor]]], {}) for i in range(lm.models_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_774": {
                "variable": {
                    "value": "probs_next_wrd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_lprobs.repeat(1, k).view(lm_lprobs_size * k, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "cand_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cand_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_774": {
                "variable": {
                    "value": "probs_next_wrd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_799": {
                "tensors": {
                    "value": "(tokens.new([eos]), tokens[-lengths:-1], tokens[:-lengths])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_805": {
                "tensors": {
                    "value": "[reorder_tokens(token, length, eos) for (token, length) in zip(tokens, lengths)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unique_818": {
                "variable": {
                    "value": "vocab_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((torch.unique(target_ids), torch.arange(top_k, device=target_ids.device)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_830": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight[vocab_ids, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_831": {
                "variable": {
                    "value": "log_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(features, weight[vocab_ids, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_832": {
                "variable": {
                    "value": "intermed_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_softmax[:, :-1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "expanded_target_ids[:, 1:].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_832": {
                "variable": {
                    "value": "intermed_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "masked_select_625": {
                "variable": {
                    "value": "eos_bbsz_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_bbsz_idx[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "eos_mask[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "prefix_toks.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "cand_indices.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "eos_mask[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_691": {
                "variable": {
                    "value": "active_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eos_mask.type_as(cand_offsets) * cand_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "cand_offsets[:eos_mask.size(1)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_713": {
                "variable": {
                    "value": "active_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fw_lprobs_top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search.step(step, fw_lprobs.view(bsz, -1, self.vocab_size), scores.view(bsz, beam_size, -1)[:, :, :step], ch_lm_lprobs.view(bsz, -1, self.vocab_size), lm_lprobs.view(bsz, -1, self.vocab_size), self.combine_method)",
                            "Call"
                        ],
                        [
                            "fw_lprobs_top_k[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_hypos')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "scores[:, step].view(bsz, beam_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_768": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_787": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_356": {
                "variable": {
                    "value": "src_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens[:, :] != self.src_dict.pad_index",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fw_top_k.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_631": {
                "variable": {
                    "value": "eos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fw_lprobs_top_k[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "eos_mask[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "prefix_toks.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "cand_indices.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "eos_mask[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "masked_select_634": {
                "variable": {
                    "value": "combined_noisy_channel_eos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_noisy_channel_scores[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "eos_mask[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "prefix_toks.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "cand_indices.eq(self.eos)",
                            "Call"
                        ],
                        [
                            "eos_mask[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nonzero_655": {
                "variable": {
                    "value": "batch_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cand_indices.new_ones(bsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_655": {
                "variable": {
                    "value": "batch_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_699": {
                "input": {
                    "value": "active_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(eos_mask.type_as(cand_offsets) * cand_size, cand_offsets[:eos_mask.size(1)])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "(new_cands_to_ignore, active_hypos)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_709": {
                "input": {
                    "value": "cand_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cand_beams.add(bbsz_offsets)",
                            "Call"
                        ],
                        [
                            "cand_beams.add(bbsz_offsets)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_hypos')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_bbsz_idx')",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_722": {
                "input": {
                    "value": "tokens[:, :step + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_bbsz_idx')",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tokens_buf[:, :step + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tokens.clone()",
                            "Call"
                        ],
                        [
                            "tokens",
                            "variable"
                        ]
                    ]
                }
            },
            "gather_726": {
                "input": {
                    "value": "cand_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search.step(step, fw_lprobs.view(bsz, -1, self.vocab_size), scores.view(bsz, beam_size, -1)[:, :, :step], ch_lm_lprobs.view(bsz, -1, self.vocab_size), lm_lprobs.view(bsz, -1, self.vocab_size), self.combine_method)",
                            "Call"
                        ],
                        [
                            "cand_indices[batch_idxs]",
                            "Subscript"
                        ],
                        [
                            "prefix_tokens[:, step].view(-1, 1).expand(bsz, beam_size).data.contiguous().view(bsz * beam_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_hypos')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tokens_buf.view(bsz, beam_size, -1)[:, :, step + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_735": {
                "input": {
                    "value": "fw_lprobs_top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search.step(step, fw_lprobs.view(bsz, -1, self.vocab_size), scores.view(bsz, beam_size, -1)[:, :, :step], ch_lm_lprobs.view(bsz, -1, self.vocab_size), lm_lprobs.view(bsz, -1, self.vocab_size), self.combine_method)",
                            "Call"
                        ],
                        [
                            "fw_lprobs_top_k[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_hypos')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "scores_buf.view(bsz, beam_size, -1)[:, :, step]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_739": {
                "input": {
                    "value": "lm_lprobs_top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search.step(step, fw_lprobs.view(bsz, -1, self.vocab_size), scores.view(bsz, beam_size, -1)[:, :, :step], ch_lm_lprobs.view(bsz, -1, self.vocab_size), lm_lprobs.view(bsz, -1, self.vocab_size), self.combine_method)",
                            "Call"
                        ],
                        [
                            "lm_lprobs_top_k[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_hypos')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "lm_prefix_scores.view(bsz, beam_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_819": {
                "tensors": {
                    "value": "(torch.unique(target_ids), torch.arange(top_k, device=target_ids.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "annotate_154": {
                "the_type": {
                    "value": "Dict[str, Dict[str, Optional[Tensor]]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "no_grad_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_341": {
                "variable": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.view(bsz, -1, lprobs.size(-1))[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "prefix_tokens[:, step].view(-1, 1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_353": {
                "variable": {
                    "value": "(fw_top_k, fw_top_k_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.view(beam_size * bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_373": {
                "variable": {
                    "value": "ch_input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.full(channel_input.size(0), cur_tgt_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "annotate_491": {
                "the_type": {
                    "value": "Dict[str, Dict[str, Optional[Tensor]]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "index_select_731": {
                "input": {
                    "value": "scores[:, :step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_bbsz_idx')",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "scores_buf[:, :step]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "scores.clone()",
                            "Call"
                        ],
                        [
                            "scores_buf.type_as(fw_lprobs)",
                            "Call"
                        ],
                        [
                            "scores",
                            "variable"
                        ]
                    ]
                }
            },
            "index_select_746": {
                "input": {
                    "value": "attn[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer('active_bbsz_idx')",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "attn_buf[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attn.clone()",
                            "Call"
                        ],
                        [
                            "attn",
                            "variable"
                        ]
                    ]
                }
            },
            "nonzero_354": {
                "input": {
                    "value": "fw_top_k_idx.view(bsz * beam_size * k, -1) == self.eos",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_368": {
                "variable": {
                    "value": "channel_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fw_top_k_idx.view(-1, 1), eos_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "channel_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tokens[:, 1:step + 1].repeat(1, k).view(-1, step), fw_top_k_idx.view(-1, 1), eos_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_382": {
                "variable": {
                    "value": "ch_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ch_intermed_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel_model.decoder.unnormalized_scores_given_target(ch_decoder_output, target_ids=temp_src_tokens_full[:, 1:])",
                            "Call"
                        ],
                        [
                            "ch_intermed_scores.float()",
                            "Call"
                        ],
                        [
                            "ch_intermed_scores * not_padding.float()",
                            "BinOp"
                        ],
                        [
                            "torch.gather(ch_lprobs[:, :-1, :], 2, temp_src_tokens_full[:, 1:].unsqueeze(2)).squeeze().view(bsz * beam_size * k, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_820": {
                "input": {
                    "value": "target_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_820": {
                "start": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "target_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_437": {
                "data": {
                    "value": "np.full(tokens.size(0), step + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_441": {
                "data": {
                    "value": "np.full(tokens.size(0), step + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_503": {
                "start": {
                    "value": "batch_idxs.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_224": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[0]",
                            "Subscript"
                        ],
                        [
                            "new_bsz",
                            "variable"
                        ],
                        [
                            "bsz",
                            "Method Argument"
                        ],
                        [
                            "bsz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_394": {
                "variable": {
                    "value": "k_ch_intermed_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_ch_lprobs[:, :-1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "src_tokens[:, 1:].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_394": {
                "variable": {
                    "value": "k_ch_intermed_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_396": {
                "variable": {
                    "value": "ch_scores[k_idx::k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "k_ch_intermed_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(k_ch_lprobs[:, :-1, :], 2, src_tokens[:, 1:].unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "k_ch_intermed_scores * not_padding.float()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_406": {
                "variable": {
                    "value": "ch_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ch_lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalized_scores_with_batch_vocab(channel_model.decoder, ch_decoder_output, src_tokens, k, bsz, beam_size, self.src_dict.pad_index, top_k=self.top_k_vocab)",
                            "Call"
                        ],
                        [
                            "channel_model.get_normalized_probs(ch_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "torch.cat(ch_lprobs_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "k_ch_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fw_top_k_idx[:, k_idx:k_idx + 1], k_eos_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_390": {
                "variable": {
                    "value": "k_ch_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tokens[:, 1:step + 1], fw_top_k_idx[:, k_idx:k_idx + 1], k_eos_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_422": {
                "variable": {
                    "value": "ch_lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ch_lprobs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * len(range(0, ch_bsz_size, self.ch_scoring_bsz))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_423": {
                "variable": {
                    "value": "ch_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ch_lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalized_scores_with_batch_vocab(channel_model.decoder, ch_decoder_output, src_tokens, k, bsz, beam_size, self.src_dict.pad_index, top_k=self.top_k_vocab)",
                            "Call"
                        ],
                        [
                            "channel_model.get_normalized_probs(ch_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "torch.cat(ch_lprobs_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_427": {
                "variable": {
                    "value": "ch_intermed_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ch_lprobs[:, :-1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "temp_src_tokens_full[:, 1:].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_427": {
                "variable": {
                    "value": "ch_intermed_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_429": {
                "variable": {
                    "value": "ch_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ch_intermed_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel_model.decoder.unnormalized_scores_given_target(ch_decoder_output, target_ids=temp_src_tokens_full[:, 1:])",
                            "Call"
                        ],
                        [
                            "ch_intermed_scores.float()",
                            "Call"
                        ],
                        [
                            "ch_intermed_scores * not_padding.float()",
                            "BinOp"
                        ],
                        [
                            "torch.gather(ch_lprobs[:, :-1, :], 2, temp_src_tokens_full[:, 1:].unsqueeze(2)).squeeze().view(bsz * beam_size * k, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/fast_noisy_channel/noisy_channel_translation.py": {
        "torch": {
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/hubert/simple_kmeans/dump_hubert_feature.py": {
        "torch": {
            "from_numpy_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.read_audio(path, ref_len)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.layer_norm(x, x.shape)",
                            "Call"
                        ],
                        [
                            "x.view(1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "layer_norm_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.read_audio(path, ref_len)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.layer_norm(x, x.shape)",
                            "Call"
                        ],
                        [
                            "x.view(1, -1)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.get_feats(path, nsample)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/hubert/simple_kmeans/dump_km_label.py": {
        "torch": {
            "from_numpy_31": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.C_np",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "self.Cnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.Cnorm_np",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_41": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/hubert/simple_kmeans/dump_mfcc_feature.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.read_audio(path, ref_len)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).float()",
                            "Call"
                        ],
                        [
                            "x.view(1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_54": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mfccs, deltas, ddeltas]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/hubert/update_ckpt.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "src_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "src_ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/checkpoint/wnhsu/w2v/archived/hubert_base_ls960_it2.pt'",
                            "str"
                        ]
                    ]
                }
            },
            "save_22": {
                "obj": {
                    "value": "src_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(src_ckpt)",
                            "Call"
                        ],
                        [
                            "update_state(src_state)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "new_ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/checkpoint/wnhsu/w2v/archived/hubert_base_ls960_it2_updated.pt'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "examples/laser/laser_src/laser_lstm.py": {
        "torch": {
            "Embedding_532": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_539": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMCell_547": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_556": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_262": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs, padding_value=self.padding_value)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill_(padding_mask, float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_283": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(packed_x, (h0, c0))",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "self.padding_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_286": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs, padding_value=self.padding_value)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill_(padding_mask, float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_372": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LSTMCell(input_size=encoder_output_units + embed_dim + lang_embed_dim if layer == 0 else hidden_size, hidden_size=hidden_size) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_416": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs, padding_value=self.padding_value)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill_(padding_mask, float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_494": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_269": {
                "variable": {
                    "value": "packed_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs, padding_value=self.padding_value)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill_(padding_mask, float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_lengths.data.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_397": {
                "variable": {
                    "value": "self.embed_lang",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_langs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task.num_tasks if hasattr(task, 'num_tasks') else 0",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "lang_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_477": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "F.dropout(out, p=self.dropout_out, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_505": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs, padding_value=self.padding_value)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill_(padding_mask, float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_461": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[j, :, :], sentemb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_463": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[j, :, :], sentemb, langemb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_470": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn(input, (prev_hiddens[i], prev_cells[i]))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_292": {
                "tensors": {
                    "value": "[torch.cat([outs[2 * i], outs[2 * i + 1]], dim=0).view(1, bsz, self.output_units) for i in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_294": {
                "tensors": {
                    "value": "[outs[2 * i], outs[2 * i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/laser/laser_src/laser_transformer.py": {
        "torch": {
            "cat_260": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, sentemb.expand(*repeat_vals))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_153": {
                "variable": {
                    "value": "self.embed_lang",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_langs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.lang_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "laser_output_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_embed_dim + self.lang_embed_dim + args.encoder_embed_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "len(dictionary)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, langemb.expand(*repeat_vals))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/latent_depth/latent_depth_src/loss/latent_depth.py": {
        "torch": {
            "stack_62": {
                "variable": {
                    "value": "layer_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer_samples_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_samples_list",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_78": {
                "variable": {
                    "value": "layer_utilization",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(layer_samples_list, dim=0)",
                            "Call"
                        ],
                        [
                            "layer_samples",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_26": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.detach() for x in layer_samples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "agged_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([x.detach() for x in layer_samples], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_23": {
                "input": {
                    "value": "samples + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "normed_agg_q + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/latent_depth/latent_depth_src/models/latent_transformer.py": {
        "torch": {
            "ModuleList_33": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._build_encoder_layer(args, idx) for idx in range(args.encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._build_decoder_layer(args, no_encoder_attn, idx) for idx in range(args.decoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/latent_depth/latent_depth_src/modules/latent_layers.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.layer_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_logits, num_layers)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.legacy_contiguous_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_54": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.legacy_contiguous_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_like_59": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.legacy_contiguous_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/linformer/linformer_src/models/linformer_roberta.py": {
        "torch": {
            "tensor_87": {
                "variable": {
                    "value": "state_dict[f{prefix}version]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_89": {
                "input": {
                    "value": "state_dict[f'{prefix}sentence_encoder.embed_tokens.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "state_dict[f'{prefix}lm_head.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/linformer/linformer_src/modules/linformer_sentence_encoder.py": {
        "torch": {
            "Linear_44": {
                "variable": {
                    "value": "compress_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.max_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.max_positions // self.args.compressed",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/linformer/linformer_src/modules/linformer_sentence_encoder_layer.py": {
        "torch": {
            "tensor_49": {
                "variable": {
                    "value": "state_dict[f{prefix}version]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "self.shared_compress_layer[0].weight.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.shared_compress_layer[0].weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/linformer/linformer_src/modules/multihead_linear_attention.py": {
        "torch": {
            "bmm_328": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_348": {
                "variable": {
                    "value": "attn_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "MultiheadLinearAttention.apply_sparse_mask(attn_weights, tgt_len, src_len, bsz)",
                            "Call"
                        ],
                        [
                            "attn_weights + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_weights_float.type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attn_weights_float.view(bsz, self.num_heads, tgt_len, src_len).transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "attn_weights.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "attn_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_354": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_proj(v_input)",
                            "Call"
                        ],
                        [
                            "self.v_proj(key)",
                            "Call"
                        ],
                        [
                            "self.v_proj(value)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, self.bias_v.repeat(1, bsz, 1)])",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, v.new_zeros((v.size(0), 1) + v.size()[2:])], dim=1)",
                            "Call"
                        ],
                        [
                            "prev_value",
                            "variable"
                        ],
                        [
                            "torch.cat([prev_value, v], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.compress_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "max_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.compress_seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_205": {
                "variable": {
                    "value": "k_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.permute(1, 2, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "F.linear(k_input, self.compress_k.weight[:, 0:tgt_len]).permute(2, 0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.compress_k.weight[:, 0:tgt_len]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_205": {
                "variable": {
                    "value": "k_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, k.new_zeros((k.size(0), 1) + k.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, v.new_zeros((v.size(0), 1) + v.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "self.kdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "self.vdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.compress_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "max_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.compress_seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_214": {
                "variable": {
                    "value": "v_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.permute(1, 2, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "F.linear(v_input, self.compress_v.weight[:, 0:tgt_len]).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.linear(v_input, self.compress_k.weight[:, 0:tgt_len]).permute(2, 0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.compress_v.weight[:, 0:tgt_len]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_214": {
                "variable": {
                    "value": "v_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_220": {
                "variable": {
                    "value": "v_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.permute(1, 2, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "F.linear(v_input, self.compress_v.weight[:, 0:tgt_len]).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.linear(v_input, self.compress_k.weight[:, 0:tgt_len]).permute(2, 0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.compress_k.weight[:, 0:tgt_len]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_220": {
                "variable": {
                    "value": "v_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, key_padding_mask.new_zeros(key_padding_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_386": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask.float(), key_padding_mask.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_value, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_393": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, src_len - prev_key_padding_mask.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "prev_key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask.float(), filler.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_401": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, src_len - key_padding_mask.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_405": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[filler.float(), key_padding_mask.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/pointer_generator/pointer_generator_src/transformer_pg.py": {
        "torch": {
            "Linear_242": {
                "variable": {
                    "value": "self.project_p_gens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "p_gen_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_embed_dim + self.output_embed_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_343": {
                "variable": {
                    "value": "gen_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_normalized_probs_scriptable((logits, None), log_probs=False, sample=None)",
                            "Call"
                        ],
                        [
                            "torch.mul(gen_dists, p_gens)",
                            "Call"
                        ],
                        [
                            "torch.cat((gen_dists, padding), 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_gens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.project_p_gens(predictors)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(p_gens.float())",
                            "Call"
                        ],
                        [
                            "self.force_p_gen",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_346": {
                "variable": {
                    "value": "gen_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gen_dists, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_354": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - p_gens",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_432": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "input >= self.num_embeddings",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(input) * self.unk_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(input >= self.num_embeddings, torch.ones_like(input) * self.unk_idx, input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_301": {
                "variable": {
                    "value": "predictors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_output_embed, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_303": {
                "variable": {
                    "value": "p_gens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_gens.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_435": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(input >= self.num_embeddings, torch.ones_like(input) * self.unk_idx, input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_433": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(input >= self.num_embeddings, torch.ones_like(input) * self.unk_idx, input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/roberta/commonsense_qa/commonsense_qa_task.py": {
        "torch": {
            "cat_93": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens.new([self.args.init_token]), tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "src_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[question_toks, binarize(src)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/roberta/wsc/wsc_criterion.py": {
        "torch": {
            "log_softmax_51": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src_tokens=self.get_masked_input(tokens, mask))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_59": {
                "input": {
                    "value": "torch.cat([query_lprobs, cand_lprobs]).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "query_lprobs.new([0]).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[query_lprobs, cand_lprobs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/roberta/wsc/wsc_task.py": {
        "torch": {
            "zeros_like_104": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "toks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.binarize(prefix + leading_space + txt + trailing_space + suffix, append_eos=True)",
                            "Call"
                        ],
                        [
                            "self.binarize_with_mask(cand_span.text, prefix, suffix, leading_space, trailing_space)",
                            "Call"
                        ],
                        [
                            "full_cand[mask.bool()]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens.new([self.args.init_token]), tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_softmax_249": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src_tokens=get_masked_input(tokens, mask))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/rxf/rxf_src/label_smoothed_cross_entropy_r3f.py": {
        "torch": {
            "Normal_27": {
                "variable": {
                    "value": "self.noise_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Uniform_31": {
                "variable": {
                    "value": "self.noise_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "kl_div_54": {
                "input": {
                    "value": "F.log_softmax(noised_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(input_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "size_average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduce": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "kl_div_61": {
                "input": {
                    "value": "F.log_softmax(input_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(noised_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "size_average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduce": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_55": {
                "input": {
                    "value": "noised_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], token_embeddings=noised_embeddings)",
                            "Call"
                        ],
                        [
                            "noised_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "input": {
                    "value": "input_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'])",
                            "Call"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_62": {
                "input": {
                    "value": "input_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'])",
                            "Call"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "input": {
                    "value": "noised_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], token_embeddings=noised_embeddings)",
                            "Call"
                        ],
                        [
                            "noised_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/rxf/rxf_src/sentence_prediction_r3f.py": {
        "torch": {
            "Normal_32": {
                "variable": {
                    "value": "self.noise_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_117": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(input_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [input_logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_128": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_logits.squeeze().float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [input_logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Uniform_36": {
                "variable": {
                    "value": "self.noise_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "kl_div_59": {
                "input": {
                    "value": "F.log_softmax(noised_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(input_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "size_average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduce": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "kl_div_66": {
                "input": {
                    "value": "F.log_softmax(input_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(noised_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "size_average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduce": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_118": {
                "input": {
                    "value": "input_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], features_only=True, classification_head_name=self.classification_head_name, token_embeddings=token_embeddings)",
                            "Call"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "input": {
                    "value": "noised_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], features_only=True, classification_head_name=self.classification_head_name, token_embeddings=noised_embeddings)",
                            "Call"
                        ],
                        [
                            "noised_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "input": {
                    "value": "input_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], features_only=True, classification_head_name=self.classification_head_name, token_embeddings=token_embeddings)",
                            "Call"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_67": {
                "input": {
                    "value": "input_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], features_only=True, classification_head_name=self.classification_head_name, token_embeddings=token_embeddings)",
                            "Call"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "input": {
                    "value": "noised_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], features_only=True, classification_head_name=self.classification_head_name, token_embeddings=noised_embeddings)",
                            "Call"
                        ],
                        [
                            "noised_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simultaneous_translation/eval/agents/simul_t2t_enja.py": {
        "torch": {
            "empty_cache_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_175": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simultaneous_translation/models/convtransformer_simul_trans.py": {
        "torch": {
            "ModuleList_109": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[NoSegAugmentedMemoryTransformerEncoderLayer(input_dim=args.encoder_embed_dim, num_heads=args.encoder_attention_heads, ffn_dim=args.encoder_ffn_embed_dim, num_layers=args.encoder_layers, dropout_in_attn=args.dropout, dropout_on_attn=args.dropout, dropout_on_fc1=args.dropout, dropout_on_fc2=args.dropout, activation_fn=args.activation_fn, context_config=context_config, segment_size=args.segment_length, max_memory_size=args.max_memory_size, scaled_init=True, tanh_on_mem=args.amtrf_tanh_on_mem)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simultaneous_translation/models/transformer_monotonic_attention.py": {
        "torch": {
            "ModuleList_89": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_223": {
                "variable": {
                    "value": "p_choose",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simultaneous_translation/modules/fixed_pre_decision.py": {
        "torch": {
            "pad_91": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1, 1, 1).to(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(stride - 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv_transpose1d_92": {
                "variable": {
                    "value": "x_upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(-1, src_len).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(torch.ones(1, 1, 1).to(x), (stride - 1, 0))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pre_decision_ratio",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_120": {
                "variable": {
                    "value": "p_choose",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "key.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tgt_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "int(tgt)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "key.size()",
                            "Call"
                        ],
                        [
                            "key.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tril_121": {
                "variable": {
                    "value": "p_choose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_choose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_choose",
                            "Call"
                        ],
                        [
                            "torch.ones(bsz, tgt_len, src_len).to(query)",
                            "Call"
                        ],
                        [
                            "torch.tril(p_choose, diagonal=self.waitk_lagging - 1)",
                            "Call"
                        ],
                        [
                            "torch.triu(p_choose, diagonal=self.waitk_lagging - 1)",
                            "Call"
                        ],
                        [
                            "p_choose[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "p_choose.contiguous().unsqueeze(1).expand(-1, self.num_heads, -1, -1).contiguous().view(-1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "self.insert_zeros(p_choose_pooled)",
                            "Call"
                        ],
                        [
                            "torch.cat([p_choose, torch.zeros(p_choose.size(0), tgt_len, src_len - p_choose.size(-1)).to(p_choose)], dim=2)",
                            "Call"
                        ],
                        [
                            "p_choose[:, :, :src_len]",
                            "Subscript"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "self.waitk_lagging - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_122": {
                "variable": {
                    "value": "p_choose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_choose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_choose",
                            "Call"
                        ],
                        [
                            "torch.ones(bsz, tgt_len, src_len).to(query)",
                            "Call"
                        ],
                        [
                            "torch.tril(p_choose, diagonal=self.waitk_lagging - 1)",
                            "Call"
                        ],
                        [
                            "torch.triu(p_choose, diagonal=self.waitk_lagging - 1)",
                            "Call"
                        ],
                        [
                            "p_choose[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "p_choose.contiguous().unsqueeze(1).expand(-1, self.num_heads, -1, -1).contiguous().view(-1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "self.insert_zeros(p_choose_pooled)",
                            "Call"
                        ],
                        [
                            "torch.cat([p_choose, torch.zeros(p_choose.size(0), tgt_len, src_len - p_choose.size(-1)).to(p_choose)], dim=2)",
                            "Call"
                        ],
                        [
                            "p_choose[:, :, :src_len]",
                            "Subscript"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "self.waitk_lagging - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AvgPool1d_35": {
                "variable": {
                    "value": "self.pooling_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.pre_decision_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.pre_decision_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "p_choose",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_choose, torch.zeros(p_choose.size(0), tgt_len, src_len - p_choose.size(-1)).to(p_choose)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_91": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "*size": {
                    "value": "p_choose.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "tgt_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "int(tgt)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "src_len - p_choose.size(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, key[:, :, -1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simultaneous_translation/modules/monotonic_multihead_attention.py": {
        "torch": {
            "clamp_131": {
                "variable": {
                    "value": "cumprod_1mp_clamp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumprod_1mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exclusive_cumprod(1 - p_choose, dim=2, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "exclusive_cumprod(1 - p_choose, dim=2, eps=self.eps)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "previous_attn[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_347": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.type_as(v_proj)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_proj_output(value)",
                            "Call"
                        ],
                        [
                            "self.v_proj_output(value)",
                            "Call"
                        ],
                        [
                            "self.input_projections(None, None, value, 'output')",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_467": {
                "variable": {
                    "value": "cumprod_1mp_clamp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumprod_1mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exclusive_cumprod(1 - p_choose, dim=2, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "exclusive_cumprod(1 - p_choose, dim=2, eps=self.eps)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_487": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "previous_attn[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_559": {
                "variable": {
                    "value": "step_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_569": {
                "variable": {
                    "value": "p_choose_i",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_687": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.type_as(v_proj)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_proj_output(value)",
                            "Call"
                        ],
                        [
                            "self.v_proj_output(value)",
                            "Call"
                        ],
                        [
                            "self.input_projections(None, None, value, 'output')",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_793": {
                "variable": {
                    "value": "self.k_proj_soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.kdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_794": {
                "variable": {
                    "value": "self.q_proj_soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isnan_171": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(previous_attn[1:], dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.scatter(2, src_lens.unsqueeze(-1) - 1, residuals)",
                            "Call"
                        ],
                        [
                            "p_choose.new_zeros([bsz * self.num_heads, src_len]).scatter(1, (step_offset + new_monotonic_step).view(bsz * self.num_heads, 1).clamp(0, src_len - 1), 1)",
                            "Call"
                        ],
                        [
                            "alpha.masked_fill((new_monotonic_step == max_steps).view(bsz * self.num_heads, 1), 0)",
                            "Call"
                        ],
                        [
                            "alpha.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.expected_alignment_infer(p_choose, key_padding_mask, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.expected_alignment_train(p_choose, key_padding_mask)",
                            "Call"
                        ],
                        [
                            "alpha.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "torch.cat(previous_attn[1:], dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.scatter(2, src_lens.unsqueeze(-1) - 1, residuals)",
                            "Call"
                        ],
                        [
                            "p_choose.new_zeros([bsz * self.num_heads, src_len]).scatter(1, (step_offset + new_monotonic_step).view(bsz * self.num_heads, 1).clamp(0, src_len - 1), 1)",
                            "Call"
                        ],
                        [
                            "alpha.masked_fill((new_monotonic_step == max_steps).view(bsz * self.num_heads, 1), 0)",
                            "Call"
                        ],
                        [
                            "alpha.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.expected_alignment_infer(p_choose, key_padding_mask, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.expected_alignment_train(p_choose, key_padding_mask)",
                            "Call"
                        ],
                        [
                            "alpha.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_507": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(previous_attn[1:], dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.scatter(2, src_lens.unsqueeze(-1) - 1, residuals)",
                            "Call"
                        ],
                        [
                            "p_choose.new_zeros([bsz * self.num_heads, src_len]).scatter(1, (step_offset + new_monotonic_step).view(bsz * self.num_heads, 1).clamp(0, src_len - 1), 1)",
                            "Call"
                        ],
                        [
                            "alpha.masked_fill((new_monotonic_step == max_steps).view(bsz * self.num_heads, 1), 0)",
                            "Call"
                        ],
                        [
                            "alpha.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.expected_alignment_infer(p_choose, key_padding_mask, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.expected_alignment_train(p_choose, key_padding_mask)",
                            "Call"
                        ],
                        [
                            "alpha.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "torch.cat(previous_attn[1:], dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.scatter(2, src_lens.unsqueeze(-1) - 1, residuals)",
                            "Call"
                        ],
                        [
                            "p_choose.new_zeros([bsz * self.num_heads, src_len]).scatter(1, (step_offset + new_monotonic_step).view(bsz * self.num_heads, 1).clamp(0, src_len - 1), 1)",
                            "Call"
                        ],
                        [
                            "alpha.masked_fill((new_monotonic_step == max_steps).view(bsz * self.num_heads, 1), 0)",
                            "Call"
                        ],
                        [
                            "alpha.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.expected_alignment_infer(p_choose, key_padding_mask, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.expected_alignment_train(p_choose, key_padding_mask)",
                            "Call"
                        ],
                        [
                            "alpha.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_507": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_845": {
                "variable": {
                    "value": "exp_soft_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_energy(q, k, key_padding_mask, attn_mask)",
                            "Call"
                        ],
                        [
                            "soft_energy.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "soft_energy - soft_energy.max(dim=2, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "soft_energy.masked_fill(~mask.to(torch.bool), float('-inf'))",
                            "Call"
                        ],
                        [
                            "soft_energy - soft_energy.max(dim=2, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_870": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.expected_attention(alpha, query, key, value, key_padding_mask, attn_mask, incremental_state)",
                            "Call"
                        ],
                        [
                            "beta.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "self.expected_attention(alpha, query, key, value, key_padding_mask, attn_mask, incremental_state)",
                            "Call"
                        ],
                        [
                            "beta.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "exp_soft_energy * torch.cumsum(inner_items.flip(dims=[2]), dim=2).flip(dims=[2])",
                            "BinOp"
                        ],
                        [
                            "beta.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "beta.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2).to(torch.bool), 0)",
                            "Call"
                        ],
                        [
                            "beta / beta.sum(dim=3, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "beta.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(beta)",
                            "Call"
                        ],
                        [
                            "exp_soft_energy / exp_soft_energy_sum.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_870": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "data": {
                    "value": "self.energy_bias_init * torch.ones([1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_93": {
                "input": {
                    "value": "q_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_projections(query, key, None, 'monotonic')",
                            "Call"
                        ],
                        [
                            "q_proj",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k_proj.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_429": {
                "input": {
                    "value": "q_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_projections(query, key, None, 'monotonic')",
                            "Call"
                        ],
                        [
                            "q_proj",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k_proj.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_552": {
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_proj.size()",
                            "Call"
                        ],
                        [
                            "bsz // self.num_heads",
                            "BinOp"
                        ],
                        [
                            "bsz_num_heads // self.num_heads",
                            "BinOp"
                        ],
                        [
                            "prev_monotonic_step.size()",
                            "Call"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "q_proj.size()",
                            "Call"
                        ],
                        [
                            "bsz // self.num_heads",
                            "BinOp"
                        ],
                        [
                            "bsz_num_heads // self.num_heads",
                            "BinOp"
                        ],
                        [
                            "prev_monotonic_step.size()",
                            "Call"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "query.size(1)",
                            "Call"
                        ],
                        [
                            "key.size(1)",
                            "Call"
                        ],
                        [
                            "value.size(1)",
                            "Call"
                        ],
                        [
                            "int(bsz_x_num_heads / self.num_heads)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_851": {
                "input": {
                    "value": "soft_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_energy(q, k, key_padding_mask, attn_mask)",
                            "Call"
                        ],
                        [
                            "soft_energy.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "soft_energy - soft_energy.max(dim=2, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "soft_energy.masked_fill(~mask.to(torch.bool), float('-inf'))",
                            "Call"
                        ],
                        [
                            "soft_energy - soft_energy.max(dim=2, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cumsum_852": {
                "input": {
                    "value": "exp_soft_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(soft_energy) + self.eps",
                            "BinOp"
                        ],
                        [
                            "torch.exp(soft_energy)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_856": {
                "input": {
                    "value": "inner_items.flip(dims=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_856": {
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cumsum_146": {
                "input": {
                    "value": "previous_attn[i][:, 0] / cumprod_1mp_clamp[:, i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_482": {
                "input": {
                    "value": "previous_attn[i][:, 0] / cumprod_1mp_clamp[:, i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simultaneous_translation/modules/monotonic_transformer_layer.py": {
        "torch": {
            "cat_127": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_out, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "self_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.new_zeros(x.size(0), encoder_out.size(0)), self_attn_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "self_attn_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_padding_mask, self_attn_padding_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simultaneous_translation/utils/data_utils.py": {
        "torch": {
            "max_46": {
                "variable": {
                    "value": "max_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_48": {
                "start": {
                    "value": "max_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lengths).item()",
                            "Call"
                        ],
                        [
                            "max_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_100": {
                "input": {
                    "value": "encoder_padding_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_lengths).to(lengths.device).view(1, max_lengths).expand(bsz, -1) >= lengths.view(bsz, 1).expand(-1, max_lengths)",
                            "Compare"
                        ],
                        [
                            "encoder_padding_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_18": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature.var(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_17": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature.var(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/simultaneous_translation/utils/functions.py": {
        "torch": {
            "log_49": {
                "variable": {
                    "value": "log_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cumsum_50": {
                "variable": {
                    "value": "cumsum_log_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(tensor + eps)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_51": {
                "variable": {
                    "value": "exp_cumsum_log_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumsum_log_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumsum(log_tensor, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_138": {
                "variable": {
                    "value": "moving_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.t().unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "moving_sum_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.new_ones([1, 1, end_idx + start_idx - 1])",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "start_idx + end_idx - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "moving_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_138": {
                "variable": {
                    "value": "moving_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_19": {
                "tensors": {
                    "value": "[torch.ones(tensor_size).type_as(tensor), tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_79": {
                "start": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_19": {
                "*size": {
                    "value": "tensor_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tensor.size())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/simultaneous_translation/utils/latency.py": {
        "torch": {
            "zeros_like_167": {
                "variable": {
                    "value": "new_delays",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delays",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delays + 1",
                            "BinOp"
                        ],
                        [
                            "delays.t()",
                            "Call"
                        ],
                        [
                            "delays.masked_fill(target_padding_mask, 0)",
                            "Call"
                        ],
                        [
                            "self.prepare_latency_metric(delays, src_lens, target_padding_mask, batch_first, start_from_zero)",
                            "Call"
                        ],
                        [
                            "delays + 1",
                            "BinOp"
                        ],
                        [
                            "delays.masked_fill(target_padding_mask.unsqueeze(1), 0)",
                            "Call"
                        ],
                        [
                            "monotonic_step.view(monotonic_step.size(0), -1, monotonic_step.size(-1)).max(dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "delays.masked_fill(delays >= src_lens, 0) + (src_lens - 1).expand_as(delays).masked_fill(delays < src_lens, 0)",
                            "BinOp"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_343": {
                "variable": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + src_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_343": {
                "variable": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_92": {
                "variable": {
                    "value": "AP",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delays.masked_fill(target_padding_mask, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "AP",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delays",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delays + 1",
                            "BinOp"
                        ],
                        [
                            "delays.t()",
                            "Call"
                        ],
                        [
                            "delays.masked_fill(target_padding_mask, 0)",
                            "Call"
                        ],
                        [
                            "self.prepare_latency_metric(delays, src_lens, target_padding_mask, batch_first, start_from_zero)",
                            "Call"
                        ],
                        [
                            "delays + 1",
                            "BinOp"
                        ],
                        [
                            "delays.masked_fill(target_padding_mask.unsqueeze(1), 0)",
                            "Call"
                        ],
                        [
                            "monotonic_step.view(monotonic_step.size(0), -1, monotonic_step.size(-1)).max(dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "delays.masked_fill(delays >= src_lens, 0) + (src_lens - 1).expand_as(delays).masked_fill(delays < src_lens, 0)",
                            "BinOp"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ],
                        [
                            "delays",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(attention, dim=1)",
                            "Call"
                        ],
                        [
                            "attention.view(-1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attention.view(-1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "torch.cat([attention[:, :, :-1], residual_attention], dim=2)",
                            "Call"
                        ],
                        [
                            "attention",
                            "Method Argument"
                        ],
                        [
                            "attention",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_339": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention[:, :, :-1], residual_attention]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_124": {
                "input": {
                    "value": "lagging_padding_mask.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_392": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expected_delays",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(steps * attention).sum(dim=2).view(bsz, num_heads_x_layers, tgt_len)",
                            "Call"
                        ],
                        [
                            "expected_delays.mean(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(expected_delays * weights, dim=1)",
                            "Call"
                        ],
                        [
                            "expected_delays.max(dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "self.expected_delays_from_attention(attention, source_padding_mask, target_padding_mask)",
                            "Call"
                        ],
                        [
                            "expected_delays",
                            "Method Argument"
                        ],
                        [
                            "expected_delays",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_393": {
                "variable": {
                    "value": "expected_delays",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expected_delays * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_130": {
                "start": {
                    "value": "delays.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_183": {
                "start": {
                    "value": "delays.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_183": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "[new_delays[i - 1].unsqueeze(0) + 1 / gamma, delays[i].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_173": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simultaneous_translation/utils/p_choose_strategy.py": {
        "torch": {
            "zeros_81": {
                "variable": {
                    "value": "p_choose",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "key.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tgt_len * max_src_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_120": {
                "variable": {
                    "value": "p_choose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energy + noise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_115": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "noise_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "std": {
                    "value": "noise_var",
                    "type": "variable",
                    "possible_values": []
                },
                "generator": {
                    "value": "attn_energy.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_51": {
                "start": {
                    "value": "tgt_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "incremental_state['steps']['tgt']",
                            "Subscript"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "int(tgt_len)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "p_choose.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/speech_recognition/criterions/ASG_loss.py": {
        "torch": {
            "Parameter_63": {
                "variable": {
                    "value": "self.asg.trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "asg_transitions_init * torch.eye(num_labels)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.linseg_progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([0], dtype=torch.int)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_144": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.asg.forward(emissions, target.to(device), target_size.to(device))",
                            "Call"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_64": {
                "n": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.tgt_dict)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/speech_recognition/criterions/cross_entropy_acc.py": {
        "torch": {
            "nll_loss_41": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_normalized_probs(net_output, log_probs=log_probs)",
                            "Call"
                        ],
                        [
                            "lprobs.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "lprobs.view(-1, lprobs.size(-1))",
                            "Call"
                        ],
                        [
                            "self.compute_loss(model, net_output, target, reduction, log_probs)",
                            "Call"
                        ],
                        [
                            "lprobs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "model.get_targets(sample, net_output)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduction",
                            "Method Argument"
                        ],
                        [
                            "'sum'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_49": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.argmax(1).masked_select(mask) == target.masked_select(mask)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target != self.padding_idx",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_64": {
                "input": {
                    "value": "sample['net_input']['src_lengths']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/speech_recognition/data/collaters.py": {
        "torch": {
            "index_select_107": {
                "variable": {
                    "value": "target_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sort_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frames_lengths.sort(descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s['data'][self.feature_index]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(source)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "fairseq_data_utils.collate_tokens([s['target'] for s in samples], self.pad_index, self.eos_index, left_pad=False, move_eos_to_beginning=False)",
                            "Call"
                        ],
                        [
                            "target.index_select(0, sort_order)",
                            "Call"
                        ],
                        [
                            "s['data'][self.label_index]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(target)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/speech_recognition/data/data_utils.py": {
        "torch": {
            "max_46": {
                "variable": {
                    "value": "max_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_48": {
                "start": {
                    "value": "max_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lengths).item()",
                            "Call"
                        ],
                        [
                            "max_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_100": {
                "input": {
                    "value": "encoder_padding_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_lengths).to(lengths.device).view(1, max_lengths).expand(bsz, -1) >= lengths.view(bsz, 1).expand(-1, max_lengths)",
                            "Compare"
                        ],
                        [
                            "encoder_padding_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_18": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature.var(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_17": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature.var(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/speech_recognition/infer.py": {
        "torch": {
            "from_numpy_206": {
                "variable": {
                    "value": "emissions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "emissions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "np.stack(self.emissions[ids])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(emissions)",
                            "Call"
                        ],
                        [
                            "emissions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/speech_recognition/kaldi/kaldi_decoder.py": {
        "torch": {}
    },
    "examples/speech_recognition/models/vggtransformer.py": {
        "torch": {
            "Embedding_863": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_871": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_888": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_256": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_296": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_393": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sample_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_527": {
                "variable": {
                    "value": "maxT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_lengths.clone()",
                            "Call"
                        ],
                        [
                            "(input_lengths.float() / s).ceil().long()",
                            "Call"
                        ],
                        [
                            "input_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_528": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "maxT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(input_lengths).item()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "maxT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(input_lengths).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_588": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_607": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_884": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)",
                            "Call"
                        ],
                        [
                            "nn.Linear(in_features, out_features, bias=bias)",
                            "Call"
                        ],
                        [
                            "LinearizedConvolution(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "nn.LayerNorm(embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_706": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_710": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(self._future_mask.resize_(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_605": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_604": {
                "normalized_shape": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/speech_recognition/models/w2l_conv_glu_enc.py": {
        "torch": {
            "ModuleList_101": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glu_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_layers[layer_idx](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropouts[layer_idx](x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.linear_layers[0](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self.dropouts[-1](x)",
                            "Call"
                        ],
                        [
                            "self.linear_layers[1](x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_107": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cur_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feat_per_channel",
                            "variable"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_enc_config",
                            "variable"
                        ],
                        [
                            "[2 * cur_channels, vocab_size]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_enc_config",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_enc_config",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cur_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feat_per_channel",
                            "variable"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_enc_config",
                            "variable"
                        ],
                        [
                            "[2 * cur_channels, vocab_size]",
                            "List"
                        ]
                    ]
                }
            },
            "glu_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_layers[layer_idx](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropouts[layer_idx](x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.linear_layers[0](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self.dropouts[-1](x)",
                            "Call"
                        ],
                        [
                            "self.linear_layers[1](x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_109": {
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv1d(cur_channels, out_channels, kernel_size, padding=padding)",
                            "Call"
                        ],
                        [
                            "nn.Linear(cur_channels, out_channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_120": {
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv1d(cur_channels, out_channels, kernel_size, padding=padding)",
                            "Call"
                        ],
                        [
                            "nn.Linear(cur_channels, out_channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_150": {
                "start": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/speech_recognition/new/decoders/base_decoder.py": {
        "torch": {}
    },
    "examples/speech_recognition/new/decoders/flashlight_decoder.py": {
        "torch": {
            "load_320": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.lmpath",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_257": {
                "ndarray": {
                    "value": "curr_state.prefix",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/speech_recognition/new/decoders/viterbi_decoder.py": {
        "torch": {}
    },
    "examples/speech_recognition/new/infer.py": {
        "torch": {
            "is_available_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "profile_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "emit_nvtx_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/speech_recognition/tasks/speech_recognition.py": {
        "torch": {}
    },
    "examples/speech_recognition/w2l_decoder.py": {
        "torch": {
            "load_381": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.kenlm_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_318": {
                "ndarray": {
                    "value": "curr_state.prefix",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/speech_to_text/data_utils.py": {
        "torch": {}
    },
    "examples/speech_to_text/prep_covost_data.py": {
        "torch": {}
    },
    "examples/speech_to_text/prep_mtedx_data.py": {
        "torch": {
            "from_numpy_101": {
                "variable": {
                    "value": "waveform",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "waveform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(dataset)",
                            "Call"
                        ],
                        [
                            "get_waveform(wav_path, frames=n_frames, start=offset)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(waveform)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/speech_to_text/prep_mustc_data.py": {
        "torch": {
            "from_numpy_98": {
                "variable": {
                    "value": "waveform",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "waveform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(dataset)",
                            "Call"
                        ],
                        [
                            "get_waveform(wav_path, frames=n_frames, start=offset)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(waveform)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/speech_to_text/simultaneous_translation/agents/fairseq_simul_st_agent.py": {
        "torch": {
            "cat_105": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.value] + [value]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_70": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "ndarray": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kaldi.fbank(torch.FloatTensor(input_samples).unsqueeze(0), num_mel_bins=self.feature_dim, frame_length=self.window_size, frame_shift=self.shift_size).numpy()",
                            "Call"
                        ],
                        [
                            "self.transform(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_158": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_312": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "data": {
                    "value": "not states.finish_read()",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/translation_moe/translation_moe_src/logsumexp_moe.py": {
        "torch": {
            "logsumexp_20": {
                "input": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/translation_moe/translation_moe_src/mean_pool_gating_network.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_experts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_experts",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_41": {
                "variable": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~encoder_padding_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out['encoder_out'][0].transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_out.clone()",
                            "Call"
                        ],
                        [
                            "encoder_out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_50": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(encoder_out, dim=1) / ntokens.type_as(encoder_out)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(encoder_out, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_42": {
                "input": {
                    "value": "encoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out['encoder_out'][0].transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_out.clone()",
                            "Call"
                        ],
                        [
                            "encoder_out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/translation_moe/translation_moe_src/translation_moe.py": {
        "torch": {
            "cat_174": {
                "variable": {
                    "value": "lprob_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lprob_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "get_lprob_y(encoder_out, prev_output_tokens_k)",
                            "Call"
                        ],
                        [
                            "torch.cat(lprob_y, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_194": {
                "variable": {
                    "value": "prob_z_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprob_yz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_lprob_yz()",
                            "Call"
                        ],
                        [
                            "get_lprob_yz()",
                            "Call"
                        ],
                        [
                            "lprob_y",
                            "variable"
                        ],
                        [
                            "lprob_y + lprob_z.type_as(lprob_y)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/truncated_bptt/transformer_xl_model.py": {
        "torch": {
            "ModuleList_95": {
                "variable": {
                    "value": "self.model.crit.out_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[None] * len(self.model.crit.out_projs._parameters)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/truncated_bptt/truncated_bptt_lm_task.py": {
        "torch": {
            "pad_131": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "item[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.target_dictionary.pad()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_initialized_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "[id] * item.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_269": {
                "start": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/wav2vec/unsupervised/data/extracted_features_dataset.py": {
        "torch": {
            "from_numpy_80": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.data[offset:end].copy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/wav2vec/unsupervised/models/wav2vec_u.py": {
        "torch": {
            "ones_101": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dense_x.shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "dense_x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_259": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*emb_net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_290": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.generator_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_293": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TransposeLast()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_371": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_data.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_505": {
                "variable": {
                    "value": "hard_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hard_x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_506": {
                "variable": {
                    "value": "code_perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(hard_probs * torch.log(hard_probs + 1e-07), dim=-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_510": {
                "variable": {
                    "value": "avg_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense_x.reshape(-1, csz).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_510": {
                "variable": {
                    "value": "avg_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_511": {
                "variable": {
                    "value": "prob_perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(avg_probs * torch.log(avg_probs + 1e-07), dim=-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_118": {
                "variable": {
                    "value": "dense_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dense_x.gather(1, indices_ld)",
                            "Call"
                        ],
                        [
                            "F.pad(dense_x, [0, 0, 0, target_num - rem])",
                            "Call"
                        ],
                        [
                            "dense_x.view(bsz, target_num, -1, fsz)",
                            "Call"
                        ],
                        [
                            "dense_x.mean(dim=-2)",
                            "Call"
                        ],
                        [
                            "dense_x.gather(2, indices_ld).reshape(bsz, -1, fsz)",
                            "Call"
                        ],
                        [
                            "self.dropout(dense_x)",
                            "Call"
                        ],
                        [
                            "self.proj(dense_x)",
                            "Call"
                        ],
                        [
                            "F.gumbel_softmax(dense_x.float(), tau=self.curr_temp, hard=self.hard_gumbel).type_as(dense_x)",
                            "Call"
                        ],
                        [
                            "dense_x.softmax(-1)",
                            "Call"
                        ],
                        [
                            "self.segmenter.logit_segment(orig_dense_x, orig_dense_padding_mask)",
                            "Call"
                        ],
                        [
                            "orig_dense_x",
                            "variable"
                        ],
                        [
                            "self.normalize(dense_logits)",
                            "Call"
                        ],
                        [
                            "dense_x",
                            "Method Argument"
                        ],
                        [
                            "dense_x",
                            "Method Argument"
                        ],
                        [
                            "dense_x",
                            "Method Argument"
                        ],
                        [
                            "dense_x",
                            "Method Argument"
                        ],
                        [
                            "dense_x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, target_num - rem]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_119": {
                "variable": {
                    "value": "dense_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense_padding_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dense_padding_mask.gather(1, index=indices)",
                            "Call"
                        ],
                        [
                            "F.pad(dense_padding_mask, [0, target_num - rem], value=True)",
                            "Call"
                        ],
                        [
                            "dense_padding_mask.view(bsz, target_num, -1)",
                            "Call"
                        ],
                        [
                            "dense_padding_mask.all(dim=-1)",
                            "Call"
                        ],
                        [
                            "dense_padding_mask.gather(2, index=indices).reshape(bsz, -1)",
                            "Call"
                        ],
                        [
                            "dense_padding_mask[:, ::self.stride]",
                            "Subscript"
                        ],
                        [
                            "new_padding",
                            "variable"
                        ],
                        [
                            "self.segmenter.logit_segment(orig_dense_x, orig_dense_padding_mask)",
                            "Call"
                        ],
                        [
                            "orig_dense_padding_mask",
                            "variable"
                        ],
                        [
                            "dense_padding_mask",
                            "Method Argument"
                        ],
                        [
                            "dense_padding_mask",
                            "Method Argument"
                        ],
                        [
                            "dense_padding_mask",
                            "Method Argument"
                        ],
                        [
                            "dense_padding_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, target_num - rem]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_130": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bsz, dense_x.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "dense_x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_222": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_d",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dense_x.max(-1)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "variable"
                        ],
                        [
                            "self.discriminator.parameters()",
                            "Call"
                        ],
                        [
                            "self.generator.parameters()",
                            "Call"
                        ],
                        [
                            "self.segmenter.parameters()",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation if has_dilation else 1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_583": {
                "variable": {
                    "value": "loss_dense",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(dense_x, dense_padding_mask)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "dense_y.new_ones(dense_y.shape) - fake_smooth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_588": {
                "variable": {
                    "value": "loss_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(token_x, token_padding_mask)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "token_y.new_zeros(token_y.shape) + real_smooth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_601": {
                "variable": {
                    "value": "loss_dense",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(dense_x, dense_padding_mask)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "dense_y.new_zeros(dense_y.shape) + fake_smooth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_171": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m.sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_230": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv1d(in_d, out_d, kernel_size=k, padding=p, dilation=dilation if has_dilation else 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.spectral_norm(conv)",
                            "Call"
                        ],
                        [
                            "nn.utils.weight_norm(conv)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_261": {
                "p": {
                    "value": "cfg.discriminator_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_295": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "cfg.generator_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "cfg.generator_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "cfg.generator_dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel - 1",
                            "BinOp"
                        ],
                        [
                            "kernel // 2",
                            "BinOp"
                        ],
                        [
                            "cfg.generator_kernel // 2",
                            "BinOp"
                        ],
                        [
                            "net_output['padding_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "cfg.generator_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_379": {
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(interpolates, None)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size(), device=real_data.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gumbel_softmax_517": {
                "variable": {
                    "value": "dense_x",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "dense_x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "tau": {
                    "value": "self.curr_temp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "self.hard_gumbel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_612": {
                "variable": {
                    "value": "smoothness_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense_logits[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "dense_logits[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "weight_norm_232": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv1d(in_d, out_d, kernel_size=k, padding=p, dilation=dilation if has_dilation else 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.spectral_norm(conv)",
                            "Call"
                        ],
                        [
                            "nn.utils.weight_norm(conv)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_236": {
                "*args": {
                    "value": "make_conv(inner_dim, inner_dim, kernel, padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GELU_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_507": {
                "input": {
                    "value": "hard_probs * torch.log(hard_probs + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_512": {
                "input": {
                    "value": "avg_probs * torch.log(avg_probs + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_239": {
                "p": {
                    "value": "cfg.discriminator_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GELU_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_382": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "real_data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_507": {
                "input": {
                    "value": "hard_probs + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_512": {
                "input": {
                    "value": "avg_probs + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/wav2vec/unsupervised/scripts/apply_pca.py": {
        "torch": {
            "from_numpy_45": {
                "variable": {
                    "value": "pca_A",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(args.pca_path + '_A.npy')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "pca_b",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(args.pca_path + '_b.npy')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(features[start:end]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, pca_A) + pca_b",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pca_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.load(args.pca_path + '_A.npy')).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/wav2vec/unsupervised/scripts/mean_pool.py": {
        "torch": {
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[start:end]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(feats).cuda()",
                            "Call"
                        ],
                        [
                            "x.view(target_num, -1, fsz)",
                            "Call"
                        ],
                        [
                            "x.mean(dim=-2)",
                            "Call"
                        ],
                        [
                            "x[:-to_rem]",
                            "Subscript"
                        ],
                        [
                            "F.pad(x, [0, 0, 0, to_add])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, to_add]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/wav2vec/unsupervised/scripts/merge_clusters.py": {
        "torch": {
            "from_numpy_81": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feats.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_100": {
                "tensors": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/wav2vec/unsupervised/scripts/remove_silence.py": {
        "torch": {
            "cat_48": {
                "variable": {
                    "value": "data_filtered",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[0][int(it[0]):int(it[1])] for it in list_intervals[i]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "data_filtered",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/wav2vec/unsupervised/scripts/wav2vec_apply_cluster_faiss.py": {
        "torch": {
            "from_numpy_80": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(osp.join(args.path, 'pca_A.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(osp.join(args.path, 'pca_b.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_111": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm.tqdm(iterator, total=num)",
                            "Call"
                        ],
                        [
                            "torch.mm(f, A) + b",
                            "BinOp"
                        ],
                        [
                            "F.normalize(f, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "f.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_109": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm.tqdm(iterator, total=num)",
                            "Call"
                        ],
                        [
                            "torch.mm(f, A) + b",
                            "BinOp"
                        ],
                        [
                            "F.normalize(f, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "f.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.load(osp.join(args.path, 'pca_A.npy'))).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/wav2vec/unsupervised/scripts/wav2vec_cluster_faiss.py": {
        "torch": {
            "from_numpy_103": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats",
                            "variable"
                        ],
                        [
                            "pca.apply_py(x)",
                            "Call"
                        ],
                        [
                            "self.read_audio(loc)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/wav2vec/unsupervised/scripts/wav2vec_extract_features.py": {
        "torch": {
            "from_numpy_58": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.read_audio(loc)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "layer_norm_62": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float().cuda()",
                            "Call"
                        ],
                        [
                            "source.view(1, -1)",
                            "Call"
                        ],
                        [
                            "F.layer_norm(source, source.shape)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "source.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/wav2vec/unsupervised/tasks/unpaired_audio_text.py": {
        "torch": {
            "zeros_186": {
                "variable": {
                    "value": "vocab_seen",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_symbols",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/wav2vec/unsupervised/w2vu_generate.py": {
        "torch": {
            "is_tensor_190": {
                "obj": {
                    "value": "hypo['tokens']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_572": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/wav2vec/vq-wav2vec_featurize.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf.read(fname)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wav).float()",
                            "Call"
                        ],
                        [
                            "samples",
                            "variable"
                        ]
                    ]
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FilesDataset(fnames, self.args.labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_222": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairseq.checkpoint_utils.load_model_ensemble_and_task([self.checkpoint])",
                            "Call"
                        ],
                        [
                            "model[0]",
                            "Subscript"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_162": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_243": {
                "obj": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.feature_extractor.vars.view(self.model.feature_extractor.banks, self.model.feature_extractor.num_vars, -1).cpu().detach()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.var_file()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/wav2vec/wav2vec_featurize.py": {
        "torch": {
            "from_numpy_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float().cuda(self.gpu)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/benchmark/dummy_lm.py": {
        "torch": {
            "arange_46": {
                "start": {
                    "value": "cfg.tokens_per_sample + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_69": {
                "tensors": {
                    "value": "[self.dummy_tgt for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_64": {
                "tensors": {
                    "value": "[self.dummy_src for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_65": {
                "size": {
                    "value": "(bsz,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.cfg.tokens_per_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/benchmark/dummy_masked_lm.py": {
        "torch": {
            "arange_53": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "cfg.tokens_per_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_56": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(cfg.tokens_per_sample) + pad_idx + 1",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "pad_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "arange_52": {
                "start": {
                    "value": "cfg.tokens_per_sample",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_80": {
                "tensors": {
                    "value": "[self.dummy_tgt for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_75": {
                "tensors": {
                    "value": "[self.dummy_src for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_76": {
                "size": {
                    "value": "(bsz,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.cfg.tokens_per_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/benchmark/dummy_model.py": {
        "torch": {
            "Embedding_44": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50000",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.layers_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.LayerNorm(embed_dim), nn.Linear(embed_dim, 3 * embed_dim), nn.Linear(3 * embed_dim, embed_dim), nn.Linear(embed_dim, embed_dim), nn.Dropout()) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.layers_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.LayerNorm(embed_dim), nn.Linear(embed_dim, 4 * embed_dim), nn.ReLU(), nn.Linear(4 * embed_dim, embed_dim), nn.Dropout(0.1)) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_89": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output[0].float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output[0].float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "*args": {
                    "value": "nn.LayerNorm(embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "nn.LayerNorm(embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_50": {
                "normalized_shape": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_62": {
                "normalized_shape": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "4 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_66": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/benchmark/dummy_mt.py": {
        "torch": {
            "stack_60": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dummy_tgt for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_34": {
                "start": {
                    "value": "args.src_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_35": {
                "start": {
                    "value": "args.tgt_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_65": {
                "tensors": {
                    "value": "[self.dummy_src for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_66": {
                "size": {
                    "value": "(bsz,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.args.src_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/binarizer.py": {
        "torch": {}
    },
    "fairseq/checkpoint_utils.py": {
        "torch": {
            "load_304": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f in enumerate(files)",
                            "Call"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_507": {
                "obj": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj",
                            "Method Argument"
                        ],
                        [
                            "obj",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f in enumerate(files)",
                            "Call"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_304": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/adaptive_loss.py": {
        "torch": {
            "cross_entropy_74": {
                "input": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum if reduce else none",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/composite_loss.py": {
        "torch": {}
    },
    "fairseq/criterions/cross_entropy.py": {
        "torch": {
            "nll_loss_52": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_normalized_probs(net_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "lprobs.view(-1, lprobs.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, net_output).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum if reduce else none",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/ctc.py": {
        "torch": {
            "ctc_loss_136": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "log_probs": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_normalized_probs(net_output, log_probs=True).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "targets": {
                    "value": "targets_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['target'].masked_select(pad_mask)",
                            "Call"
                        ]
                    ]
                },
                "input_lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['net_input']['src_lengths']",
                            "Subscript"
                        ],
                        [
                            "non_padding_mask.long().sum(-1)",
                            "Call"
                        ],
                        [
                            "lprobs.new_full((lprobs.size(1),), lprobs.size(0), dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "target_lengths": {
                    "value": "target_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['target_lengths']",
                            "Subscript"
                        ],
                        [
                            "pad_mask.sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "blank": {
                    "value": "self.blank_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "zero_infinity": {
                    "value": "self.zero_infinity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/fairseq_criterion.py": {
        "torch": {}
    },
    "fairseq/criterions/hubert_criterion.py": {
        "torch": {
            "cross_entropy_65": {
                "variable": {
                    "value": "loss_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logp_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp_m in enumerate(logp_m_list)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targ_m",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'sum' if reduce else 'none'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cross_entropy_77": {
                "variable": {
                    "value": "loss_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logp_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp_u in enumerate(logp_u_list)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targ_u",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'sum' if reduce else 'none'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_tensor_87": {
                "obj": {
                    "value": "extra_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_extra_losses(net_output)",
                            "Call"
                        ],
                        [
                            "[extra_losses]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/label_smoothed_cross_entropy.py": {
        "torch": {
            "sum_123": {
                "variable": {
                    "value": "n_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.argmax(1).masked_select(mask).eq(target.masked_select(mask))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_126": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.ne(self.padding_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/criterions/legacy_masked_lm.py": {
        "torch": {
            "nll_loss_24": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, -1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_25": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/masked_lm.py": {
        "torch": {
            "where_45": {
                "variable": {
                    "value": "masked_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masked_tokens.any()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['target'].ne(self.padding_idx)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.where(masked_tokens.any(), masked_tokens, masked_tokens.new([True]))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "y": {
                    "value": "masked_tokens.new([True])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_41": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/nat_loss.py": {
        "torch": {
            "tensor_55": {
                "variable": {
                    "value": "nll_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_58": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[masks]",
                            "Subscript"
                        ],
                        [
                            "model(src_tokens, src_lengths, prev_output_tokens, tgt_tokens)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_60": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.to(logits.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "kl_div_63": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.to(logits.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/sentence_prediction.py": {
        "torch": {
            "log_softmax_51": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], features_only=True, classification_head_name=self.classification_head_name)",
                            "Call"
                        ],
                        [
                            "logits.view(-1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_52": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_56": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**sample['net_input'], features_only=True, classification_head_name=self.classification_head_name)",
                            "Call"
                        ],
                        [
                            "logits.view(-1).float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/sentence_ranking.py": {
        "torch": {
            "cat_60": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_65": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_66": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/wav2vec_criterion.py": {
        "torch": {
            "cross_entropy_68": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(net_output).float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_targets(sample, net_output)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none' if not reduce or self.xla else 'sum'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_70": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(net_output).float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "model.get_target_weights(target, net_output)",
                            "Call"
                        ],
                        [
                            "weights.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none' if not reduce or self.xla else 'sum'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_tensor_61": {
                "obj": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "model.get_target_weights(target, net_output)",
                            "Call"
                        ],
                        [
                            "weights.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_96": {
                "obj": {
                    "value": "extra_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_extra_losses(net_output)",
                            "Call"
                        ],
                        [
                            "[extra_losses]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/add_target_dataset.py": {
        "torch": {
            "cat_65": {
                "variable": {
                    "value": "collated[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "collated[net_input][prev_output_tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[eos, target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/append_token_dataset.py": {
        "torch": {
            "cat_24": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item, item.new([self.token])]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/audio/audio_utils.py": {
        "torch": {
            "from_numpy_29": {
                "variable": {
                    "value": "_waveform",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "waveform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf.read(path_or_fp, dtype='float32', always_2d=True, frames=frames, start=start)",
                            "Call"
                        ],
                        [
                            "waveform.T",
                            "Attribute"
                        ],
                        [
                            "convert_to_mono(waveform, sample_rate)",
                            "Call"
                        ],
                        [
                            "waveform * 2 ** 15",
                            "BinOp"
                        ],
                        [
                            "waveform.squeeze(axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(waveform)",
                            "Call"
                        ],
                        [
                            "get_waveform(path_or_fp, normalization=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "waveform",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "waveform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf.read(path_or_fp, dtype='float32', always_2d=True, frames=frames, start=start)",
                            "Call"
                        ],
                        [
                            "waveform.T",
                            "Attribute"
                        ],
                        [
                            "convert_to_mono(waveform, sample_rate)",
                            "Call"
                        ],
                        [
                            "waveform * 2 ** 15",
                            "BinOp"
                        ],
                        [
                            "waveform.squeeze(axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(waveform)",
                            "Call"
                        ],
                        [
                            "get_waveform(path_or_fp, normalization=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/data/audio/hubert_dataset.py": {
        "torch": {
            "from_numpy_179": {
                "variable": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf.read(wav_path)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wav).float()",
                            "Call"
                        ],
                        [
                            "self.postprocess(wav, cur_sample_rate)",
                            "Call"
                        ],
                        [
                            "self.get_audio(index)",
                            "Call"
                        ],
                        [
                            "wav.mean(-1)",
                            "Call"
                        ],
                        [
                            "F.layer_norm(wav, wav.shape)",
                            "Call"
                        ],
                        [
                            "wav",
                            "Method Argument"
                        ],
                        [
                            "wav",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "layer_norm_357": {
                "variable": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf.read(wav_path)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wav).float()",
                            "Call"
                        ],
                        [
                            "self.postprocess(wav, cur_sample_rate)",
                            "Call"
                        ],
                        [
                            "self.get_audio(index)",
                            "Call"
                        ],
                        [
                            "wav.mean(-1)",
                            "Call"
                        ],
                        [
                            "F.layer_norm(wav, wav.shape)",
                            "Call"
                        ],
                        [
                            "wav",
                            "Method Argument"
                        ],
                        [
                            "wav",
                            "Method Argument"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "wav.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "collated_audios[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[audio, audio.new_full((-diff,), 0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/audio/raw_audio_dataset.py": {
        "torch": {
            "from_numpy_317": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf.read(path_or_fp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "sf.read(fname)",
                            "Call"
                        ],
                        [
                            "wav",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_384": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf.read(path_or_fp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "sf.read(fname)",
                            "Call"
                        ],
                        [
                            "wav",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "mask_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "compute_mask_indices((B, T), padding_mask, self.mask_compute_kwargs['mask_prob'], self.mask_compute_kwargs['mask_length'], self.mask_compute_kwargs['mask_selection'], self.mask_compute_kwargs['mask_other'], min_masks=2, no_overlap=self.mask_compute_kwargs['no_mask_overlap'], min_space=self.mask_compute_kwargs['mask_min_space'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_indices)",
                            "Call"
                        ],
                        [
                            "self._compute_mask_indices((B, T, self._C), padding_mask_reshaped)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "mask_channel_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_channel_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "compute_mask_indices((B, C), None, self.mask_compute_kwargs['mask_channel_prob'], self.mask_compute_kwargs['mask_channel_length'], self.mask_compute_kwargs['mask_channel_selection'], self.mask_compute_kwargs['mask_channel_other'], no_overlap=self.mask_compute_kwargs['no_mask_channel_overlap'], min_space=self.mask_compute_kwargs['mask_channel_min_space'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_channel_indices).unsqueeze(1).expand(-1, T, -1)",
                            "Call"
                        ],
                        [
                            "self._compute_mask_indices((B, T, self._C), padding_mask_reshaped)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "mask_channel_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_123": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, num_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "layer_norm_75": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.mean(-1)",
                            "Call"
                        ],
                        [
                            "F.layer_norm(feats, feats.shape)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wav).float()",
                            "Call"
                        ],
                        [
                            "self.postprocess(feats, curr_sample_rate)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wav).float()",
                            "Call"
                        ],
                        [
                            "self.postprocess(feats, curr_sample_rate)",
                            "Call"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "feats.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "collated_sources[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source, source.new_full((-diff,), 0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/audio/speech_to_text_dataset.py": {
        "torch": {
            "from_numpy_285": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_features_or_waveform(self.audio_paths[index], need_waveform=self.data_cfg.use_audio_input)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(source).float()",
                            "Call"
                        ],
                        [
                            "self.feature_transforms(source)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_305": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[i for (i, _, _) in samples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "variable": {
                    "value": "n_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[s.size(0) for (_, s, _) in samples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "target_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[t.size(0) for (_, _, t) in samples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_327": {
                "variable": {
                    "value": "target_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_frames.sort(descending=True)",
                            "Call"
                        ],
                        [
                            "[np.random.permutation(len(self))]",
                            "List"
                        ],
                        [
                            "[np.arange(len(self))]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_296": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.LongTensor([lang_tag_idx]), target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/backtranslation_dataset.py": {
        "torch": {
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/base_wrapper_dataset.py": {
        "torch": {}
    },
    "fairseq/data/bucket_pad_length_dataset.py": {
        "torch": {
            "pad_57": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_tensor(item)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(num_pad if self.left_pad else 0, 0 if self.left_pad else num_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.pad_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/colorize_dataset.py": {
        "torch": {
            "tensor_21": {
                "variable": {
                    "value": "base_collate[net_input][colors]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "list((self.color_getter(self.dataset, s['id']) for s in samples))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/concat_dataset.py": {
        "torch": {}
    },
    "fairseq/data/concat_sentences_dataset.py": {
        "torch": {
            "cat_20": {
                "tensors": {
                    "value": "[ds[index] for ds in self.datasets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/data_utils.py": {
        "torch": {
            "arange_534": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lens).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_533": {
                "input": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.fromiter((e - s if e - s >= length + min_space else 0 for (s, e) in parts), np.int)",
                            "Call"
                        ],
                        [
                            "lens",
                            "Method Argument"
                        ],
                        [
                            "lens",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/data/denoising_dataset.py": {
        "torch": {
            "arange_230": {
                "variable": {
                    "value": "ordering",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sentence_ends.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_299": {
                "variable": {
                    "value": "to_keep",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_366": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tokens[0:1], tokens[offset:-1], tokens[1:offset], tokens[-1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_380": {
                "variable": {
                    "value": "noise_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_tokens + n,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_386": {
                "variable": {
                    "value": "result[noise_indices[:num_random]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_random,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Categorical_172": {
                "variable": {
                    "value": "self.mask_span_distribution",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "ps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(ps)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_245": {
                "variable": {
                    "value": "is_word_start",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_261": {
                "variable": {
                    "value": "cum_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_span_distribution.sample(sample_shape=(num_to_mask,))",
                            "Call"
                        ],
                        [
                            "torch.ones((num_to_mask,)).long()",
                            "Call"
                        ],
                        [
                            "torch.cat([lengths, self.mask_span_distribution.sample(sample_shape=(num_to_mask,))], dim=0)",
                            "Call"
                        ],
                        [
                            "lengths[:num_to_mask]",
                            "Subscript"
                        ],
                        [
                            "lengths[lengths > 0]",
                            "Subscript"
                        ],
                        [
                            "lengths - is_word_start[indices + 1].long()",
                            "BinOp"
                        ],
                        [
                            "lengths[uncompleted]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_289": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_to_mask,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_308": {
                "variable": {
                    "value": "source[indices[mask_random]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(mask_random.sum(),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randperm_229": {
                "n": {
                    "value": "num_sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sentence_ends.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_231": {
                "n": {
                    "value": "num_to_permute",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.ceil(num_sentences * 2 * p / 2.0)",
                            "Call"
                        ],
                        [
                            "math.ceil(num_words * 2 * p / 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_263": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lengths, self.mask_span_distribution.sample(sample_shape=(num_to_mask,))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_270": {
                "variable": {
                    "value": "cum_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_span_distribution.sample(sample_shape=(num_to_mask,))",
                            "Call"
                        ],
                        [
                            "torch.ones((num_to_mask,)).long()",
                            "Call"
                        ],
                        [
                            "torch.cat([lengths, self.mask_span_distribution.sample(sample_shape=(num_to_mask,))], dim=0)",
                            "Call"
                        ],
                        [
                            "lengths[:num_to_mask]",
                            "Subscript"
                        ],
                        [
                            "lengths[lengths > 0]",
                            "Subscript"
                        ],
                        [
                            "lengths - is_word_start[indices + 1].long()",
                            "BinOp"
                        ],
                        [
                            "lengths[uncompleted]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_329": {
                "variable": {
                    "value": "source[indices[mask_random]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(mask_random.sum(),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_344": {
                "variable": {
                    "value": "source[indices[mask_random]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(mask_random.sum(),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randperm_360": {
                "n": {
                    "value": "num_words - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_361": {
                "n": {
                    "value": "num_to_permute",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.ceil(num_sentences * 2 * p / 2.0)",
                            "Call"
                        ],
                        [
                            "math.ceil(num_words * 2 * p / 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_379": {
                "n": {
                    "value": "num_tokens + n - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_293": {
                "n": {
                    "value": "word_starts.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/dictionary.py": {
        "torch": {
            "Tensor_299": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_82": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/data/encoders/utils.py": {
        "torch": {}
    },
    "fairseq/data/fairseq_dataset.py": {
        "torch": {}
    },
    "fairseq/data/fasta_dataset.py": {
        "torch": {}
    },
    "fairseq/data/id_dataset.py": {
        "torch": {
            "tensor_19": {
                "data": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/data/indexed_dataset.py": {
        "torch": {
            "from_numpy_183": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(n, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty(tensor_size, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.cache[ptx:ptx + size]",
                            "Subscript"
                        ],
                        [
                            "np.empty(tensor_size, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_249": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(n, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty(tensor_size, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.cache[ptx:ptx + size]",
                            "Subscript"
                        ],
                        [
                            "np.empty(tensor_size, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_518": {
                "ndarray": {
                    "value": "np_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.frombuffer(self._bin_buffer, dtype=self._index.dtype, count=size, offset=ptr)",
                            "Call"
                        ],
                        [
                            "np_array.astype(np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(tensor.numpy(), dtype=self._dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/data/iterators.py": {
        "torch": {
            "DataLoader_210": {
                "variable": {
                    "value": "itr",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.max_sentences",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "timeout": {
                    "value": "self.timeout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self.dataset, 'worker_init_fn', None)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_468": {
                "variable": {
                    "value": "itr",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "batches[offset:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.frozen_batches",
                            "Attribute"
                        ],
                        [
                            "shuffle_batches(list(batches), self.seed + epoch)",
                            "Call"
                        ],
                        [
                            "list(ShardedIterator(batches, self.num_shards, self.shard_id, fill_value=[]))",
                            "Call"
                        ],
                        [
                            "shuffle_batches(list(self.frozen_batches), self.seed + epoch)",
                            "Call"
                        ],
                        [
                            "self.frozen_batches",
                            "Attribute"
                        ],
                        [
                            "shuffle_batches(batches, self.seed + epoch + self.shard_id)",
                            "Call"
                        ],
                        [
                            "list(ShardedIterator(batches, self.num_shards, self.shard_id, fill_value=[]))",
                            "Call"
                        ],
                        [
                            "batches",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "timeout": {
                    "value": "self.timeout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_564": {
                "device": {
                    "value": "self.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_597": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_597": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/language_pair_dataset.py": {
        "torch": {
            "unique_61": {
                "variable": {
                    "value": "(_, align_tgt_i, align_tgt_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "align_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alignments[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_92": {
                "variable": {
                    "value": "tgt_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sort_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_lengths.sort(descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(sort_order), 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "constraints",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(samples), max(lens))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[alignment + offset for (align_idx, offset, src_len, tgt_len) in zip(sort_order, offsets, src_lengths, tgt_lengths) for alignment in [samples[align_idx]['alignment'].view(-1, 2)] if check_alignment(alignment, src_len, tgt_len)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(alignments, dim=0)",
                            "Call"
                        ],
                        [
                            "alignments",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_130": {
                "start": {
                    "value": "len(sort_order)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "tgt_item",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.tgt[index], torch.LongTensor([eos])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "tgt_item",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor([bos]), self.tgt[index]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "src_item",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor([bos]), self.src[index]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/legacy/block_pair_dataset.py": {
        "torch": {
            "cat_284": {
                "variable": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dataset[idx] for idx in range(start_ds_idx, end_ds_idx + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/legacy/masked_lm_dataset.py": {
        "torch": {}
    },
    "fairseq/data/lm_context_window_dataset.py": {
        "torch": {
            "from_numpy_77": {
                "variable": {
                    "value": "sample[net_input][src_tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_toks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([bsz, tsz + self.context_window], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "sample[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full([bsz, tsz + self.context_window], pad, dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/data/mask_tokens_dataset.py": {
        "torch": {
            "from_numpy_220": {
                "ndarray": {
                    "value": "new_item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full(len(mask), self.pad_idx)",
                            "Call"
                        ],
                        [
                            "np.copy(item)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_179": {
                "ndarray": {
                    "value": "new_item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full(len(mask), self.pad_idx)",
                            "Call"
                        ],
                        [
                            "np.copy(item)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_178": {
                "ndarray": {
                    "value": "mask.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/monolingual_dataset.py": {
        "torch": {
            "cat_175": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source.new([self.vocab.bos()]), source]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source, source.new([self.vocab.eos()])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target.new([self.tgt_vocab.bos()]), target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "future_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[future_target, future_target.new([self.vocab.pad()])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "past_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[past_target.new([self.vocab.pad()]), past_target[1:], source[-2, None]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/multilingual/multilingual_utils.py": {
        "torch": {}
    },
    "fairseq/data/multilingual/sampled_multi_dataset.py": {
        "torch": {
            "is_initialized_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "Method Argument"
                        ],
                        [
                            "tensors",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/nested_dictionary_dataset.py": {
        "torch": {}
    },
    "fairseq/data/noising.py": {
        "torch": {
            "t_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "t_313": {
                "variable": {
                    "value": "src_tokens_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.src_dataset[index]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_320": {
                "variable": {
                    "value": "noisy_src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noisy_src_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_shuffle.noising(x=x, lengths=lengths, max_shuffle_distance=self.max_word_shuffle_distance)",
                            "Call"
                        ],
                        [
                            "self.word_dropout.noising(x=noisy_src_tokens, lengths=noisy_src_lengths, dropout_prob=self.word_dropout_prob)",
                            "Call"
                        ],
                        [
                            "self.word_dropout.noising(x=noisy_src_tokens, lengths=noisy_src_lengths, dropout_prob=self.word_blanking_prob, blank_idx=self.dictionary.unk())",
                            "Call"
                        ],
                        [
                            "self.noiser.noising(src_tokens_t, src_lengths)",
                            "Call"
                        ],
                        [
                            "torch.t(noisy_src_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_194": {
                "ndarray": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.argsort()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/data/numel_dataset.py": {
        "torch": {
            "is_tensor_19": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dataset[index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "numel_20": {
                "input": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dataset[index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_31": {
                "data": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/data/prepend_dataset.py": {
        "torch": {}
    },
    "fairseq/data/prepend_token_dataset.py": {
        "torch": {
            "cat_24": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item.new([self.token]), item]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/raw_label_dataset.py": {
        "torch": {
            "tensor_23": {
                "data": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/data/roll_dataset.py": {
        "torch": {
            "roll_18": {
                "input": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dataset[index]",
                            "Subscript"
                        ]
                    ]
                },
                "shifts": {
                    "value": "self.shifts",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/token_block_dataset.py": {
        "torch": {
            "cat_159": {
                "variable": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dataset[idx] for idx in range(start_ds_idx, end_ds_idx + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "is_tensor_100": {
                "obj": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sizes",
                            "Call"
                        ],
                        [
                            "np.array(sizes, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "sizes.numpy()",
                            "Call"
                        ],
                        [
                            "sizes.astype(np.int64)",
                            "Call"
                        ],
                        [
                            "sizes",
                            "Method Argument"
                        ],
                        [
                            "sizes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_172": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item.new([self.eos]), buffer[0:e - 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "past_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item.new([self.pad, self.eos]), buffer[0:e - 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "past_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item.new([self.eos]), buffer[0:e - 2]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/transform_eos_dataset.py": {
        "torch": {
            "cat_82": {
                "variable": {
                    "value": "item[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item['source'], self.eos]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "item[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item['target'], self.eos]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/transform_eos_lang_pair_dataset.py": {
        "torch": {
            "arange_66": {
                "start": {
                    "value": "eos_idx.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/dataclass/configs.py": {
        "torch": {
            "device_count_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/distributed/distributed_timeout_wrapper.py": {
        "torch": {}
    },
    "fairseq/distributed/fully_sharded_data_parallel.py": {
        "torch": {
            "device_104": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/distributed/legacy_distributed_data_parallel.py": {
        "torch": {
            "zeros_like_105": {
                "variable": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[0]",
                            "Subscript"
                        ],
                        [
                            "params",
                            "variable"
                        ],
                        [
                            "params",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_like_138": {
                "variable": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.module.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/distributed/module_proxy_wrapper.py": {
        "torch": {}
    },
    "fairseq/distributed/tpu_distributed_data_parallel.py": {
        "torch": {
            "zeros_like_29": {
                "variable": {
                    "value": "p.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.parameters()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/distributed/utils.py": {
        "torch": {
            "device_count_184": {
                "variable": {
                    "value": "gpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_210": {
                "variable": {
                    "value": "gpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_532": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tensor]",
                            "List"
                        ],
                        [
                            "tensors[i]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros([meta['size'].numel()], dtype=meta['dtype'], device=dist_device)",
                            "Call"
                        ],
                        [
                            "tensor.view(meta['size']).to(meta['device'])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_663": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.view(-1) for t in data.values()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "split_665": {
                "variable": {
                    "value": "split_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([t.view(-1) for t in data.values()]).to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[t.numel() for t in data.values()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_767": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_gather_list._buffer",
                            "Attribute"
                        ],
                        [
                            "buffer.cpu()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "torch.ByteTensor(buffer.getbuffer()).to(dist_device)",
                            "Call"
                        ],
                        [
                            "torch.ByteTensor(int(length.item())).to(dist_device)",
                            "Call"
                        ],
                        [
                            "io.BytesIO(buffer.cpu().numpy())",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_tensor_777": {
                "obj": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_split_tensors_from_obj(obj, tensors)",
                            "Call"
                        ],
                        [
                            "_broadcast_object_slow(obj, src_rank, group, dist_device)",
                            "Call"
                        ],
                        [
                            "_broadcast_object_slow(None, src_rank, group, dist_device)",
                            "Call"
                        ],
                        [
                            "torch.load(buffer, map_location='cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_231": {
                "device": {
                    "value": "cfg.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_318": {
                "device": {
                    "value": "cfg.distributed_training.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_initialized_413": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_444": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_514": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tensor]",
                            "List"
                        ],
                        [
                            "tensors[i]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros([meta['size'].numel()], dtype=meta['dtype'], device=dist_device)",
                            "Call"
                        ],
                        [
                            "tensor.view(meta['size']).to(meta['device'])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "src": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group in enumerate(grouped_ranks)",
                            "Call"
                        ],
                        [
                            "get_global_group()",
                            "Call"
                        ],
                        [
                            "group",
                            "Method Argument"
                        ],
                        [
                            "group",
                            "Method Argument"
                        ],
                        [
                            "group",
                            "Method Argument"
                        ],
                        [
                            "group",
                            "Method Argument"
                        ],
                        [
                            "group",
                            "Method Argument"
                        ],
                        [
                            "group",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "group",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_654": {
                "variable": {
                    "value": "cpu_data[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[k]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_694": {
                "variable": {
                    "value": "dist_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_696": {
                "variable": {
                    "value": "dist_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_714": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[meta['size'].numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "meta['dtype']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "meta in enumerate(metadata)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "dist_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_732": {
                "variable": {
                    "value": "dist_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_734": {
                "variable": {
                    "value": "dist_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_755": {
                "obj": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_split_tensors_from_obj(obj, tensors)",
                            "Call"
                        ],
                        [
                            "_broadcast_object_slow(obj, src_rank, group, dist_device)",
                            "Call"
                        ],
                        [
                            "_broadcast_object_slow(None, src_rank, group, dist_device)",
                            "Call"
                        ],
                        [
                            "torch.load(buffer, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_gather_list._buffer",
                            "Attribute"
                        ],
                        [
                            "buffer.cpu()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "torch.ByteTensor(buffer.getbuffer()).to(dist_device)",
                            "Call"
                        ],
                        [
                            "torch.ByteTensor(int(length.item())).to(dist_device)",
                            "Call"
                        ],
                        [
                            "io.BytesIO(buffer.cpu().numpy())",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_107": {
                "variable": {
                    "value": "gpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_555": {
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tensor if i == rank else torch.empty_like(tensor) for i in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_653": {
                "obj": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[k]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "empty_like_551": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tensor]",
                            "List"
                        ],
                        [
                            "tensors[i]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros([meta['size'].numel()], dtype=meta['dtype'], device=dist_device)",
                            "Call"
                        ],
                        [
                            "tensor.view(meta['size']).to(meta['device'])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_274": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/file_utils.py": {
        "torch": {}
    },
    "fairseq/hub_utils.py": {
        "torch": {
            "ModuleList_95": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_utils.load_model_ensemble_and_task([os.path.join(model_path, cpt) for cpt in checkpoint_file.split(os.pathsep)], arg_overrides=kwargs)",
                            "Call"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_115": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_157": {
                "obj": {
                    "value": "tokenized_sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.encode(sentence) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[self.encode(sentence) for sentence in sentences]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/incremental_decoding_utils.py": {
        "torch": {}
    },
    "fairseq/iterative_refinement_generator.py": {
        "torch": {
            "arange_157": {
                "variable": {
                    "value": "sent_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.size()",
                            "Call"
                        ],
                        [
                            "bsz * self.beam_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, x.new_zeros(b, l_x - l_y).fill_(self.pad)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, s.new_zeros(b, l_x - l_y)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a, a.new_zeros(b, l_x - l_y, a.size(2))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y.new_zeros(b, l_y - l_x).fill_(self.pad)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/logging/meters.py": {
        "torch": {
            "is_tensor_16": {
                "obj": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_59": {
                "obj": {
                    "value": "number",
                    "type": "variable",
                    "possible_values": [
                        [
                            "number",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/logging/progress_bar.py": {
        "torch": {
            "SummaryWriter_348": {
                "variable": {
                    "value": "_writers[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(self.tensorboard_logdir, key)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_115": {
                "obj": {
                    "value": "stat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{:g}'.format(stat)",
                            "Call"
                        ],
                        [
                            "'{:.3f}'.format(stat.avg)",
                            "Call"
                        ],
                        [
                            "'{:g}'.format(round(stat.avg))",
                            "Call"
                        ],
                        [
                            "'{:g}'.format(round(stat.sum))",
                            "Call"
                        ],
                        [
                            "stat.tolist()",
                            "Call"
                        ],
                        [
                            "stat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_381": {
                "obj": {
                    "value": "stats[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/model_parallel/models/pipeline_parallel_transformer/layers.py": {
        "torch": {
            "Embedding_589": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_tokens[0].padding_idx if isinstance(embed_tokens, nn.ModuleList) else embed_tokens.padding_idx",
                            "IfExp"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_596": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_372": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_379": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_381": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_522": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_551": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_553": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_embed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_544": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask, incremental_state=incremental_state, need_weights=False, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_568": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_572": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(self._future_mask.resize_(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_241": {
                "variable": {
                    "value": "self.embed_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), self.output_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_197": {
                "tensors": {
                    "value": "x_embed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_292": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_tokens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_290": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_284": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features[:, :, sidx:eidx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "emb.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_286": {
                "input": {
                    "value": "features[:, :, sidx:eidx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "emb.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/model_parallel/models/pipeline_parallel_transformer/model.py": {
        "torch": {
            "zeros_528": {
                "variable": {
                    "value": "dummy_prev_output_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src_tokens.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Pipe_101": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "partition_model(nn.Sequential(*module_list), balance, devices)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chunks",
                            "Method Argument"
                        ]
                    ]
                },
                "checkpoint": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Pipe_107": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Sequential(*module_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "balance": {
                    "value": "balance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "balance",
                            "Method Argument"
                        ]
                    ]
                },
                "devices": {
                    "value": "devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chunks",
                            "Method Argument"
                        ]
                    ]
                },
                "checkpoint": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_474": {
                "variable": {
                    "value": "self.encoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[TransformerEncoderLayer(args) for i in range(args.encoder_layers)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_617": {
                "variable": {
                    "value": "self.decoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[TransformerDecoderLayer(args, no_encoder_attn) for _ in range(args.decoder_layers)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "triu_715": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_253": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Pipe_492": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "partition_model(nn.Sequential(*encoder_module_list), encoder_balance, encoder_devices)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "args.pipeline_chunks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "args.pipeline_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Pipe_498": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Sequential(*encoder_module_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "balance": {
                    "value": "encoder_balance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.eval_str_list(args.pipeline_encoder_balance, type=int)",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "encoder_devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.eval_str_list(args.pipeline_encoder_devices, type=int)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "args.pipeline_chunks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "args.pipeline_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Pipe_636": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "partition_model(nn.Sequential(*decoder_module_list), decoder_balance, decoder_devices)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "args.pipeline_chunks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "args.pipeline_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Pipe_642": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Sequential(*decoder_module_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "balance": {
                    "value": "decoder_balance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.eval_str_list(args.pipeline_decoder_balance, type=int)",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "decoder_devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.eval_str_list(args.pipeline_decoder_devices, type=int)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "args.pipeline_chunks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "args.pipeline_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "linear_692": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_694": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorPipeRpcBackendOptions_65": {
                "init_method": {
                    "value": "'file://{}'.format(tmpfile.name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_499": {
                "*args": {
                    "value": "*encoder_module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_643": {
                "*args": {
                    "value": "*decoder_module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Tensor_747": {},
            "Sequential_493": {
                "*args": {
                    "value": "*encoder_module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_637": {
                "*args": {
                    "value": "*decoder_module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/model_parallel/models/roberta/model.py": {
        "torch": {
            "ModuleDict_46": {
                "variable": {
                    "value": "self.classification_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(src_tokens, features_only, return_all_hiddens, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.classification_heads[classification_head_name](x)",
                            "Call"
                        ],
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "copy_to_model_parallel_region(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.weight)",
                            "Call"
                        ],
                        [
                            "gather_from_model_parallel_region(x).contiguous()",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_162": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pooler_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooler_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_133": {
                "*size": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_131": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/model_parallel/models/transformer.py": {
        "torch": {}
    },
    "fairseq/model_parallel/models/transformer_lm.py": {
        "torch": {}
    },
    "fairseq/model_parallel/modules/multihead_attention.py": {
        "torch": {
            "bmm_233": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * self.num_heads_partition, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "self.q_proj(query)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_270": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_module(attn_weights)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_proj(query)",
                            "Call"
                        ],
                        [
                            "self.v_proj(key)",
                            "Call"
                        ],
                        [
                            "self.v_proj(value)",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, bsz * self.num_heads_partition, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "prev_value",
                            "variable"
                        ],
                        [
                            "torch.cat([prev_value, v], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_297": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask.float(), key_padding_mask.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_value, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "src_len - prev_key_padding_mask.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask.float(), filler.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_312": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "src_len - key_padding_mask.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[filler.float(), key_padding_mask.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/bart/hub_interface.py": {
        "torch": {
            "log_softmax_171": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.classification_heads[head](sentence_representation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/bart/model.py": {
        "torch": {
            "ModuleDict_46": {
                "variable": {
                    "value": "self.classification_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_299": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pooler_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooler_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_300": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_249": {
                "variable": {
                    "value": "new_lang_embed_to_add",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_langids_to_add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.encoder.dictionary) - loaded_dict_size",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict['encoder.embed_tokens.weight'].size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_255": {
                "variable": {
                    "value": "state_dict[encoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state_dict['encoder.embed_tokens.weight'][:loaded_dict_size - 1, :], new_lang_embed_to_add, loaded_mask_token_embedding.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "state_dict[decoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state_dict['decoder.embed_tokens.weight'][:loaded_dict_size - 1, :], new_lang_embed_to_add, loaded_mask_token_embedding.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "spectral_norm_303": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/distributed_fairseq_model.py": {
        "torch": {
            "DistributedDataParallel_58": {
                "variable": {
                    "value": "wrapped_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[args.device_id]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "args.broadcast_buffers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bucket_cap_mb": {
                    "value": "args.bucket_cap_mb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "process_group": {
                    "value": "process_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "process_group",
                            "Method Argument"
                        ]
                    ]
                },
                "find_unused_parameters": {
                    "value": "args.find_unused_parameters",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/fairseq_decoder.py": {
        "torch": {}
    },
    "fairseq/models/fairseq_encoder.py": {
        "torch": {}
    },
    "fairseq/models/fairseq_incremental_decoder.py": {
        "torch": {}
    },
    "fairseq/models/fairseq_model.py": {
        "torch": {
            "ModuleDict_377": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{key: FairseqEncoderDecoderModel(encoders[key], decoders[key]) for key in self.keys}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "is_tensor_559": {
                "obj": {
                    "value": "encoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(src_tokens, src_lengths=src_lengths, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.encoder(src_tokens, src_lengths=src_lengths, **kwargs)",
                            "Call"
                        ],
                        [
                            "net_output['encoder_out']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_tensor_84": {
                "obj": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output",
                            "Method Argument"
                        ],
                        [
                            "net_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "remove_weight_norm_186": {
                "module": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_562": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "encoder_out.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_564": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "encoder_out.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_89": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "encoder_out.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "encoder_out.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/fconv.py": {
        "torch": {
            "Embedding_658": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_673": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_191": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_192": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_352": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(sz[0] * sz[1], sz[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_435": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_436": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_437": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_676": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)",
                            "Call"
                        ],
                        [
                            "LearnedPositionalEmbedding(num_embeddings, embedding_dim, padding_idx)",
                            "Call"
                        ],
                        [
                            "nn.Linear(in_features, out_features)",
                            "Call"
                        ],
                        [
                            "LinearizedConvolution(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "ConvTBC(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_685": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)",
                            "Call"
                        ],
                        [
                            "LearnedPositionalEmbedding(num_embeddings, embedding_dim, padding_idx)",
                            "Call"
                        ],
                        [
                            "nn.Linear(in_features, out_features)",
                            "Call"
                        ],
                        [
                            "LinearizedConvolution(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "ConvTBC(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_696": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)",
                            "Call"
                        ],
                        [
                            "LearnedPositionalEmbedding(num_embeddings, embedding_dim, padding_idx)",
                            "Call"
                        ],
                        [
                            "nn.Linear(in_features, out_features)",
                            "Call"
                        ],
                        [
                            "LinearizedConvolution(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "ConvTBC(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "glu_281": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "attention(x, target_embedding, (encoder_a, encoder_b), encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "glu_537": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "attention(x, target_embedding, (encoder_a, encoder_b), encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_279": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "attention(x, target_embedding, (encoder_a, encoder_b), encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, padding_l, padding_r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_485": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "weight_norm_597": {
                "variable": {
                    "value": "self.convolutions[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.projections, self.convolutions, self.residuals)",
                            "Call"
                        ],
                        [
                            "zip(self.projections, self.convolutions, self.attention, self.residuals)",
                            "Call"
                        ],
                        [
                            "conv in enumerate(self.convolutions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "remove_weight_norm_596": {
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.projections, self.convolutions, self.residuals)",
                            "Call"
                        ],
                        [
                            "zip(self.projections, self.convolutions, self.attention, self.residuals)",
                            "Call"
                        ],
                        [
                            "conv in enumerate(self.convolutions)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_592": {}
        }
    },
    "fairseq/models/fconv_self_att.py": {
        "torch": {
            "Embedding_594": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_607": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_211": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_212": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_213": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_214": {
                "variable": {
                    "value": "self.attproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_371": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_372": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_373": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_374": {
                "variable": {
                    "value": "self.selfattention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_375": {
                "variable": {
                    "value": "self.attproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_262": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "attention(attproj(x) + target_embedding, encoder_a, encoder_b)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(query, key, value, mask_future_timesteps=True, use_scalar_bias=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, padding_l, padding_r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "glu_264": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "attention(attproj(x) + target_embedding, encoder_a, encoder_b)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(query, key, value, mask_future_timesteps=True, use_scalar_bias=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_430": {
                "variable": {
                    "value": "self.gate1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(out_embed_dim * 2, out_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_433": {
                "variable": {
                    "value": "self.gate2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(out_embed_dim * 2, out_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_437": {
                "variable": {
                    "value": "self.joining",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(out_embed_dim * 2, out_embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "glu_493": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "attention(attproj(x) + target_embedding, encoder_a, encoder_b)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(query, key, value, mask_future_timesteps=True, use_scalar_bias=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_527": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, self.pretrained_outputs['out']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_532": {
                "variable": {
                    "value": "fusion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gated_x1, gated_x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sigmoid_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GLU_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GLU_443": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/hubert/hubert.py": {
        "torch": {
            "Dropout_265": {
                "variable": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_266": {
                "variable": {
                    "value": "self.dropout_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.dropout_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_277": {
                "variable": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(cfg.encoder_embed_dim).uniform_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_366": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos, negs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_368": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "targets.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_286": {
                "variable": {
                    "value": "self.target_glu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(final_dim, final_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.final_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "final_dim * len(dictionaries)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "variable": {
                    "value": "self.final_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "final_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0, metadata={'help': 'project final representations and targets to this many dimensions. set to encoder_embed_dim is <= 0'})",
                            "Call"
                        ],
                        [
                            "cfg.final_dim if cfg.final_dim > 0 else cfg.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Parameter_305": {
                "variable": {
                    "value": "self.label_embs_concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(sum(self.num_classes), final_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_337": {
                "variable": {
                    "value": "mask_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_mask_indices((B, T), padding_mask, self.mask_prob, self.mask_length, self.mask_selection, self.mask_other, min_masks=2, no_overlap=self.no_mask_overlap, min_space=self.mask_min_space)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_indices).to(x.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.apply_mask(features, padding_mask, target_list)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "from_numpy_354": {
                "variable": {
                    "value": "mask_channel_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_channel_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_mask_indices((B, C), None, self.mask_channel_prob, self.mask_channel_length, self.mask_channel_selection, self.mask_channel_other, no_overlap=self.no_mask_channel_overlap, min_space=self.mask_channel_min_space)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_channel_indices).to(x.device).unsqueeze(1).expand(-1, T, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_354": {
                "variable": {
                    "value": "mask_channel_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_465": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_embs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_478": {
                "variable": {
                    "value": "masked_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~padding_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "mask_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_mask_indices((B, T), padding_mask, self.mask_prob, self.mask_length, self.mask_selection, self.mask_other, min_masks=2, no_overlap=self.no_mask_overlap, min_space=self.mask_min_space)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_indices).to(x.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.apply_mask(features, padding_mask, target_list)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "logical_and_494": {
                "variable": {
                    "value": "nomask_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~padding_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "~mask_indices",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_246": {
                "in_features": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_396": {
                "start": {
                    "value": "feat_tsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.size(2)",
                            "Call"
                        ],
                        [
                            "int(targ_tsz / self.feat2tar_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_287": {
                "in_features": {
                    "value": "final_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0, metadata={'help': 'project final representations and targets to this many dimensions. set to encoder_embed_dim is <= 0'})",
                            "Call"
                        ],
                        [
                            "cfg.final_dim if cfg.final_dim > 0 else cfg.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GLU_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/hubert/hubert_asr.py": {
        "torch": {
            "Embedding_365": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_372": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_301": {
                "variable": {
                    "value": "self.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/huggingface/hf_gpt2.py": {
        "torch": {
            "arange_112": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + prev_output_tokens.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/lightconv.py": {
        "torch": {
            "Embedding_891": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "embed_tokens.padding_idx",
                            "Attribute"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_898": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_344": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_474": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_673": {
                "variable": {
                    "value": "self.layer_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LayerNorm(self.embed_dim) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "relu_701": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_861": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_605": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_609": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(self._future_mask.resize_(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GLU_635": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GLU_743": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_503": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), output_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_586": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.input_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.input_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_588": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['encoder_padding_mask'] if encoder_out is not None else None, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.input_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.input_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_out, value=encoder_out, key_padding_mask=encoder_padding_mask, incremental_state=incremental_state, static_kv=True, need_weights=not self.training and self.need_attn)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/lstm.py": {
        "torch": {
            "Embedding_667": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(task.source_dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_674": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMCell_682": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_691": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_293": {
                "variable": {
                    "value": "packed_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "self.dropout_in_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs, padding_value=self.padding_idx * 1.0)",
                            "Call"
                        ],
                        [
                            "self.dropout_out_module(x)",
                            "Call"
                        ],
                        [
                            "self.input_proj(input)",
                            "Call"
                        ],
                        [
                            "(attn_scores.unsqueeze(2) * source_hids).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.output_proj(torch.cat((x, input), dim=1)))",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "self.dropout_in_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_out_module(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_lengths.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "enforce_sorted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_307": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(packed_x, (h0, c0))",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "self.padding_idx * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_374": {
                "variable": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source_hids * x.unsqueeze(0)).sum(dim=2)",
                            "Call"
                        ],
                        [
                            "attn_scores.float().masked_fill_(encoder_padding_mask, float('-inf')).type_as(attn_scores)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, dim=0)",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out, incremental_state)",
                            "Call"
                        ],
                        [
                            "x.new_zeros(srclen, seqlen, bsz) if self.attention is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attn_scores.transpose(0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_379": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_proj(torch.cat((x, input), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_435": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LSTMCell(input_size=input_feed_size + embed_dim if layer == 0 else hidden_size, hidden_size=hidden_size) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_580": {
                "variable": {
                    "value": "prev_hiddens_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_cached_state(incremental_state)",
                            "Call"
                        ],
                        [
                            "[encoder_hiddens[i] for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[zero_state for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[self.encoder_hidden_proj(y) for y in prev_hiddens]",
                            "ListComp"
                        ],
                        [
                            "[prev_hiddens_[i] for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "self.get_cached_state(incremental_state)",
                            "Call"
                        ],
                        [
                            "[p.index_select(0, new_order) for p in prev_hiddens]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_581": {
                "variable": {
                    "value": "prev_cells_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_cached_state(incremental_state)",
                            "Call"
                        ],
                        [
                            "[encoder_cells[i] for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[zero_state for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[self.encoder_cell_proj(y) for y in prev_cells]",
                            "ListComp"
                        ],
                        [
                            "[prev_cells_[j] for j in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "self.get_cached_state(incremental_state)",
                            "Call"
                        ],
                        [
                            "[p.index_select(0, new_order) for p in prev_cells]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "annotate_582": {
                "variable": {
                    "value": "cache_state",
                    "type": "variable",
                    "possible_values": []
                },
                "the_type": {
                    "value": "Dict[str, Optional[Tensor]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "{'prev_hiddens': prev_hiddens_tensor, 'prev_cells': prev_cells_tensor, 'input_feed': input_feed}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cat_593": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "annotate_647": {
                "variable": {
                    "value": "cached_state_new",
                    "type": "variable",
                    "possible_values": []
                },
                "the_type": {
                    "value": "Dict[str, Optional[Tensor]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "{'prev_hiddens': torch.stack(prev_hiddens), 'prev_cells': torch.stack(prev_cells), 'input_feed': input_feed}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "empty_497": {
                "variable": {
                    "value": "encoder_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_498": {
                "variable": {
                    "value": "encoder_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_499": {
                "variable": {
                    "value": "encoder_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_500": {
                "variable": {
                    "value": "encoder_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_545": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[j, :, :], input_feed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_613": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "self.dropout_in_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs, padding_value=self.padding_idx * 1.0)",
                            "Call"
                        ],
                        [
                            "self.dropout_out_module(x)",
                            "Call"
                        ],
                        [
                            "self.input_proj(input)",
                            "Call"
                        ],
                        [
                            "(attn_scores.unsqueeze(2) * source_hids).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.output_proj(torch.cat((x, input), dim=1)))",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "self.dropout_in_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_out_module(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_279": {
                "input": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.convert_padding_direction(src_tokens, torch.zeros_like(src_tokens).fill_(self.padding_idx), left_to_right=True)",
                            "Call"
                        ],
                        [
                            "src_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_379": {
                "tensors": {
                    "value": "(x, input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_650": {
                "tensors": {
                    "value": "prev_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_cached_state(incremental_state)",
                            "Call"
                        ],
                        [
                            "[encoder_hiddens[i] for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[zero_state for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[self.encoder_hidden_proj(y) for y in prev_hiddens]",
                            "ListComp"
                        ],
                        [
                            "[prev_hiddens_[i] for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "self.get_cached_state(incremental_state)",
                            "Call"
                        ],
                        [
                            "[p.index_select(0, new_order) for p in prev_hiddens]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_651": {
                "tensors": {
                    "value": "prev_cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_cached_state(incremental_state)",
                            "Call"
                        ],
                        [
                            "[encoder_cells[i] for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[zero_state for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[self.encoder_cell_proj(y) for y in prev_cells]",
                            "ListComp"
                        ],
                        [
                            "[prev_cells_[j] for j in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "self.get_cached_state(incremental_state)",
                            "Call"
                        ],
                        [
                            "[p.index_select(0, new_order) for p in prev_cells]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/models/masked_lm.py": {
        "torch": {
            "Linear_210": {
                "variable": {
                    "value": "self.masked_lm_pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "variable": {
                    "value": "self.lm_head_transform_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_223": {
                "variable": {
                    "value": "self.lm_output_learned_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_276": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_states[-1].transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x[masked_tokens, :]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(self.activation_fn(self.lm_head_transform_weight(x)))",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.sentence_encoder.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "self.embed_out(x)",
                            "Call"
                        ],
                        [
                            "x + self.lm_output_learned_bias",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.sentence_encoder.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_226": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.sentence_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.sentence_out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_223": {
                "*size": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/model_utils.py": {
        "torch": {
            "cat_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, torch.zeros(dims).to(x).fill_(padding_idx)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "x[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.size(0), trg_dim - x.size(1)]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/models/nat/fairseq_nat_model.py": {
        "torch": {
            "stack_34": {
                "tensors": {
                    "value": "[e['encoder_states'][i] for e in encoder_outs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_26": {
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[e[key][0] for e in encoder_outs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_77": {
                "input": {
                    "value": "torch.stack([a[i] for a in action_outs], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_83": {
                "tensors": {
                    "value": "[a[i] for a in action_outs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_78": {
                "tensors": {
                    "value": "[a[i] for a in action_outs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/nat/insertion_transformer.py": {
        "torch": {
            "cat_115": {
                "variable": {
                    "value": "out_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[in_tokens, word_ins_pred]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_115": {
                "variable": {
                    "value": "out_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "out_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(in_coords[:, 1:] - 0.5).masked_fill(word_ins_pred.eq(padding_idx), float('inf'))",
                            "Call"
                        ],
                        [
                            "torch.cat([in_coords, out_coords], 1).sort(-1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_116": {
                "variable": {
                    "value": "out_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[in_scores, word_ins_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_116": {
                "variable": {
                    "value": "out_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "out_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(in_coords[:, 1:] - 0.5).masked_fill(word_ins_pred.eq(padding_idx), float('inf'))",
                            "Call"
                        ],
                        [
                            "torch.cat([in_coords, out_coords], 1).sort(-1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_of_68": {
                "obj": {
                    "value": "in_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_93": {
                "data": {
                    "value": "list(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "in_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_114": {
                "tensors": {
                    "value": "[in_coords, out_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_114": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_228": {
                "tensors": {
                    "value": "[features[:, :-1, :], features[:, 1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_231": {
                "input": {
                    "value": "decoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(features)",
                            "Call"
                        ],
                        [
                            "decoder_out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/nat/iterative_nonautoregressive_transformer.py": {
        "torch": {
            "randint_14": {
                "variable": {
                    "value": "rand_words",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "s.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "s.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_15": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "s.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "s.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "word_ins_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_ins_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "word_ins_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_ins_tgts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "word_ins_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_ins_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_136": {
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "prev_output_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/nat/levenshtein_transformer.py": {
        "torch": {
            "cat_394": {
                "variable": {
                    "value": "features_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[:, :-1, :], features[:, 1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_395": {
                "variable": {
                    "value": "decoder_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features[:, :-1, :], features[:, 1:, :]], 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_mask_ins.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_423": {
                "variable": {
                    "value": "decoder_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.extract_features(prev_output_tokens, encoder_out=encoder_out, early_exit=self.early_exit[1], layers=self.layers_msk, **unused)",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out=encoder_out, early_exit=self.early_exit[2], layers=self.layers, **unused)",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out=encoder_out, early_exit=self.early_exit[0], layers=self.layers_del, **unused)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_word_del.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_99": {
                "variable": {
                    "value": "word_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(word_ins_out, -1).view(-1, word_ins_out.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_150": {
                "variable": {
                    "value": "max_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_out.output_tokens",
                            "Attribute"
                        ],
                        [
                            "_fill(output_tokens, can_del_word, _tokens, self.pad)",
                            "Call"
                        ],
                        [
                            "_fill(output_tokens, can_ins_mask, _tokens, self.pad)",
                            "Call"
                        ],
                        [
                            "_fill(output_tokens, can_ins_word, _tokens, self.pad)",
                            "Call"
                        ],
                        [
                            "output_tokens[:, :cut_off]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_197": {
                "variable": {
                    "value": "mask_ins_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_ins_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_ins_score.max(-1)[1]",
                            "Subscript"
                        ],
                        [
                            "torch.min(mask_ins_pred, max_lens[can_ins_mask, None].expand_as(mask_ins_pred))",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_291": {
                "variable": {
                    "value": "self.layers_msk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(args, no_encoder_attn) for _ in range(self.early_exit[1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_299": {
                "variable": {
                    "value": "self.layers_del",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(args, no_encoder_attn) for _ in range(self.early_exit[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_softmax_103": {
                "input": {
                    "value": "word_ins_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.forward_word_ins(normalize=False, prev_output_tokens=masked_tgt_tokens, encoder_out=encoder_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_103": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_397": {
                "input": {
                    "value": "decoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(features_cat, self.embed_mask_ins.weight)",
                            "Call"
                        ],
                        [
                            "self.output_layer(features)",
                            "Call"
                        ],
                        [
                            "F.linear(features, self.embed_word_del.weight)",
                            "Call"
                        ],
                        [
                            "decoder_out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_411": {
                "input": {
                    "value": "decoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(features_cat, self.embed_mask_ins.weight)",
                            "Call"
                        ],
                        [
                            "self.output_layer(features)",
                            "Call"
                        ],
                        [
                            "F.linear(features, self.embed_word_del.weight)",
                            "Call"
                        ],
                        [
                            "decoder_out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_425": {
                "input": {
                    "value": "decoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(features_cat, self.embed_mask_ins.weight)",
                            "Call"
                        ],
                        [
                            "self.output_layer(features)",
                            "Call"
                        ],
                        [
                            "F.linear(features, self.embed_word_del.weight)",
                            "Call"
                        ],
                        [
                            "decoder_out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "input": {
                    "value": "word_ins_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.forward_word_ins(normalize=False, prev_output_tokens=masked_tgt_tokens, encoder_out=encoder_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/nat/levenshtein_utils.py": {
        "torch": {
            "tensor_92": {
                "variable": {
                    "value": "masked_tgt_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masked_tgt_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "libnat.generate_insertion_labels(out_tokens.int(), libnat.levenshtein_distance(in_tokens.int(), out_tokens.int(), in_masks.sum(1).int(), out_masks.sum(1).int()))",
                            "Call"
                        ],
                        [
                            "masked_tgt_masks.bool() & out_masks",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(masked_tgt_masks, device=out_tokens.device).bool()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "out_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "mask_ins_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_ins_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "libnat.generate_insertion_labels(out_tokens.int(), libnat.levenshtein_distance(in_tokens.int(), out_tokens.int(), in_masks.sum(1).int(), out_masks.sum(1).int()))",
                            "Call"
                        ],
                        [
                            "mask_ins_targets.type_as(in_tokens)[:, 1:in_masks.size(1)].masked_fill_(~in_masks[:, 1:], 0)",
                            "Call"
                        ],
                        [
                            "[mask_input[1:-1] + [0 for _ in range(in_seq_len - 1 - len(mask_input[1:-1]))] for mask_input in mask_inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(mask_ins_targets, device=in_tokens.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "in_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "word_del_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "word_del_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "libnat.generate_deletion_labels(in_tokens.int(), libnat.levenshtein_distance(in_tokens.int(), out_tokens.int(), in_masks.sum(1).int(), out_masks.sum(1).int()))",
                            "Call"
                        ],
                        [
                            "word_del_targets.type_as(in_tokens).masked_fill_(~in_masks, 0)",
                            "Call"
                        ],
                        [
                            "[b[-1] for b in full_labels]",
                            "ListComp"
                        ],
                        [
                            "[labels + [0 for _ in range(out_seq_len - len(labels))] for labels in word_del_targets]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(word_del_targets, device=out_tokens.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "out_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x.new_zeros(*dims).fill_(padding_idx)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_of_127": {
                "obj": {
                    "value": "in_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ],
                        [
                            "in_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/models/nat/nonautoregressive_ensembles.py": {
        "torch": {
            "ModuleList_37": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models",
                            "Method Argument"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_201": {
                "variable": {
                    "value": "mask_ins_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_ins_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_ins_score_avg.max(-1)[1]",
                            "Subscript"
                        ],
                        [
                            "torch.min(mask_ins_pred, max_lens[can_ins_mask, None].expand_as(mask_ins_pred))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_152": {
                "variable": {
                    "value": "word_del_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_del_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.decoder.forward_word_del(_skip(output_tokens, can_del_word), _skip_encoder_out(model.encoder, encoder_out, can_del_word))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_193": {
                "variable": {
                    "value": "mask_ins_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_ins_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.decoder.forward_mask_ins(_skip(output_tokens, can_ins_mask), _skip_encoder_out(model.encoder, encoder_out, can_ins_mask))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_226": {
                "variable": {
                    "value": "word_ins_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_ins_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.decoder.forward_word_ins(_skip(output_tokens, can_ins_word), _skip_encoder_out(model.encoder, encoder_out, can_ins_word))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_155": {
                "input": {
                    "value": "torch.stack(word_del_score_avg, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_197": {
                "input": {
                    "value": "torch.stack(mask_ins_score_avg, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_229": {
                "input": {
                    "value": "torch.stack(word_ins_score_avg, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_156": {
                "tensors": {
                    "value": "word_del_score_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.logsumexp(torch.stack(word_del_score_avg, dim=0), dim=0) - math.log(len(self.models))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_160": {
                "tensors": {
                    "value": "word_del_attn_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(word_del_attn_avg, dim=0) / len(self.models)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_198": {
                "tensors": {
                    "value": "mask_ins_score_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.logsumexp(torch.stack(mask_ins_score_avg, dim=0), dim=0) - math.log(len(self.models))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_230": {
                "tensors": {
                    "value": "word_ins_score_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.logsumexp(torch.stack(word_ins_score_avg, dim=0), dim=0) - math.log(len(self.models))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_233": {
                "tensors": {
                    "value": "word_ins_attn_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(word_ins_attn_avg, dim=0) / len(self.models)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/nat/nonautoregressive_transformer.py": {
        "torch": {
            "round_39": {
                "variable": {
                    "value": "index_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.new_arange(trg_lens, max_trg_len).float()",
                            "Call"
                        ],
                        [
                            "steps[:, None] * index_t[None, :]",
                            "BinOp"
                        ],
                        [
                            "torch.round(index_t).long().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_244": {
                "variable": {
                    "value": "length_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_feats.mean(0)",
                            "Call"
                        ],
                        [
                            "(enc_feats / src_masks.sum(0)[None, :, None] * src_masks[:, :, None]).sum(0)",
                            "Call"
                        ],
                        [
                            "encoder_out['encoder_out'][0]",
                            "Subscript"
                        ],
                        [
                            "_mean_pooling(enc_feats, src_masks)",
                            "Call"
                        ],
                        [
                            "enc_feats.detach()",
                            "Call"
                        ],
                        [
                            "encoder_out['encoder_out'][0]",
                            "Subscript"
                        ],
                        [
                            "enc_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_length.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_359": {
                "variable": {
                    "value": "copied_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_embeds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mapped_inputs.unsqueeze(-1).expand(*mapped_inputs.size(), src_embeds.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_232": {
                "input": {
                    "value": "decoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(features)",
                            "Call"
                        ],
                        [
                            "decoder_out",
                            "Method Argument"
                        ],
                        [
                            "decoder_out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_245": {
                "input": {
                    "value": "length_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.forward_length(normalize=False, encoder_out=encoder_out)",
                            "Call"
                        ],
                        [
                            "F.linear(enc_feats, self.embed_length.weight)",
                            "Call"
                        ],
                        [
                            "length_out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/roberta/alignment_utils.py": {
        "torch": {
            "stack_95": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weighted_features[0]]",
                            "List"
                        ],
                        [
                            "torch.stack(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_96": {
                "input": {
                    "value": "torch.abs(output.sum(dim=0) - features.sum(dim=0)) < 0.0001",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_96": {
                "input": {
                    "value": "output.sum(dim=0) - features.sum(dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/roberta/enc_dec.py": {
        "torch": {
            "Embedding_91": {
                "variable": {
                    "value": "dec_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "dictionary.pad()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/roberta/hub_interface.py": {
        "torch": {
            "log_softmax_117": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.classification_heads[head](features)",
                            "Call"
                        ],
                        [
                            "features[0, masked_index, :].squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/roberta/model.py": {
        "torch": {
            "ModuleDict_50": {
                "variable": {
                    "value": "self.classification_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_359": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_366": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_397": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_399": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pooler_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooler_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "spectral_norm_408": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_451": {
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_222": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output[0].float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_224": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output[0].float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_366": {
                "*size": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_378": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(src_tokens, features_only, return_all_hiddens, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.classification_heads[classification_head_name](x)",
                            "Call"
                        ],
                        [
                            "hub_utils.from_pretrained(model_name_or_path, checkpoint_file, data_name_or_path, archive_map=cls.hub_models(), bpe=bpe, load_checkpoint_heads=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "self.extract_features(src_tokens, return_all_hiddens=return_all_hiddens)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x, masked_tokens=masked_tokens)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_401": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_364": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/speech_to_text/berard.py": {
        "torch": {
            "ModuleList_203": {
                "variable": {
                    "value": "self.input_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_219": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_239": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "lstm_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "lstm_input_dim * conv_layers[-1][0]",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "lstm_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_blstm_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_285": {
                "variable": {
                    "value": "packed_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.view(bsz, max_seq_len, self.in_channels, self.input_dim).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "input_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "conv_layer(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).transpose(0, 1).contiguous().view(output_seq_len, bsz, -1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "variable"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, attention_outs_concat, embeddings), dim=2)",
                            "Call"
                        ],
                        [
                            "self.deep_output_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.output_projection(x)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_lengths.clone()",
                            "Call"
                        ],
                        [
                            "(input_lengths.float() + 2 * p - k) / s + 1",
                            "BinOp"
                        ],
                        [
                            "input_lengths.floor().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_292": {
                "variable": {
                    "value": "(x, output_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(packed_x, (h0, c0))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_329": {
                "variable": {
                    "value": "self.encoder_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.attention_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_331": {
                "variable": {
                    "value": "self.decoder_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decoder_hidden_state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_hidden_state_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.attention_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_335": {
                "variable": {
                    "value": "self.to_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.attention_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_354": {
                "variable": {
                    "value": "hidden_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(decoder_component + encoder_component).view(-1, self.attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_368": {
                "variable": {
                    "value": "normalized_masked_attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.to_scores(hidden_att).view(src_len, bsz)",
                            "Call"
                        ],
                        [
                            "attn_scores.float().masked_fill_(encoder_padding_mask, float('-inf')).type_as(attn_scores)",
                            "Call"
                        ],
                        [
                            "x.new_zeros(bsz, srclen)",
                            "Call"
                        ],
                        [
                            "self.attention(hidden, encoder_outs, encoder_padding_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_409": {
                "variable": {
                    "value": "self.embed_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_415": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_429": {
                "variable": {
                    "value": "self.deep_output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + encoder_output_dim + embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_layer_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_432": {
                "variable": {
                    "value": "self.output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_layer_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_505": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_506": {
                "variable": {
                    "value": "attention_outs_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_516": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, attention_outs_concat, embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_518": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.view(bsz, max_seq_len, self.in_channels, self.input_dim).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "input_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "conv_layer(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).transpose(0, 1).contiguous().view(output_seq_len, bsz, -1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "variable"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, attention_outs_concat, embeddings), dim=2)",
                            "Call"
                        ],
                        [
                            "self.deep_output_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.output_projection(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_248": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_268": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.view(bsz, max_seq_len, self.in_channels, self.input_dim).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "input_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "conv_layer(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).transpose(0, 1).contiguous().view(output_seq_len, bsz, -1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(packed_outs)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "variable"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, attention_outs_concat, embeddings), dim=2)",
                            "Call"
                        ],
                        [
                            "self.deep_output_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.output_projection(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_411": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_224": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv_stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv_kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMCell_419": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim if layer_id == 0 else encoder_output_dim",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_208": {
                "*args": {
                    "value": "nn.Linear(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feat_per_channel",
                            "variable"
                        ],
                        [
                            "out_features",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_layers",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_209": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feat_per_channel",
                            "variable"
                        ],
                        [
                            "out_features",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_layers",
                            "variable"
                        ]
                    ]
                }
            },
            "Dropout_209": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/models/speech_to_text/convtransformer.py": {
        "torch": {
            "Sequential_242": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(1, args.conv_out_channels, 3, stride=2, padding=3 // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_257": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "transformer_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.infer_conv_output_dim(self.in_channels, self.input_dim, args.conv_out_channels)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_265": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_280": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sample_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_311": {
                "variable": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_len_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(src_lengths.float() / subsampling_factor).ceil().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_317": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(sample_bsz, in_channels, sample_seq_len, input_dim)",
                            "Call"
                        ],
                        [
                            "torch.nn.Conv2d(1, out_channels, 3, stride=2, padding=3 // 2)(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.Conv2d(out_channels, out_channels, 3, stride=2, padding=3 // 2)(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "src_tokens.view(bsz, max_seq_len, self.in_channels, self.input_dim).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).transpose(0, 1).contiguous().view(output_seq_len, bsz, -1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * x",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.extract_features_scriptable(prev_output_tokens, encoder_out, incremental_state, full_context_alignment, alignment_layer, alignment_heads)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_243": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_245": {
                "in_channels": {
                    "value": "args.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_281": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_282": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_308": {
                "*size": {
                    "value": "[src_lengths.size(0)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/speech_to_text/modules/augmented_memory_attention.py": {
        "torch": {
            "ModuleList_41": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_74": {
                "variable": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(src_lengths.float() / subsampling_factor).ceil().long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.view(bsz, max_seq_len, self.in_channels, self.input_dim).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).transpose(0, 1).contiguous().view(output_seq_len, bsz, -1)",
                            "Call"
                        ],
                        [
                            "self.out(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * x",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(x, states[i])",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, summarization_query], dim=0)",
                            "Call"
                        ],
                        [
                            "self.self_attn(input_and_summary=x, state=state)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.activation_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, summarization_query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "memory_and_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "memory + [input_and_summary[:-1]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_294": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_proj(self.v2e(input_and_sum_query))",
                            "Call"
                        ],
                        [
                            "q.contiguous().view(-1, batch_size * self.num_heads, self.head_dim).transpose(0, 1) * self.scaling",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_310": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_317": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_module(attention_weights)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_proj(self.v2e(memory_and_input))",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, batch_size * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_146": {
                "variable": {
                    "value": "summarization_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[seg_start:seg_end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/speech_to_text/modules/emformer.py": {
        "torch": {
            "Parameter_45": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(max_position * 2 + 1, head_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_52": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_66": {
                "variable": {
                    "value": "self.torch_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "elementwise_affine": {
                    "value": "elementwise_affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "layer_norm_74": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.torch_module.normalized_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.torch_module.weight.float() if self.torch_module.weight is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.torch_module.bias.float() if self.torch_module.bias is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.torch_module.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, ffn_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_309": {
                "variable": {
                    "value": "self.e2h_kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_310": {
                "variable": {
                    "value": "self.e2h_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_337": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_369": {
                "variable": {
                    "value": "utterance_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rest_lengths",
                            "variable"
                        ],
                        [
                            "(~padding_masks).sum(dim=1).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(lengths - self.right_context, min=0)",
                            "Call"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_381": {
                "variable": {
                    "value": "mem_rc_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, rc_block, utterance_block]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_429": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.e2h_q(rc_input_sum)",
                            "Call"
                        ],
                        [
                            "q.contiguous().view(-1, B * self.num_heads, self.head_dim).transpose(0, 1) * self.scaling",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_468": {
                "variable": {
                    "value": "attention_weights_float",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_weights.float()",
                            "Call"
                        ],
                        [
                            "attention_weights_float.view(B, self.num_heads, T, key_length)",
                            "Call"
                        ],
                        [
                            "attention_weights_float.masked_fill(padding_mask.unsqueeze(1).unsqueeze(2).to(torch.bool), float('-inf'))",
                            "Call"
                        ],
                        [
                            "attention_weights_float.view(B * self.num_heads, T, key_length)",
                            "Call"
                        ],
                        [
                            "attention_suppression(attention_weights_float, self.std_scale)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(attention_weights_float, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.prepare_attention_weights(q=q, new_k=new_k, new_v=new_v, input_shape=input_shape, rpe=rpe)",
                            "Call"
                        ],
                        [
                            "attention_weights_float.masked_fill(attention_mask, float(self.negative_inf))",
                            "Call"
                        ],
                        [
                            "self.prepare_attention_weights(q=q, new_k=new_k, new_v=new_v, input_shape=input_shape, rpe=rpe)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_473": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attention_weights + attention_weights_rpe",
                            "BinOp"
                        ],
                        [
                            "attention_weights_float.type_as(attention_weights)",
                            "Call"
                        ],
                        [
                            "self.prepare_attention_weights(q=q, new_k=new_k, new_v=new_v, input_shape=input_shape, rpe=rpe)",
                            "Call"
                        ],
                        [
                            "self.prepare_attention_weights(q=q, new_k=new_k, new_v=new_v, input_shape=input_shape, rpe=rpe)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_479": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.dropout(attention_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kv.chunk(chunks=2, dim=2)",
                            "Call"
                        ],
                        [
                            "new_v.contiguous().view(-1, B * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.prepare_attention_weights(q=q, new_k=new_k, new_v=new_v, input_shape=input_shape, rpe=rpe)",
                            "Call"
                        ],
                        [
                            "self.prepare_attention_weights(q=q, new_k=new_k, new_v=new_v, input_shape=input_shape, rpe=rpe)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_672": {
                "variable": {
                    "value": "new_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k[:mem_length + right_context_blocks_length, :, :], left_context_key, k[-utterance_length:, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_680": {
                "variable": {
                    "value": "new_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v[:mem_length + right_context_blocks_length, :, :], left_context_val, v[-utterance_length:, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_782": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_on_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_810": {
                "variable": {
                    "value": "rc_and_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[right_context_blocks, input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_1006": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_1072": {
                "variable": {
                    "value": "utterance_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "u_st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "past_length * self.segment_size",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "u_ed - self.right_context",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_1075": {
                "variable": {
                    "value": "left_context_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "u_st - left_context_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "u_st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "past_length * self.segment_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_1087": {
                "variable": {
                    "value": "right_context_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "right_context_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._gen_right_context_padded_input(input)",
                            "Call"
                        ],
                        [
                            "layer(input=output, lengths=lengths, attention_mask=attention_mask, mems=mems, right_context_blocks=right_context_blocks, pre_mems=None, left_context_key=None, left_context_val=None, rpe=rpe)",
                            "Call"
                        ],
                        [
                            "self._gen_right_context_padded_input(input)",
                            "Call"
                        ],
                        [
                            "layer.forward(input=output, lengths=lengths, attention_mask=attention_mask, mems=mems, right_context_blocks=right_context_blocks, pre_mems=pre_mems, left_context_key=lc_key, left_context_val=lc_val, rpe=rpe)",
                            "Call"
                        ],
                        [
                            "input[rc_str:rc_end, :, :]",
                            "Subscript"
                        ],
                        [
                            "layer.forward_jit(input=output, lengths=lengths, mems=true_mems, right_context_blocks=right_context_blocks, left_context_key=lc_key, left_context_val=lc_val, rpe=rpe)",
                            "Call"
                        ],
                        [
                            "right_context_blocks",
                            "Method Argument"
                        ],
                        [
                            "right_context_blocks",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_1272": {
                "variable": {
                    "value": "empty_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_memory_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.memory_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_1279": {
                "variable": {
                    "value": "left_context_key",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.left_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.memory_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_1286": {
                "variable": {
                    "value": "left_context_val",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.left_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.memory_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_1293": {
                "variable": {
                    "value": "past_length",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_1327": {
                "variable": {
                    "value": "batched_m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_m, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1328": {
                "variable": {
                    "value": "batched_lc_key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_lc_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_lc_key, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1329": {
                "variable": {
                    "value": "batched_lc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_lc_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_lc_val, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1330": {
                "variable": {
                    "value": "batched_past_length",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_past_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_past_length, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_1339": {
                "variable": {
                    "value": "reord_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.index_fill(dim=2, index=indices, value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices.to(device=m.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_1340": {
                "variable": {
                    "value": "reord_lc_key",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lc_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lc_key.index_fill(dim=2, index=indices, value=0.0)",
                            "Call"
                        ],
                        [
                            "state[1][layer][self.left_context - past_left_context:, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.state_update_before(i, state, past_length, past_left_context)",
                            "Call"
                        ],
                        [
                            "self.state_update_before(layer=i, state=state, past_length=past_length, past_left_context=past_left_context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices.to(device=m.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_1341": {
                "variable": {
                    "value": "reord_lc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lc_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lc_val.index_fill(dim=2, index=indices, value=0.0)",
                            "Call"
                        ],
                        [
                            "state[2][layer][self.left_context - past_left_context:, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.state_update_before(i, state, past_length, past_left_context)",
                            "Call"
                        ],
                        [
                            "self.state_update_before(layer=i, state=state, past_length=past_length, past_left_context=past_left_context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices.to(device=m.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_1342": {
                "variable": {
                    "value": "reord_past_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, batch_size, dtype=torch.int32, device=device)",
                            "Call"
                        ],
                        [
                            "past_length.index_fill(dim=1, index=indices, value=0)",
                            "Call"
                        ],
                        [
                            "state[3][0][0].item()",
                            "Call"
                        ],
                        [
                            "min(self.max_memory_size, past_length)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices.to(device=m.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1533": {
                "variable": {
                    "value": "new_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state[1][layer], next_key]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1534": {
                "variable": {
                    "value": "new_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state[2][layer], next_val]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1547": {
                "variable": {
                    "value": "state[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mems_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.state_update_after(layer=i, state=state, mems=mems, next_key=next_key, next_val=next_val, mems_list=mems_list, lc_key_list=lc_key_list, lc_val_list=lc_val_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.state_update_after(layer=i, state=state, mems_list=mems_list, mems=mems, next_key=next_key, next_val=next_val, lc_key_list=lc_key_list, lc_val_list=lc_val_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1548": {
                "variable": {
                    "value": "state[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lc_key_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.state_update_after(layer=i, state=state, mems=mems, next_key=next_key, next_val=next_val, mems_list=mems_list, lc_key_list=lc_key_list, lc_val_list=lc_val_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.state_update_after(layer=i, state=state, mems_list=mems_list, mems=mems, next_key=next_key, next_val=next_val, lc_key_list=lc_key_list, lc_val_list=lc_val_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1549": {
                "variable": {
                    "value": "state[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lc_val_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.state_update_after(layer=i, state=state, mems=mems, next_key=next_key, next_val=next_val, mems_list=mems_list, lc_key_list=lc_key_list, lc_val_list=lc_val_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.state_update_after(layer=i, state=state, mems_list=mems_list, mems=mems, next_key=next_key, next_val=next_val, lc_key_list=lc_key_list, lc_val_list=lc_val_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_1697": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths - self.right_context",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool1d_162": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "segment_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segment_size",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "segment_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segment_size",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_433": {
                "variable": {
                    "value": "attention_weights_rpe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "r_k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_433": {
                "variable": {
                    "value": "attention_weights_rpe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_482": {
                "variable": {
                    "value": "attention_rpe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "r_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rpe_v(rpe)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_482": {
                "variable": {
                    "value": "attention_rpe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_555": {
                "variable": {
                    "value": "new_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k[:mem_length + right_context_blocks_length, :, :], left_context_key, k[-utterance_length:, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_563": {
                "variable": {
                    "value": "new_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v[:mem_length + right_context_blocks_length, :, :], left_context_val, v[-utterance_length:, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_843": {
                "variable": {
                    "value": "rc_qu_su",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rc_and_input, summary_query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_883": {
                "variable": {
                    "value": "rc_qu_su",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rc_and_input, summary_query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_1084": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(i + 1) * self.segment_size + u_st",
                            "BinOp"
                        ],
                        [
                            "(i + 1) * self.segment_size",
                            "BinOp"
                        ],
                        [
                            "i * self.segment_size",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "ed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st + self.right_context",
                            "BinOp"
                        ],
                        [
                            "st + self.right_context",
                            "BinOp"
                        ],
                        [
                            "min(T, st + self.segment_size + self.right_context)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_1096": {
                "variable": {
                    "value": "memory_bank_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-max_relative_position - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-max_relative_position - 1 - memory_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1104": {
                "variable": {
                    "value": "summary_vector_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "summary_pos_st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_ed + max_relative_position + 1",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "summary_pos_st + num_segs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1108": {
                "variable": {
                    "value": "key_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[memory_bank_ranges, right_context_ranges, left_context_ranges, utterance_ranges]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1117": {
                "variable": {
                    "value": "query_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[right_context_ranges, utterance_ranges, summary_vector_ranges]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1121": {
                "variable": {
                    "value": "key_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[right_context_ranges, left_context_ranges, utterance_ranges]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1125": {
                "variable": {
                    "value": "query_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[right_context_ranges, utterance_ranges]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1386": {
                "tensors": {
                    "value": "right_context_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._gen_right_context_padded_input(input)",
                            "Call"
                        ],
                        [
                            "layer(input=output, lengths=lengths, attention_mask=attention_mask, mems=mems, right_context_blocks=right_context_blocks, pre_mems=None, left_context_key=None, left_context_val=None, rpe=rpe)",
                            "Call"
                        ],
                        [
                            "self._gen_right_context_padded_input(input)",
                            "Call"
                        ],
                        [
                            "layer.forward(input=output, lengths=lengths, attention_mask=attention_mask, mems=mems, right_context_blocks=right_context_blocks, pre_mems=pre_mems, left_context_key=lc_key, left_context_val=lc_val, rpe=rpe)",
                            "Call"
                        ],
                        [
                            "input[rc_str:rc_end, :, :]",
                            "Subscript"
                        ],
                        [
                            "layer.forward_jit(input=output, lengths=lengths, mems=true_mems, right_context_blocks=right_context_blocks, left_context_key=lc_key, left_context_val=lc_val, rpe=rpe)",
                            "Call"
                        ],
                        [
                            "right_context_blocks",
                            "Method Argument"
                        ],
                        [
                            "right_context_blocks",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_1401": {
                "variable": {
                    "value": "rest_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths - self.segment_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "nT - (i + 1) * self.segment_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_1447": {
                "variable": {
                    "value": "mems",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "input.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1525": {
                "variable": {
                    "value": "state_mems",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state[0][layer + 1], mems]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_1792": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[NoSegAugmentedMemoryTransformerEncoderLayer(input_dim=args.encoder_embed_dim, num_heads=args.encoder_attention_heads, ffn_dim=args.encoder_ffn_embed_dim, num_layers=args.encoder_layers, dropout_in_attn=args.dropout, dropout_on_attn=args.dropout, dropout_on_fc1=args.dropout, dropout_on_fc2=args.dropout, activation_fn=args.activation_fn, context_config=context_config, segment_size=args.segment_length, max_memory_size=args.max_memory_size, scaled_init=True, tanh_on_mem=args.amtrf_tanh_on_mem)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GELU_117": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_123": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ffn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ffn_dim",
                            "Method Argument"
                        ],
                        [
                            "ffn_dim",
                            "Method Argument"
                        ],
                        [
                            "ffn_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_125": {
                "p": {
                    "value": "dropout_on_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_on_fc1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "ffn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ffn_dim",
                            "Method Argument"
                        ],
                        [
                            "ffn_dim",
                            "Method Argument"
                        ],
                        [
                            "ffn_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_127": {
                "p": {
                    "value": "dropout_on_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_on_fc2",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool1d_168": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "segment_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segment_size",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "segment_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segment_size",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_527": {
                "variable": {
                    "value": "mems",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pre_mems, mems]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_615": {
                "variable": {
                    "value": "next_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mems",
                            "variable"
                        ],
                        [
                            "rc_output_memory[-summary_length:]",
                            "Subscript"
                        ],
                        [
                            "rc_output_memory[-summary_length:-1]",
                            "Subscript"
                        ],
                        [
                            "self.squash_mem(next_m)",
                            "Call"
                        ],
                        [
                            "torch.clamp(next_m, min=-10, max=10)",
                            "Call"
                        ],
                        [
                            "rc_output_memory[-1:]",
                            "Subscript"
                        ],
                        [
                            "self.squash_mem(next_m)",
                            "Call"
                        ],
                        [
                            "mems",
                            "variable"
                        ],
                        [
                            "torch.clamp(next_m, min=-10, max=10)",
                            "Call"
                        ],
                        [
                            "self.attention.forward_jit(input=rc_qu_su, lengths=lengths, mems=mems, left_context_key=left_context_key, left_context_val=left_context_val, rpe=rpe)",
                            "Call"
                        ],
                        [
                            "self.attention(input=rc_qu_su, lengths=lengths, mems=mems, attention_mask=attention_mask, pre_mems=pre_mems, left_context_key=left_context_key, left_context_val=left_context_val, rpe=rpe)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_718": {
                "variable": {
                    "value": "next_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mems",
                            "variable"
                        ],
                        [
                            "rc_output_memory[-summary_length:]",
                            "Subscript"
                        ],
                        [
                            "rc_output_memory[-summary_length:-1]",
                            "Subscript"
                        ],
                        [
                            "self.squash_mem(next_m)",
                            "Call"
                        ],
                        [
                            "torch.clamp(next_m, min=-10, max=10)",
                            "Call"
                        ],
                        [
                            "rc_output_memory[-1:]",
                            "Subscript"
                        ],
                        [
                            "self.squash_mem(next_m)",
                            "Call"
                        ],
                        [
                            "mems",
                            "variable"
                        ],
                        [
                            "torch.clamp(next_m, min=-10, max=10)",
                            "Call"
                        ],
                        [
                            "self.attention.forward_jit(input=rc_qu_su, lengths=lengths, mems=mems, left_context_key=left_context_key, left_context_val=left_context_val, rpe=rpe)",
                            "Call"
                        ],
                        [
                            "self.attention(input=rc_qu_su, lengths=lengths, mems=mems, attention_mask=attention_mask, pre_mems=pre_mems, left_context_key=left_context_key, left_context_val=left_context_val, rpe=rpe)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_1086": {
                "start": {
                    "value": "u_ed - self.right_context",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "u_ed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_st + T",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_1129": {
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key_ranges[None, :] - query_ranges[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-max_relative_position",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "max_relative_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_1488": {
                "variable": {
                    "value": "state_mems",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state[0][0], mems]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1491": {
                "variable": {
                    "value": "state_mems",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state[0][0], full_mems]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "segment_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segment_size",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_1210": {
                "*size": {
                    "value": "rc_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "col_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc",
                            "variable"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1211": {
                "*size": {
                    "value": "ssize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.segment_size, utterance_length - j * self.segment_size)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "col_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc",
                            "variable"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1212": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "col_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc",
                            "variable"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1231": {
                "*size": {
                    "value": "rc_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "col_7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_end - seg_start",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1232": {
                "*size": {
                    "value": "ssize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.segment_size, utterance_length - j * self.segment_size)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "col_7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_end - seg_start",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1233": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "col_7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_end - seg_start",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1241": {
                "tensors": {
                    "value": "rc_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1242": {
                "tensors": {
                    "value": "q_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1243": {
                "tensors": {
                    "value": "s_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1321": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1322": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1323": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1324": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(segment_size, hid_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_1189": {
                "*size": {
                    "value": "rc_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "col_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "j + past_length - m_start",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1190": {
                "*size": {
                    "value": "ssize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.segment_size, utterance_length - j * self.segment_size)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "col_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "j + past_length - m_start",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_180": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1249": {
                "tensors": {
                    "value": "[torch.cat(rc_mask, dim=0), torch.cat(query_mask, dim=0), torch.cat(summary_mask, dim=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1261": {
                "tensors": {
                    "value": "[torch.cat(rc_mask, dim=0), torch.cat(query_mask, dim=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GELU_182": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_186": {
                "in_features": {
                    "value": "segment_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segment_size",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(nonlin_args['dim'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(nonlin_args['dim'])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1251": {
                "tensors": {
                    "value": "rc_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1252": {
                "tensors": {
                    "value": "query_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1253": {
                "tensors": {
                    "value": "summary_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1262": {
                "tensors": {
                    "value": "query_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/speech_to_text/s2t_transformer.py": {
        "torch": {
            "ModuleList_52": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Conv1d(in_channels if i == 0 else mid_channels // 2, mid_channels if i < self.n_layers - 1 else out_channels * 2, k, stride=2, padding=k // 2) for (i, k) in enumerate(kernel_sizes))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "ModuleList_303": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerEncoderLayer(args) for _ in range(args.encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "glu_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.glu(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.subsample(src_tokens, src_lengths)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * x",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self._forward(src_tokens, src_lengths)",
                            "Call"
                        ],
                        [
                            "self._forward(src_tokens, src_lengths)",
                            "Call"
                        ],
                        [
                            "self.extract_features_scriptable(prev_output_tokens, encoder_out, incremental_state, full_context_alignment, alignment_layer, alignment_heads)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_53": {
                "in_channels": {
                    "value": "in_channels if i == 0 else mid_channels // 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels if i < self.n_layers - 1 else out_channels * 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "k // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/speech_to_text/utils.py": {
        "torch": {
            "randn_157": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(torch.max(lengths).item())",
                            "Call"
                        ],
                        [
                            "int(torch.max(lengths).item())",
                            "Call"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "bool_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[True]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "padded_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_to_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "time_axis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_476": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_to_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "time_axis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_477": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lengths_to_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_478": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths + extra_left_context + extra_right_context",
                            "BinOp"
                        ],
                        [
                            "segments",
                            "variable"
                        ],
                        [
                            "torch.stack(lengths_to_stack, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(lengths, dim=0)",
                            "Call"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_499": {
                "variable": {
                    "value": "max_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths + extra_left_context + extra_right_context",
                            "BinOp"
                        ],
                        [
                            "segments",
                            "variable"
                        ],
                        [
                            "torch.stack(lengths_to_stack, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(lengths, dim=0)",
                            "Call"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_527": {
                "variable": {
                    "value": "attention_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_529": {
                "variable": {
                    "value": "nozeros_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_nozeros.to(torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_532": {
                "variable": {
                    "value": "key_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(attention_weights.float(), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_541": {
                "variable": {
                    "value": "dis_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "attention_nozeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_prob.to(torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attention_prob - key_mean) * (attention_prob - key_mean)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_prob.new_zeros(attention_prob.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_545": {
                "variable": {
                    "value": "key_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dis_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(attention_nozeros, dis, attention_prob.new_zeros(attention_prob.size()))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_547": {
                "variable": {
                    "value": "key_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(dis_masked, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "key_var / (nozeros_sum - 1.0 + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_554": {
                "variable": {
                    "value": "attention_weights_float",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "attention_prob < key_thread",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "inf_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_prob.new_zeros(attention_prob.size()).detach()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_weights.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_380": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(extra_left_context,)",
                            "Tuple"
                        ],
                        [
                            "list(sequence.shape)",
                            "Call"
                        ],
                        [
                            "extra_left_context + segment_size + extra_right_context",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "fill_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sequence.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_386": {
                "variable": {
                    "value": "left_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequence(sequence=sequence, time_axis=time_axis, extra_left_context=extra_left_context, extra_right_context=extra_right_context)",
                            "Call"
                        ],
                        [
                            "torch.cat(tensors_to_concat, dim=time_axis)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "time_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_length, device=lengths.device, dtype=lengths.dtype).expand(max_length, max_length) - torch.arange(max_length, device=lengths.device).view(max_length, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.full(size=size, fill_value=fill_value, dtype=torch.long, device=sequence.device)",
                            "Call"
                        ],
                        [
                            "torch.arange(start=offset, end=offset + clamped_size, step=1, dtype=torch.long, device=sequence.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_396": {
                "variable": {
                    "value": "right_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(extra_left_context,)",
                            "Tuple"
                        ],
                        [
                            "list(sequence.shape)",
                            "Call"
                        ],
                        [
                            "extra_left_context + segment_size + extra_right_context",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sequence.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sequence.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_441": {
                "variable": {
                    "value": "segment_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths - offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "clamped_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(size, end - offset)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_442": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "offset + step",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "offset + clamped_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sequence.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_449": {
                "variable": {
                    "value": "segment_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequence(sequence=sequence, time_axis=time_axis, extra_left_context=extra_left_context, extra_right_context=extra_right_context)",
                            "Call"
                        ],
                        [
                            "torch.cat(tensors_to_concat, dim=time_axis)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "time_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_length, device=lengths.device, dtype=lengths.dtype).expand(max_length, max_length) - torch.arange(max_length, device=lengths.device).view(max_length, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.full(size=size, fill_value=fill_value, dtype=torch.long, device=sequence.device)",
                            "Call"
                        ],
                        [
                            "torch.arange(start=offset, end=offset + clamped_size, step=1, dtype=torch.long, device=sequence.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_203": {
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths + extra_left_context + extra_right_context",
                            "BinOp"
                        ],
                        [
                            "segments",
                            "variable"
                        ],
                        [
                            "torch.stack(lengths_to_stack, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(lengths, dim=0)",
                            "Call"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_204": {
                "start": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(torch.max(lengths).item())",
                            "Call"
                        ],
                        [
                            "int(torch.max(lengths).item())",
                            "Call"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "lengths.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_230": {
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths + extra_left_context + extra_right_context",
                            "BinOp"
                        ],
                        [
                            "segments",
                            "variable"
                        ],
                        [
                            "torch.stack(lengths_to_stack, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(lengths, dim=0)",
                            "Call"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_244": {
                "start": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(torch.max(lengths).item())",
                            "Call"
                        ],
                        [
                            "int(torch.max(lengths).item())",
                            "Call"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "lengths.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_246": {
                "start": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(torch.max(lengths).item())",
                            "Call"
                        ],
                        [
                            "int(torch.max(lengths).item())",
                            "Call"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_501": {
                "start": {
                    "value": "max_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lengths).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_564": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "-clamp_value",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "clamp_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clamp_value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogSoftmax_322": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_331": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/transformer.py": {
        "torch": {
            "Embedding_1056": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1063": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_662": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_399": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_717": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "triu_1001": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(torch.zeros([dim, dim]))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_756": {
                "variable": {
                    "value": "self.output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_tokens.weight.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_tokens.weight.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_763": {
                "variable": {
                    "value": "self.output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(dictionary)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_389": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_684": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_1002": {
                "*size": {
                    "value": "[dim, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_630": {},
            "Tensor_1046": {}
        }
    },
    "fairseq/models/wav2vec/wav2vec.py": {
        "torch": {
            "Dropout_288": {
                "variable": {
                    "value": "self.dropout_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.dropout_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_289": {
                "variable": {
                    "value": "self.dropout_agg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.dropout_agg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_356": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "TransposeLast()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_391": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_464": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_465": {
                "variable": {
                    "value": "self.residual_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_474": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_508": {
                "variable": {
                    "value": "self.project_to_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, prediction_steps)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_511": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0.0, metadata={'help': 'dropout to apply within the model'})",
                            "Call"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_526": {
                "variable": {
                    "value": "neg_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "high",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tsz if self.sample_distance is None else min(tsz, self.sample_distance)",
                            "IfExp"
                        ]
                    ]
                },
                "size": {
                    "value": "(bsz, self.n_negatives * tsz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_583": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, negatives]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_179": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_428": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_feats(features)",
                            "Call"
                        ],
                        [
                            "self.feature_aggregator(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_agg(x)",
                            "Call"
                        ],
                        [
                            "self.wav2vec_predictions(x, features)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * self.residual_scale",
                            "BinOp"
                        ],
                        [
                            "x.abs()",
                            "Call"
                        ],
                        [
                            "x + 1",
                            "BinOp"
                        ],
                        [
                            "x.log()",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * self.residual_scale",
                            "BinOp"
                        ],
                        [
                            "x.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.project_to_steps(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pad_left, self.pad_right)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_564": {
                "variable": {
                    "value": "neg_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[neg_idxs, cross_neg_idxs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_598": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.new(bsz * copies * (tsz - self.offset + 1) * steps - (steps + 1) * steps // 2 * copies * bsz)",
                            "Call"
                        ],
                        [
                            "predictions.view(-1, copies)",
                            "Call"
                        ]
                    ]
                }
            },
            "GELU_181": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_381": {
                "*args": {
                    "value": "nn.Conv1d(n_in, n_out, k, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_455": {
                "*args": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_528": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_537": {
                "variable": {
                    "value": "neg_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "high - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(bsz, self.n_negatives * tsz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_550": {
                "variable": {
                    "value": "cross_neg_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cross_high - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(bsz, self.cross_sample_negatives * tsz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_like_600": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.new_full((predictions.shape[0] // copies,), 0, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(predictions)",
                            "Call"
                        ],
                        [
                            "(labels, weights)",
                            "Tuple"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1 / self.n_negatives",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_610": {
                "variable": {
                    "value": "predictions[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "bct,nbct->tbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x[..., :-offset, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_610": {
                "variable": {
                    "value": "predictions[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_615": {
                "variable": {
                    "value": "predictions[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "bct,nbct->nbt",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x[..., :-offset, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_615": {
                "variable": {
                    "value": "predictions[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_258": {
                "variable": {
                    "value": "feature_aggregator",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "TransposeLast()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_382": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_in",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_out",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_enc_layers",
                            "variable"
                        ],
                        [
                            "q_res.keys()",
                            "Call"
                        ],
                        [
                            "conv_layers",
                            "variable"
                        ],
                        [
                            "conv_layers",
                            "variable"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_enc_layers",
                            "variable"
                        ],
                        [
                            "conv_layers",
                            "variable"
                        ],
                        [
                            "conv_layers",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_383": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0.0, metadata={'help': 'dropout to apply within the model'})",
                            "Call"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReplicationPad1d_452": {
                "padding": {
                    "value": "(ka + kb, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_457": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_in",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_out",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_enc_layers",
                            "variable"
                        ],
                        [
                            "q_res.keys()",
                            "Call"
                        ],
                        [
                            "conv_layers",
                            "variable"
                        ],
                        [
                            "conv_layers",
                            "variable"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_enc_layers",
                            "variable"
                        ],
                        [
                            "conv_layers",
                            "variable"
                        ],
                        [
                            "conv_layers",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_458": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0.0, metadata={'help': 'dropout to apply within the model'})",
                            "Call"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_468": {
                "in_channels": {
                    "value": "in_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "dim",
                            "variable"
                        ],
                        [
                            "embed",
                            "variable"
                        ],
                        [
                            "dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layers",
                            "variable"
                        ],
                        [
                            "conv_layers",
                            "variable"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_260": {
                "input_size": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_enc_layers[-1][0]",
                            "Subscript"
                        ],
                        [
                            "embed",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "agg_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_aggregator()",
                            "Call"
                        ],
                        [
                            "agg_layers[-1][0]",
                            "Subscript"
                        ],
                        [
                            "cfg.gru_dim",
                            "Attribute"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "cfg.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/wav2vec/wav2vec2.py": {
        "torch": {
            "Dropout_270": {
                "variable": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_271": {
                "variable": {
                    "value": "self.dropout_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.dropout_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_323": {
                "variable": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(cfg.encoder_embed_dim).uniform_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_336": {
                "variable": {
                    "value": "self.final_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "final_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0, metadata={'help': 'project final representations and targets to this many dimensions.set to encoder_embed_dim is <= 0'})",
                            "Call"
                        ],
                        [
                            "cfg.final_dim if cfg.final_dim > 0 else cfg.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_480": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, negatives]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_482": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "targets.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_788": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_824": {
                "variable": {
                    "value": "self.pos_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "args.conv_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "args.conv_pos // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "args.conv_pos_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_836": {
                "variable": {
                    "value": "self.pos_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.pos_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_837": {
                "variable": {
                    "value": "self.pos_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.pos_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_839": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerSentenceEncoderLayer(embedding_dim=self.embedding_dim, ffn_embedding_dim=args.encoder_ffn_embed_dim, num_attention_heads=args.encoder_attention_heads, dropout=self.dropout, attention_dropout=args.attention_dropout, activation_dropout=args.activation_dropout, activation_fn=args.activation_fn, layer_norm_first=args.layer_norm_first) for _ in range(args.encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_881": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index_put(x, mask_indices, self.mask_emb)",
                            "Call"
                        ],
                        [
                            "index_put(x, mask_channel_indices, 0)",
                            "Call"
                        ],
                        [
                            "self.apply_mask(features, padding_mask, mask_indices=mask_indices, mask_channel_indices=mask_channel_indices)",
                            "Call"
                        ],
                        [
                            "features",
                            "variable"
                        ],
                        [
                            "self.encoder(x, padding_mask=padding_mask, layer=layer)",
                            "Call"
                        ],
                        [
                            "x[mask_indices].view(x.size(0), -1, x.size(-1))",
                            "Call"
                        ],
                        [
                            "self.final_proj(x)",
                            "Call"
                        ],
                        [
                            "self.compute_preds(x, y, negs)",
                            "Call"
                        ],
                        [
                            "self.feature_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "net_output['x']",
                            "Subscript"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.extract_features(x, padding_mask, layer)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "index_put(x, padding_mask, 0)",
                            "Call"
                        ],
                        [
                            "x + x_conv",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, self_attn_padding_mask=padding_mask, need_weights=False)",
                            "Call"
                        ],
                        [
                            "r",
                            "variable"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask, attn_mask=self_attn_mask)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, key_padding_mask=self_attn_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_948": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0.1, metadata={'help': 'dropout probability for the transformer'})",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "Dropout_949": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_950": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0.1, metadata={'help': 'dropout probability for the transformer'})",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_956": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_957": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_300": {
                "variable": {
                    "value": "self.project_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vq_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.latent_dim if cfg.latent_dim > 0 else final_dim",
                            "IfExp"
                        ],
                        [
                            "final_dim",
                            "variable"
                        ],
                        [
                            "cfg.latent_dim if cfg.latent_dim > 0 else cfg.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0, metadata={'help': 'project final representations and targets to this many dimensions.set to encoder_embed_dim is <= 0'})",
                            "Call"
                        ],
                        [
                            "cfg.final_dim if cfg.final_dim > 0 else cfg.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_302": {
                "variable": {
                    "value": "self.project_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "final_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0, metadata={'help': 'project final representations and targets to this many dimensions.set to encoder_embed_dim is <= 0'})",
                            "Call"
                        ],
                        [
                            "cfg.final_dim if cfg.final_dim > 0 else cfg.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_321": {
                "variable": {
                    "value": "self.project_inp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vq_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.latent_dim if cfg.latent_dim > 0 else final_dim",
                            "IfExp"
                        ],
                        [
                            "final_dim",
                            "variable"
                        ],
                        [
                            "cfg.latent_dim if cfg.latent_dim > 0 else cfg.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cfg.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_332": {
                "variable": {
                    "value": "self.target_glu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(final_dim, final_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_370": {
                "variable": {
                    "value": "mask_channel_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_channel_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_mask_indices((B, C), None, self.mask_channel_prob, self.mask_channel_length, self.mask_channel_selection, self.mask_channel_other, no_overlap=self.no_mask_channel_overlap, min_space=self.mask_channel_min_space)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_channel_indices).to(x.device).unsqueeze(1).expand(-1, T, -1)",
                            "Call"
                        ],
                        [
                            "compute_mask_indices((B, C), None, self.mask_channel_prob, self.mask_channel_length, self.mask_channel_selection, self.mask_channel_other, no_overlap=self.no_mask_channel_overlap, min_space=self.mask_channel_min_space)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_channel_indices).to(x.device).unsqueeze(1).expand(-1, T, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_370": {
                "variable": {
                    "value": "mask_channel_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_466": {
                "variable": {
                    "value": "neg_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[neg_idxs, cross_neg_idxs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_546": {
                "variable": {
                    "value": "padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "features.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_250": {
                "in_features": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_390": {
                "variable": {
                    "value": "mask_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "compute_mask_indices((B, T), padding_mask, self.mask_prob, self.mask_length, self.mask_selection, self.mask_other, min_masks=2, no_overlap=self.no_mask_overlap, min_space=self.mask_min_space)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_indices).to(x.device)",
                            "Call"
                        ],
                        [
                            "self.apply_mask(features, padding_mask, mask_indices=mask_indices, mask_channel_indices=mask_channel_indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_408": {
                "variable": {
                    "value": "mask_channel_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_channel_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_mask_indices((B, C), None, self.mask_channel_prob, self.mask_channel_length, self.mask_channel_selection, self.mask_channel_other, no_overlap=self.no_mask_channel_overlap, min_space=self.mask_channel_min_space)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_channel_indices).to(x.device).unsqueeze(1).expand(-1, T, -1)",
                            "Call"
                        ],
                        [
                            "compute_mask_indices((B, C), None, self.mask_channel_prob, self.mask_channel_length, self.mask_channel_selection, self.mask_channel_other, no_overlap=self.no_mask_channel_overlap, min_space=self.mask_channel_min_space)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_channel_indices).to(x.device).unsqueeze(1).expand(-1, T, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_408": {
                "variable": {
                    "value": "mask_channel_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_439": {
                "variable": {
                    "value": "neg_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "high - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(bsz, self.n_negatives * num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_452": {
                "variable": {
                    "value": "cross_neg_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cross_high - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(bsz, self.cross_sample_negatives * num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_504": {
                "input": {
                    "value": "(input_length - kernel_size) / stride + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_648": {
                "variable": {
                    "value": "negs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[negs, cb_negs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_758": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=False, metadata={'help': 'include bias in conv encoder'})",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GELU_837": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_333": {
                "in_features": {
                    "value": "final_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0, metadata={'help': 'project final representations and targets to this many dimensions.set to encoder_embed_dim is <= 0'})",
                            "Call"
                        ],
                        [
                            "cfg.final_dim if cfg.final_dim > 0 else cfg.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GLU_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_532": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_767": {
                "*args": {
                    "value": "make_conv()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_490": {
                "data": {
                    "value": "fillval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-float(2 ** 30)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "arange_554": {
                "start": {
                    "value": "padding_mask.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_769": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0.1, metadata={'help': 'dropout probability for the transformer'})",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_770": {
                "*args": {
                    "value": "TransposeLast()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GELU_775": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_778": {
                "*args": {
                    "value": "make_conv()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_785": {
                "*args": {
                    "value": "make_conv()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_780": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0.1, metadata={'help': 'dropout probability for the transformer'})",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "GELU_782": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_785": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field(default=0.1, metadata={'help': 'dropout probability for the transformer'})",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "GELU_785": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/wav2vec/wav2vec2_asr.py": {
        "torch": {
            "Embedding_646": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "embed_tokens.padding_idx",
                            "Attribute"
                        ],
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_653": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_369": {
                "variable": {
                    "value": "self.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_506": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_583": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w2v_encoder(**kwargs)",
                            "Call"
                        ],
                        [
                            "res['x']",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.final_dropout(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.extract_features(prev_output_tokens, encoder_out, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_out['encoder_out'] if encoder_out is not None else None, encoder_out['padding_mask'] if encoder_out is not None else None, incremental_state, self_attn_mask=self.buffered_future_mask(x) if incremental_state is None else None)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_515": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), self.output_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_636": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_618": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_620": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/adaptive_input.py": {
        "torch": {
            "ModuleList_39": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(size, dim, self.padding_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_45": {
                "num_embeddings": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cutoff[i] - prev",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(initial_dim // factor ** i)",
                            "Call"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(initial_dim // factor ** i)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/adaptive_softmax.py": {
        "torch": {
            "LogSoftmax_98": {
                "variable": {
                    "value": "self.lsm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_130": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_23": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, input.size(-1))",
                            "Call"
                        ],
                        [
                            "self.dropout_module(input)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, dim)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight.t() if self.transpose else self.weight",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.word_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "quant_noise(nn.Linear(input_dim, emb_dim, bias=False), q_noise, qn_block_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "out_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.input_dim // self.factor ** (i + 1))",
                            "Call"
                        ],
                        [
                            "input.size()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.cutoff[i + 1] - self.cutoff[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cutoff[0] + len(cutoff) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_169": {
                "p": {
                    "value": "self.dropout_module.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tied_emb.size()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.input_dim // self.factor ** (i + 1))",
                            "Call"
                        ],
                        [
                            "input.size()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "tied_proj.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tied_proj.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/base_layer.py": {
        "torch": {
            "empty_19": {
                "variable": {
                    "value": "expert_centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.decoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.expert_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[BaseSublayer(args) for _ in range(args.base_sublayers)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sort_78": {
                "variable": {
                    "value": "(token_to_workers, sort_ordering)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "token_to_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(scores, dim=1, k=k, largest=True).indices.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.sort(token_to_workers)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "output_splits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_workers,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_consecutive_83": {
                "variable": {
                    "value": "(workers, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "token_to_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.ff1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.decoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.decoder_ffn_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.ff2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.decoder_ffn_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.decoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_37": {
                "variable": {
                    "value": "shuffle_sort",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "features.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_52": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "routed_features.mv(self.expert_centroids[self.expert_id])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_66": {
                "input": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "order",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_21": {
                "data": {
                    "value": "expert_centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(self.num_workers, args.decoder_embed_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_66": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "order.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "order.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_124": {
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_like_131": {
                "input": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_77": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/beamable_mm.py": {
        "torch": {
            "mm_41": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "input2[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/character_token_embedder.py": {
        "torch": {
            "Embedding_38": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "257",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "char_embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.symbol_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(2, word_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((f[1] for f in filters))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "word_embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_188": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_dim, input_dim * 2) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_191": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_166": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(char_embs)",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(conv_result, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.highway(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "gate * x + (gate.new_tensor([1]) - gate) * proj_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_167": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(char_embs)",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(conv_result, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.highway(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "gate * x + (gate.new_tensor([1]) - gate) * proj_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_212": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "projection.chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_134": {
                "variable": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "pads.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "word_embs.new_zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convolve(chars)",
                            "Call"
                        ],
                        [
                            "torch.where(pads.unsqueeze(1), word_embs.new_zeros(1), word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(eos.unsqueeze(1), self.symbol_embeddings[self.eos_idx], word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(unk.unsqueeze(1), self.symbol_embeddings[self.unk_idx], word_embs)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_138": {
                "variable": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "eos.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.symbol_embeddings[self.eos_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convolve(chars)",
                            "Call"
                        ],
                        [
                            "torch.where(pads.unsqueeze(1), word_embs.new_zeros(1), word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(eos.unsqueeze(1), self.symbol_embeddings[self.eos_idx], word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(unk.unsqueeze(1), self.symbol_embeddings[self.unk_idx], word_embs)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_142": {
                "variable": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "unk.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.symbol_embeddings[self.unk_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convolve(chars)",
                            "Call"
                        ],
                        [
                            "torch.where(pads.unsqueeze(1), word_embs.new_zeros(1), word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(eos.unsqueeze(1), self.symbol_embeddings[self.eos_idx], word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(unk.unsqueeze(1), self.symbol_embeddings[self.unk_idx], word_embs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_46": {
                "in_channels": {
                    "value": "char_embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                }
            },
            "where_117": {
                "variable": {
                    "value": "chars",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "eos.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "chars.new_zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "chars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab[i].encode()",
                            "Call"
                        ],
                        [
                            "input.view(-1, self.max_char_len)",
                            "Call"
                        ],
                        [
                            "self.word_to_char[flat_words.type_as(self.word_to_char)].type_as(input)",
                            "Call"
                        ],
                        [
                            "torch.where(eos.unsqueeze(1), chars.new_zeros(1), chars)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_189": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/checkpoint_activations.py": {
        "torch": {
            "is_grad_enabled_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "backward_231": {
                "tensors": {
                    "value": "outputs_with_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "grad_tensors": {
                    "value": "args_with_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_166": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/conv_tbc.py": {
        "torch": {
            "Parameter_26": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.kernel_size[0], in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/cross_entropy.py": {
        "torch": {
            "log_softmax_16": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_17": {
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-100",
                            "Method Argument"
                        ],
                        [
                            "-100",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "Method Argument"
                        ],
                        [
                            "'mean'",
                            "Method Argument"
                        ],
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_30": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/downsampled_multihead_attention.py": {
        "torch": {
            "Linear_302": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.in_proj_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*k_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.in_proj_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*v_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "bmm_123": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "variable"
                        ],
                        [
                            "self.in_proj_q(q)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "q.view(tgt_len, size, self.head_dim)",
                            "Call"
                        ],
                        [
                            "q.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_156": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + torch.triu(attn_weights.data.new([-math.inf]).expand(tgt_len, tgt_len).clone(), diagonal=0)[:, ::self.head_index + 1 if self.downsample else 1].unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "scalar_bias(attn_weights, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, 1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), -math.inf)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_159": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + torch.triu(attn_weights.data.new([-math.inf]).expand(tgt_len, tgt_len).clone(), diagonal=0)[:, ::self.head_index + 1 if self.downsample else 1].unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "scalar_bias(attn_weights, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, 1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), -math.inf)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "self.in_proj_v(v)",
                            "Call"
                        ],
                        [
                            "v.view(src_len, size, self.head_dim)",
                            "Call"
                        ],
                        [
                            "v.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "scalar_bias(v, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_305": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Linear(in_features, out_features, bias=bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_310": {
                "*args": {
                    "value": "Linear(in_features, out_features * 4, dropout, bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "full_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn_weights, v)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 1).contiguous().view(tgt_len, bsz, self.head_dim)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 1).contiguous().view(tgt_len, bsz, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "self.out_proj(attn)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "full_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn_weights, v)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 1).contiguous().view(tgt_len, bsz, self.head_dim)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 1).contiguous().view(tgt_len, bsz, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "self.out_proj(attn)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "full_attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + torch.triu(attn_weights.data.new([-math.inf]).expand(tgt_len, tgt_len).clone(), diagonal=0)[:, ::self.head_index + 1 if self.downsample else 1].unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "scalar_bias(attn_weights, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, 1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), -math.inf)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "GLU_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GLU_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_128": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tril_128": {
                "input": {
                    "value": "attn_weights.data.new([1]).expand(tgt_len, tgt_len).clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_132": {
                "input": {
                    "value": "attn_weights.data.new([-math.inf]).expand(tgt_len, tgt_len).clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/dynamic_convolution.py": {
        "torch": {
            "Linear_62": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_224": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([input_buffer, x.unsqueeze(3)], dim=3)",
                            "Call"
                        ],
                        [
                            "unfold1d(x, K, padding_l, 0)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, K)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_276": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight_expanded, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj.narrow(2, 0, self.input_size).contiguous()",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, 0, self.input_size).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(T, B * H, R).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_130": {
                "variable": {
                    "value": "self.conv_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_buffer, x.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_212": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_220": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_262": {
                "variable": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight_expanded, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_248": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/dynamic_crf_layer.py": {
        "torch": {
            "logsumexp_25": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_45": {
                "variable": {
                    "value": "self.E1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "low_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_46": {
                "variable": {
                    "value": "self.E2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "low_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_115": {
                "variable": {
                    "value": "beam_transition_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_transition_score1.view(-1, beam, self.rank)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "beam_transition_score2.view(-1, beam, self.rank).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_143": {
                "variable": {
                    "value": "beam_transition_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_transition_score1.view(-1, beam, self.rank)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "beam_transition_score2.view(-1, beam, self.rank).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_155": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam if beam is not None else self.beam",
                            "IfExp"
                        ],
                        [
                            "beam if beam is not None else self.beam",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "score.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "finalized_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "finalized_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(finalized_tokens, 1)",
                            "Call"
                        ],
                        [
                            "beam_targets.gather(2, finalized_tokens[:, :, None])[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "finalized_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "finalized_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(finalized_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_128": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masks[:, i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "next_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score[:, :, None] + beam_transition_matrix[:, i - 1]",
                            "BinOp"
                        ],
                        [
                            "logsumexp(next_score, dim=1) + beam_emission_scores[:, i]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_emission_scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(masks[:, i:i + 1], next_score, score)",
                            "Call"
                        ],
                        [
                            "next_score",
                            "variable"
                        ],
                        [
                            "beam_emission_scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(masks[:, i:i + 1], _score, score)",
                            "Call"
                        ],
                        [
                            "_score",
                            "variable"
                        ]
                    ]
                }
            },
            "where_165": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masks[:, i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score[:, :, None] + beam_transition_matrix[:, i - 1]",
                            "BinOp"
                        ],
                        [
                            "_score.max(dim=1)",
                            "Call"
                        ],
                        [
                            "_score + beam_emission_scores[:, i]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_emission_scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(masks[:, i:i + 1], next_score, score)",
                            "Call"
                        ],
                        [
                            "next_score",
                            "variable"
                        ],
                        [
                            "beam_emission_scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(masks[:, i:i + 1], _score, score)",
                            "Call"
                        ],
                        [
                            "_score",
                            "variable"
                        ]
                    ]
                }
            },
            "where_166": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masks[:, i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_score.max(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(beam, device=score.device).expand(*score.size()).contiguous()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/modules/dynamicconv_layer/dynamicconv_layer.py": {
        "torch": {
            "Linear_64": {
                "variable": {
                    "value": "self.weight_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_heads * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_180": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([input_buffer, x.unsqueeze(3)], dim=3)",
                            "Call"
                        ],
                        [
                            "unfold1d(x, K, padding_l, 0)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, K)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_225": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight_expanded, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(1, 2, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(T, B * H, R).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.conv_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_buffer, x.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_176": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_211": {
                "variable": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight_expanded, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_107": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_197": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/dynamicconv_layer/setup.py": {
        "torch": {}
    },
    "fairseq/modules/fairseq_dropout.py": {
        "torch": {
            "dropout_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/fp32_group_norm.py": {
        "torch": {
            "group_norm_18": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "self.num_groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.float() if self.weight is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.float() if self.bias is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/gelu.py": {
        "torch": {
            "gelu_25": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_20": {
                "input": {
                    "value": "gelu_accurate._a * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/grad_multiply.py": {
        "torch": {}
    },
    "fairseq/modules/gumbel_vector_quantizer.py": {
        "torch": {
            "Parameter_55": {
                "variable": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, num_groups * num_vars, var_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_124": {
                "variable": {
                    "value": "sample_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "cb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices.size(0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(b * n,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_159": {
                "variable": {
                    "value": "hard_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hard_x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_160": {
                "variable": {
                    "value": "result[code_perplexity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(hard_probs * torch.log(hard_probs + 1e-07), dim=-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_160": {
                "variable": {
                    "value": "result[code_perplexity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_164": {
                "variable": {
                    "value": "avg_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(bsz * tsz, self.groups, -1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_164": {
                "variable": {
                    "value": "avg_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_167": {
                "variable": {
                    "value": "result[prob_perplexity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(avg_probs * torch.log(avg_probs + 1e-07), dim=-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_167": {
                "variable": {
                    "value": "result[prob_perplexity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GELU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[block(self.input_dim if i == 0 else inner_dim, inner_dim) for i in range(weight_proj_depth - 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "groups * num_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "self.codebook_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(product(*p))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.vars.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_96": {
                "variable": {
                    "value": "self.codebook_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gumbel_softmax_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "tau": {
                    "value": "self.curr_temp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "nn.Linear(input_dim, output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_dim * weight_proj_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "groups * num_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_161": {
                "input": {
                    "value": "hard_probs * torch.log(hard_probs + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "avg_probs * torch.log(avg_probs + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_161": {
                "input": {
                    "value": "hard_probs + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_168": {
                "input": {
                    "value": "avg_probs + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/kmeans_attention.py": {
        "torch": {
            "stack_239": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(-x2, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_269": {
                "variable": {
                    "value": "(_, buckets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "similarity(x, means)",
                            "Call"
                        ],
                        [
                            "dists_and_buckets(x, means)",
                            "Call"
                        ],
                        [
                            "self.kmeans(torch.cat((q, k), dim=2), update_kmeans)",
                            "Call"
                        ],
                        [
                            "self.kmeans(q, update_kmeans)",
                            "Call"
                        ],
                        [
                            "dists",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_292": {
                "variable": {
                    "value": "means_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "means_.sum(0, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_294": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "zero_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(zero_mask.unsqueeze(-1), means, means_)",
                            "Call"
                        ],
                        [
                            "means.squeeze(0)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().view(h, -1, d)",
                            "Call"
                        ],
                        [
                            "means[:, indices]",
                            "Subscript"
                        ],
                        [
                            "kmeans_iter(x, means)",
                            "Call"
                        ],
                        [
                            "self.means.type(dtype)",
                            "Call"
                        ],
                        [
                            "kmeans_iter(x, means, buckets)",
                            "Call"
                        ],
                        [
                            "means",
                            "Method Argument"
                        ],
                        [
                            "means",
                            "Method Argument"
                        ],
                        [
                            "means",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "means_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buckets.new_zeros(b, h, num_clusters, d, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "F.normalize(means_.sum(0, keepdim=True), dim=-1).type(dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.residual_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_169": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.project_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_out",
                            "Method Argument"
                        ],
                        [
                            "dim_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(dim_in, dim_in, kernel_size=kernel_size, groups=dim_in, stride=stride, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_219": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(x, '... (d j) -> ... d j', j=2)",
                            "Call"
                        ],
                        [
                            "torch.stack((-x2, x1), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.project_in(x)",
                            "Call"
                        ],
                        [
                            "self.fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.project_out(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, value=0.0)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.w1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.w1(x).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.act(x) * v",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.w2(x)",
                            "Call"
                        ],
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_227": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_seq_len",
                            "Method Argument"
                        ],
                        [
                            "max_seq_len",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_228": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, max_seq_len, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_229": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sinusoid_inp.sin(), sinusoid_inp.cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_264": {
                "equation": {
                    "value": "bhld,hcd->bhlc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(x, '... (d j) -> ... d j', j=2)",
                            "Call"
                        ],
                        [
                            "torch.stack((-x2, x1), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.project_in(x)",
                            "Call"
                        ],
                        [
                            "self.fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.project_out(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, value=0.0)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.w1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.w1(x).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.act(x) * v",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.w2(x)",
                            "Call"
                        ],
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_356": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(x, '... (d j) -> ... d j', j=2)",
                            "Call"
                        ],
                        [
                            "torch.stack((-x2, x1), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.project_in(x)",
                            "Call"
                        ],
                        [
                            "self.fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.project_out(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, value=0.0)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.w1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.w1(x).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.act(x) * v",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.w2(x)",
                            "Call"
                        ],
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_389": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_392": {
                "variable": {
                    "value": "self.mem_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_heads, num_clusters, self.num_mem_kv, head_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_393": {
                "variable": {
                    "value": "self.mem_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_heads, num_clusters, self.num_mem_kv, head_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_399": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(lambda t: t * cos + rotate_every_two(t) * sin, (q, k))",
                            "Call"
                        ],
                        [
                            "batched_index_select(q, indices)",
                            "Call"
                        ],
                        [
                            "map(reshape_with_window, (q, k, v))",
                            "Call"
                        ],
                        [
                            "self.to_q(x)",
                            "Call"
                        ],
                        [
                            "map(split_heads, (q, k, v))",
                            "Call"
                        ],
                        [
                            "apply_rotary_pos_emb(q, k, pos_emb)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "einsum_463": {
                "variable": {
                    "value": "bo",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhcij,bhcjd->bhcid",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "dots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bhnid,bhnjd->bhnij', q, k) * d ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "dots.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(dots)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_464": {
                "variable": {
                    "value": "so",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bhcij,bhcjd->bhcid', dots, v)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(b, h, -1, bo.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_485": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dim + num_dims) % num_dims",
                            "BinOp"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * mult * (2 if glu else 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_487": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_488": {
                "variable": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dim + num_dims) % num_dims",
                            "BinOp"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_548": {
                "variable": {
                    "value": "self.to_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Rearrange('b n c -> b c n')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_554": {
                "variable": {
                    "value": "self.to_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dim + num_dims) % num_dims",
                            "BinOp"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "global_dim_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_head * self.global_attn_heads",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_561": {
                "variable": {
                    "value": "self.to_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_head * heads",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dim + num_dims) % num_dims",
                            "BinOp"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_562": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_590": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_605": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index.new_zeros(shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(q, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "scatter_mean(out, so, indices.unsqueeze(-1).expand_as(so), -2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, dim=1)",
                            "Call"
                        ],
                        [
                            "out.reshape(b, h, t, -1).transpose(1, 2).reshape(b, t, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(out.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_90": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.unsqueeze(dim)",
                            "Call"
                        ],
                        [
                            "self.window_size",
                            "Attribute"
                        ],
                        [
                            "self.heads",
                            "Attribute"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "[self.fn(c, **kwargs) for c in chunks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_174": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.unsqueeze(dim)",
                            "Call"
                        ],
                        [
                            "self.window_size",
                            "Attribute"
                        ],
                        [
                            "self.heads",
                            "Attribute"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_174": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_277": {
                "input": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index",
                            "Method Argument"
                        ],
                        [
                            "index",
                            "Method Argument"
                        ],
                        [
                            "index",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "index.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_330": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "means.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_clusters,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_416": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(lambda t: t * cos + rotate_every_two(t) * sin, (q, k))",
                            "Call"
                        ],
                        [
                            "F.normalize(k, dim=-1).to(q)",
                            "Call"
                        ],
                        [
                            "batched_index_select(k, kv_indices)",
                            "Call"
                        ],
                        [
                            "map(reshape_with_window, (q, k, v))",
                            "Call"
                        ],
                        [
                            "map(lambda x: torch.cat(x, dim=3), ((m_k, k), (m_v, v)))",
                            "Call"
                        ],
                        [
                            "self.to_k(kv_input)",
                            "Call"
                        ],
                        [
                            "self.to_q(kv_input) if self.receives_context else q",
                            "IfExp"
                        ],
                        [
                            "map(split_heads, (q, k, v))",
                            "Call"
                        ],
                        [
                            "apply_rotary_pos_emb(q, k, pos_emb)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_442": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_mask[:, :, :, :, None] * kv_mask[:, :, :, None, :]",
                            "BinOp"
                        ],
                        [
                            "F.pad(mask, (self.num_mem_kv, 0), value=1)",
                            "Call"
                        ],
                        [
                            "q_mask[:, :, :, :, None] >= kv_mask[:, :, :, None, :]",
                            "Compare"
                        ],
                        [
                            "F.pad(mask, (self.num_mem_kv, 0), value=1)",
                            "Call"
                        ],
                        [
                            "q_mask[:, :, :, :, None] == kv_mask[:, :, :, None, :]",
                            "Compare"
                        ],
                        [
                            "F.pad(mask, (self.num_mem_kv, 0), value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.num_mem_kv, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_449": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_mask[:, :, :, :, None] * kv_mask[:, :, :, None, :]",
                            "BinOp"
                        ],
                        [
                            "F.pad(mask, (self.num_mem_kv, 0), value=1)",
                            "Call"
                        ],
                        [
                            "q_mask[:, :, :, :, None] >= kv_mask[:, :, :, None, :]",
                            "Compare"
                        ],
                        [
                            "F.pad(mask, (self.num_mem_kv, 0), value=1)",
                            "Call"
                        ],
                        [
                            "q_mask[:, :, :, :, None] == kv_mask[:, :, :, None, :]",
                            "Compare"
                        ],
                        [
                            "F.pad(mask, (self.num_mem_kv, 0), value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.num_mem_kv, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_456": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_mask[:, :, :, :, None] * kv_mask[:, :, :, None, :]",
                            "BinOp"
                        ],
                        [
                            "F.pad(mask, (self.num_mem_kv, 0), value=1)",
                            "Call"
                        ],
                        [
                            "q_mask[:, :, :, :, None] >= kv_mask[:, :, :, None, :]",
                            "Compare"
                        ],
                        [
                            "F.pad(mask, (self.num_mem_kv, 0), value=1)",
                            "Call"
                        ],
                        [
                            "q_mask[:, :, :, :, None] == kv_mask[:, :, :, None, :]",
                            "Compare"
                        ],
                        [
                            "F.pad(mask, (self.num_mem_kv, 0), value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.num_mem_kv, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_539": {
                "variable": {
                    "value": "self.local_to_qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dim + num_dims) % num_dims",
                            "BinOp"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * local_dim_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_557": {
                "variable": {
                    "value": "self.to_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dim + num_dims) % num_dims",
                            "BinOp"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "global_dim_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_head * self.global_attn_heads",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_169": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "in_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_out",
                            "Method Argument"
                        ],
                        [
                            "dim_out",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_214": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_215": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_out",
                            "Method Argument"
                        ],
                        [
                            "dim_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_311": {
                "*size": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_heads",
                            "Method Argument"
                        ],
                        [
                            "num_heads",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.means.shape[1]",
                            "Subscript"
                        ],
                        [
                            "max_seq_len // window_size",
                            "BinOp"
                        ],
                        [
                            "num_clusters",
                            "Method Argument"
                        ],
                        [
                            "num_clusters",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "head_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_dim",
                            "Method Argument"
                        ],
                        [
                            "head_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_312": {
                "data": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_339": {
                "data": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_362": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(x, '... (d j) -> ... d j', j=2)",
                            "Call"
                        ],
                        [
                            "torch.stack((-x2, x1), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.project_in(x)",
                            "Call"
                        ],
                        [
                            "self.fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.project_out(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, value=0.0)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.w1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.w1(x).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.act(x) * v",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.w2(x)",
                            "Call"
                        ],
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "routed_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(expand_dim(means, 0, b), buckets)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_392": {
                "*size": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_heads",
                            "Method Argument"
                        ],
                        [
                            "num_heads",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.means.shape[1]",
                            "Subscript"
                        ],
                        [
                            "max_seq_len // window_size",
                            "BinOp"
                        ],
                        [
                            "num_clusters",
                            "Method Argument"
                        ],
                        [
                            "num_clusters",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.num_mem_kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "head_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_dim",
                            "Method Argument"
                        ],
                        [
                            "head_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_393": {
                "*size": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_heads",
                            "Method Argument"
                        ],
                        [
                            "num_heads",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.means.shape[1]",
                            "Subscript"
                        ],
                        [
                            "max_seq_len // window_size",
                            "BinOp"
                        ],
                        [
                            "num_clusters",
                            "Method Argument"
                        ],
                        [
                            "num_clusters",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.num_mem_kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "head_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_dim",
                            "Method Argument"
                        ],
                        [
                            "head_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_430": {
                "equation": {
                    "value": "bhnid,bhnjd->bhnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(lambda t: t * cos + rotate_every_two(t) * sin, (q, k))",
                            "Call"
                        ],
                        [
                            "batched_index_select(q, indices)",
                            "Call"
                        ],
                        [
                            "map(reshape_with_window, (q, k, v))",
                            "Call"
                        ],
                        [
                            "self.to_q(x)",
                            "Call"
                        ],
                        [
                            "map(split_heads, (q, k, v))",
                            "Call"
                        ],
                        [
                            "apply_rotary_pos_emb(q, k, pos_emb)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_328": {
                "n": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "means.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_410": {
                "tensors": {
                    "value": "(q, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_428": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(x, '... (d j) -> ... d j', j=2)",
                            "Call"
                        ],
                        [
                            "torch.stack((-x2, x1), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.project_in(x)",
                            "Call"
                        ],
                        [
                            "self.fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.project_out(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, value=0.0)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.w1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.w1(x).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.act(x) * v",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.w2(x)",
                            "Call"
                        ],
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_473": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_226": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dim + num_dims) % num_dims",
                            "BinOp"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_435": {
                "*size": {
                    "value": "(b, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_436": {
                "*size": {
                    "value": "(b, kv_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_473": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(x, '... (d j) -> ... d j', j=2)",
                            "Call"
                        ],
                        [
                            "torch.stack((-x2, x1), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.project_in(x)",
                            "Call"
                        ],
                        [
                            "self.fn(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.project_out(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, value=0.0)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.w1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.w1(x).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.act(x) * v",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.w2(x)",
                            "Call"
                        ],
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/kmeans_vector_quantizer.py": {
        "torch": {
            "Parameter_42": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.01 * torch.randn(num_vars, num_groups, self.var_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(dim, dim, kernel_size=1, groups=groups, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_50": {
                "variable": {
                    "value": "self.mse_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_90": {
                "variable": {
                    "value": "zq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.expand_embedding[idx[..., group], group] for group in range(self.groups)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_90": {
                "variable": {
                    "value": "zq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_108": {
                "variable": {
                    "value": "hard_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hard_x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_109": {
                "variable": {
                    "value": "result[code_perplexity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(hard_probs * torch.log(hard_probs + 1e-07), dim=-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_109": {
                "variable": {
                    "value": "result[code_perplexity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_46": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "groups",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_43": {
                "*size": {
                    "value": "num_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_vars",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "groups if not combine_groups else 1",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.var_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "hard_probs * torch.log(hard_probs + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_110": {
                "input": {
                    "value": "hard_probs + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/layer_drop.py": {
        "torch": {
            "empty_41": {
                "variable": {
                    "value": "dropout_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/layer_norm.py": {
        "torch": {
            "LayerNorm_35": {
                "normalized_shape": {
                    "value": "normalized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalized_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "elementwise_affine": {
                    "value": "elementwise_affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "layer_norm_43": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.normalized_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.float() if self.weight is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.float() if self.bias is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_22": {
                "type": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/learned_positional_embedding.py": {
        "torch": {
            "embedding_53": {
                "input": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((1, 1), device=input.device, dtype=input.dtype).fill_(int(self.padding_idx + input.size(1)))",
                            "Call"
                        ],
                        [
                            "utils.make_positions(input, self.padding_idx, onnx_trace=self.onnx_trace)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/lightconv_layer/lightconv_layer.py": {
        "torch": {
            "Parameter_56": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_heads, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_buffer, x.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_108": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([input_buffer, x.unsqueeze(3)], dim=3)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(self.weight, -1)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight.float(), dim=1).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_94": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/lightconv_layer/setup.py": {
        "torch": {}
    },
    "fairseq/modules/lightweight_convolution.py": {
        "torch": {
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_heads, 1, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_123": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, H, T)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_heads, 1, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_246": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unfold1d(x, self.kernel_size, self.padding_l, 0)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, K)",
                            "Call"
                        ],
                        [
                            "torch.cat([input_buffer, x.unsqueeze(3)], dim=3)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_281": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight_expanded)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(T, B * H, R).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_175": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "x_unfold",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_buffer, x.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/linearized_convolution.py": {
        "torch": {
            "linear_79": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_linearized_weight()",
                            "Call"
                        ],
                        [
                            "self.weight.transpose(2, 1).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/multihead_attention.py": {
        "torch": {
            "bmm_332": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.q_proj(query)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_367": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_module(attn_weights)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_proj(query)",
                            "Call"
                        ],
                        [
                            "self.v_proj(key)",
                            "Call"
                        ],
                        [
                            "self.v_proj(value)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, self.bias_v.repeat(1, bsz, 1)])",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "prev_value",
                            "variable"
                        ],
                        [
                            "torch.cat([prev_value, v], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, v.new_zeros((v.size(0), 1) + v.size()[2:])], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, k.new_zeros((k.size(0), 1) + k.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, v.new_zeros((v.size(0), 1) + v.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "self.kdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "self.vdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_231": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, key_padding_mask.new_zeros(key_padding_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_318": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, torch.zeros(key_padding_mask.size(0), 1).type_as(key_padding_mask)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask.float(), key_padding_mask.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_176": {
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "(self.q_proj.bias, self.k_proj.bias, self.v_proj.bias)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_value, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_407": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, src_len - prev_key_padding_mask.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "prev_key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask.float(), filler.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_325": {
                "*size": {
                    "value": "key_padding_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_418": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, src_len - key_padding_mask.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_422": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[filler.float(), key_padding_mask.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/positional_embedding.py": {
        "torch": {}
    },
    "fairseq/modules/quant_noise.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_features // block_size * out_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(in_channels // block_size * out_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "weight.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/pq/em.py": {
        "torch": {
            "Tensor_43": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_44": {
                "variable": {
                    "value": "self.assignments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_53": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W.size()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.n_centroids,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmin_75": {
                "variable": {
                    "value": "self.assignments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_distances()",
                            "Call"
                        ],
                        [
                            "self.compute_distances()",
                            "Call"
                        ],
                        [
                            "self.compute_distances()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_175": {
                "variable": {
                    "value": "self.assignments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_distances()",
                            "Call"
                        ],
                        [
                            "self.compute_distances()",
                            "Call"
                        ],
                        [
                            "self.compute_distances()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_199": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, '{}_centroids.pth'.format(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_202": {
                "variable": {
                    "value": "self.assignments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, '{}_assignments.pth'.format(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_205": {
                "variable": {
                    "value": "self.objective",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, '{}_objective.pth'.format(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmin_117": {
                "variable": {
                    "value": "self.assignments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_distances()",
                            "Call"
                        ],
                        [
                            "self.compute_distances()",
                            "Call"
                        ],
                        [
                            "self.compute_distances()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, '{}_centroids.pth'.format(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "self.assignments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, '{}_assignments.pth'.format(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_189": {
                "obj": {
                    "value": "self.objective",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, '{}_objective.pth'.format(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_110": {
                "input": {
                    "value": "self.centroids[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "[(self.W[None, :, :] - centroids_c[:, :, None]).norm(p=2, dim=1) for centroids_c in self.centroids.chunk(nb_centroids_chunks, dim=0)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/pq/modules/qconv.py": {
        "torch": {
            "Parameter_70": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "centroids",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_92": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bincount_72": {
                "input": {
                    "value": "assignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assignments",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/modules/quantization/pq/modules/qemb.py": {
        "torch": {
            "Parameter_69": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "centroids",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "embedding_83": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bincount_71": {
                "input": {
                    "value": "assignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assignments",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/modules/quantization/pq/modules/qlinear.py": {
        "torch": {
            "Parameter_42": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "centroids",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_60": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bincount_44": {
                "input": {
                    "value": "assignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assignments",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/modules/quantization/pq/utils.py": {
        "torch": {
            "is_initialized_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_101": {
                "tensor": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quantizer.centroids.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_102": {
                "tensor": {
                    "value": "assignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quantizer.assignments.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_initialized_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/scalar/modules/qact.py": {
        "torch": {
            "zeros_like_78": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_85": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "clamp_low.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "clamp_high.item()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/scalar/modules/qconv.py": {
        "torch": {
            "zeros_like_116": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_86": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, clamp_low.item(), clamp_high.item()) + noise.detach()",
                            "BinOp"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_77": {
                "input": {
                    "value": "F.pad(input, self._padding_repeated_twice, mode=self.padding_mode)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, clamp_low.item(), clamp_high.item()) + noise.detach()",
                            "BinOp"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_124": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "clamp_low.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "clamp_high.item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_78": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "self._padding_repeated_twice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/scalar/modules/qemb.py": {
        "torch": {
            "zeros_like_110": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_123": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, clamp_low.item(), clamp_high.item()) + noise.detach()",
                            "BinOp"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_embeddings, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_118": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "clamp_low.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "clamp_high.item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/scalar/modules/qlinear.py": {
        "torch": {
            "Parameter_48": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_102": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, clamp_low.item(), clamp_high.item()) + noise.detach()",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_97": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "clamp_low.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "clamp_high.item()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/scalar/ops.py": {
        "torch": {
            "clamp_16": {
                "input": {
                    "value": "torch.round(w / scale + zero_point)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_16": {
                "input": {
                    "value": "w / scale + zero_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/scalar/utils.py": {
        "torch": {
            "is_initialized_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/same_pad.py": {
        "torch": {}
    },
    "fairseq/modules/scalar_bias.py": {
        "torch": {}
    },
    "fairseq/modules/sinusoidal_positional_embedding.py": {
        "torch": {
            "exp_46": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(half_dim, dtype=torch.float) * -emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(emb), torch.cos(emb)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb, torch.zeros(num_embeddings, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "embedding_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bsz.view(1), seq_len.view(1), torch.tensor([-1], dtype=torch.long))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_47": {
                "start": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_46": {
                "start": {
                    "value": "half_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_50": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_50": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/modules/sparse_multihead_attention.py": {
        "torch": {
            "empty_121": {
                "variable": {
                    "value": "sparse_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tgt_len, src_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/sparse_transformer_sentence_encoder.py": {
        "torch": {
            "ModuleList_71": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SparseTransformerSentenceEncoderLayer(embedding_dim=self.embedding_dim, ffn_embedding_dim=ffn_embedding_dim, num_attention_heads=num_attention_heads, dropout=dropout, attention_dropout=attention_dropout, activation_dropout=activation_dropout, activation_fn=activation_fn, export=export, is_bidirectional=is_bidirectional, stride=stride, expressivity=expressivity) for _ in range(num_encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/transformer_layer.py": {
        "torch": {
            "cat_345": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_out, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_245": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_248": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_332": {
                "variable": {
                    "value": "self_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.new_zeros(x.size(0), encoder_out.size(0)), self_attn_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "self_attn_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_padding_mask, self_attn_padding_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/transformer_sentence_encoder.py": {
        "torch": {
            "ModuleList_163": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_201": {
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_139": {
                "num_embeddings": {
                    "value": "self.num_segments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_289": {
                "tensors": {
                    "value": "inner_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/modules/transformer_sentence_encoder_layer.py": {
        "torch": {
            "Linear_86": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/modules/transpose_last.py": {
        "torch": {}
    },
    "fairseq/modules/unfold.py": {
        "torch": {
            "pad_13": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, kernel_size - 1 - padding_l), value=pad_value)",
                            "Call"
                        ],
                        [
                            "x.as_strided((T, B, C, kernel_size), (B * C, C, 1, B * C))",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, padding_l, kernel_size - 1 - padding_l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/modules/vggblock.py": {
        "torch": {
            "randn_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "sample_inchannel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_inchannel",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sample_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "per_channel_dim",
                            "variable"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "conv_op",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels if layer == 0 else out_channels",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.conv_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.conv_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "variable": {
                    "value": "pool_op",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.pooling_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_102": {
                "normalized_shape": {
                    "value": "per_channel_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[3]",
                            "Subscript"
                        ],
                        [
                            "infer_conv_output_dim(conv_op, input_dim, in_channels if layer == 0 else out_channels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/nan_detector.py": {
        "torch": {
            "is_tensor_78": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_40": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_floating_point_64": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_69": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_42": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.grad.data, p=2, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_42": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.grad.data, p=2, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_71": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_83": {
                "obj": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp[0]",
                            "Subscript"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/ngram_repeat_block.py": {
        "torch": {
            "tensor_25": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4, 4, 3, 2], [1, 2, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(8, 12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "lprobs[bbsz_idx][torch.tensor(banned_tokens[bbsz_idx], dtype=torch.int64)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-math.inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "annotate_99": {
                "the_type": {
                    "value": "Dict[str, List[int]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "annotate_143": {
                "the_type": {
                    "value": "List[int]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "annotate_122": {
                "the_type": {
                    "value": "List[int]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "banned_tokens[bbsz_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "annotate_110": {
                "the_type": {
                    "value": "List[int]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/optim/adadelta.py": {
        "torch": {}
    },
    "fairseq/optim/adafactor.py": {
        "torch": {
            "mul_166": {
                "input": {
                    "value": "r_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(exp_avg_sq_row / exp_avg_sq_row.mean(dim=-1, keepdim=True)).rsqrt_().unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_avg_sq_col.unsqueeze(-2).rsqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_199": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_201": {
                "variable": {
                    "value": "state[exp_avg_sq_row]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "state[exp_avg_sq_col]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-2] + grad_shape[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_206": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/optim/adagrad.py": {
        "torch": {}
    },
    "fairseq/optim/adam.py": {
        "torch": {
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_182": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data",
                            "Attribute"
                        ],
                        [
                            "p_data_fp32.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_184": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data",
                            "Attribute"
                        ],
                        [
                            "p_data_fp32.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_187": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data",
                            "Attribute"
                        ],
                        [
                            "p_data_fp32.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_208": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/optim/adamax.py": {
        "torch": {
            "zeros_like_135": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data",
                            "Attribute"
                        ],
                        [
                            "p_data_fp32.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_136": {
                "variable": {
                    "value": "state[exp_inf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data",
                            "Attribute"
                        ],
                        [
                            "p_data_fp32.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_151": {
                "input": {
                    "value": "exp_inf.mul_(beta2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "exp_inf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_inf']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/optim/amp_optimizer.py": {
        "torch": {
            "GradScaler_26": {
                "variable": {
                    "value": "self._grad_scaler",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isfinite_56": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fp32_optimizer.clip_grad_norm(max_norm, aggregate_norm_fn)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/optim/bmuf.py": {
        "torch": {
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_115": {
                "tensor": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "src": {
                    "value": "root_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_149": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/optim/composite.py": {
        "torch": {}
    },
    "fairseq/optim/cpu_adam.py": {
        "torch": {
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_142": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float16 if self.use_fp16_stats else p.data.dtype",
                            "IfExp"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float16 if self.use_fp16_stats else p.data.dtype",
                            "IfExp"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_floating_point_150": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_190": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/optim/fairseq_optimizer.py": {
        "torch": {
            "is_tensor_106": {
                "obj": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c.to(p.grad.device)",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/optim/fp16_optimizer.py": {
        "torch": {
            "is_tensor_24": {
                "obj": {
                    "value": "self.fp32_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "fp32_params[device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "fp32_params[device]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "p32",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "p.data.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "variable": {
                    "value": "p32.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "p32.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_176": {
                "obj": {
                    "value": "self._multiply_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_225": {
                "obj": {
                    "value": "self.fp32_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_401": {
                "obj": {
                    "value": "self._multiply_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_139": {
                "variable": {
                    "value": "p32.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_26": {
                "obj": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/optim/fused_adam.py": {
        "torch": {
            "zeros_like_184": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_186": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_198": {
                "type": {
                    "value": "p.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_285": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_287": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_312": {
                "type": {
                    "value": "p.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/optim/lr_scheduler/reduce_lr_on_plateau.py": {
        "torch": {}
    },
    "fairseq/optim/nag.py": {
        "torch": {
            "zeros_like_91": {
                "variable": {
                    "value": "param_state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/optim/sgd.py": {
        "torch": {}
    },
    "fairseq/options.py": {
        "torch": {
            "device_count_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/scoring/bleu.py": {
        "torch": {}
    },
    "fairseq/search.py": {
        "torch": {
            "tensor_26": {
                "variable": {
                    "value": "self.src_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_128": {
                "variable": {
                    "value": "top_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "min(beam_size * 2, lprobs.view(bsz, -1).size(1) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_160": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-math.inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_194": {
                "variable": {
                    "value": "top_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "min(beam_size, lprobs.view(bsz, -1).size(1) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_332": {
                "variable": {
                    "value": "top_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "self.num_cands",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_360": {
                "variable": {
                    "value": "new_scores_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 2 * beam_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_361": {
                "variable": {
                    "value": "new_indices_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 2 * beam_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_362": {
                "variable": {
                    "value": "new_beams_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 2 * beam_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_432": {
                "variable": {
                    "value": "banks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[state.bank for state in constraint_states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "masked_select_470": {
                "variable": {
                    "value": "scores_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_prediction[0]",
                            "Subscript"
                        ],
                        [
                            "top_prediction[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((scores_buf, top_scores), dim=1)",
                            "Call"
                        ],
                        [
                            "scores_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(scores_buf, uniques_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((scores_buf, next_values))",
                            "Call"
                        ],
                        [
                            "scores_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "scores_buf[:self.num_cands]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(scores_G, dim=2).view(bsz, -1)",
                            "Call"
                        ],
                        [
                            "self.beam.step(step, lprobs_g, scores_g)",
                            "Call"
                        ],
                        [
                            "torch.gather(probs, dim=2, index=indices_buf.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "scores_buf.log_().view(bsz, -1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "uniques_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beams_buf * (self.vocab_size + 1) + indices_buf",
                            "BinOp"
                        ],
                        [
                            "roll(uniques_mask) != uniques_mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "masked_select_471": {
                "variable": {
                    "value": "indices_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices_buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_prediction[1]",
                            "Subscript"
                        ],
                        [
                            "indices_buf.fmod(vocab_size)",
                            "Call"
                        ],
                        [
                            "top_prediction[1]",
                            "Subscript"
                        ],
                        [
                            "indices_buf.fmod(vocab_size)",
                            "Call"
                        ],
                        [
                            "indices_buf.fmod(vocab_size)",
                            "Call"
                        ],
                        [
                            "torch.cat((indices_buf, top_indices), dim=1)",
                            "Call"
                        ],
                        [
                            "indices_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(indices_buf, uniques_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((indices_buf, next_tokens))",
                            "Call"
                        ],
                        [
                            "indices_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "indices_buf[:self.num_cands]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(indices_G, dim=2).view(bsz, -1)",
                            "Call"
                        ],
                        [
                            "self.beam.step(step, lprobs_g, scores_g)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(probs.view(bsz, -1), beam_size, replacement=True).view(bsz, beam_size)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(probs.view(bsz * beam_size, -1), 1, replacement=True).view(bsz, beam_size)",
                            "Call"
                        ],
                        [
                            "torch.gather(top_indices.expand(bsz, beam_size, -1), dim=2, index=indices_buf.unsqueeze(-1)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "uniques_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beams_buf * (self.vocab_size + 1) + indices_buf",
                            "BinOp"
                        ],
                        [
                            "roll(uniques_mask) != uniques_mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "masked_select_472": {
                "variable": {
                    "value": "beams_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beams_buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_buf // vocab_size",
                            "BinOp"
                        ],
                        [
                            "indices_buf // vocab_size",
                            "BinOp"
                        ],
                        [
                            "indices_buf // vocab_size",
                            "BinOp"
                        ],
                        [
                            "torch.cat((beams_buf, new_beams), dim=1)",
                            "Call"
                        ],
                        [
                            "beams_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(beams_buf, uniques_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((beams_buf, next_beams))",
                            "Call"
                        ],
                        [
                            "beams_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "beams_buf[:self.num_cands]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(beams_G, dim=2).view(bsz, -1)",
                            "Call"
                        ],
                        [
                            "self.beam.step(step, lprobs_g, scores_g)",
                            "Call"
                        ],
                        [
                            "indices_buf.new_zeros(bsz, beam_size)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, beam_size).to(indices_buf).repeat(bsz, 1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "uniques_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beams_buf * (self.vocab_size + 1) + indices_buf",
                            "BinOp"
                        ],
                        [
                            "roll(uniques_mask) != uniques_mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "masked_select_473": {
                "variable": {
                    "value": "banks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "banks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([state.bank for state in constraint_states], device=device)",
                            "Call"
                        ],
                        [
                            "banks[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(banks, uniques_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "uniques_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beams_buf * (self.vocab_size + 1) + indices_buf",
                            "BinOp"
                        ],
                        [
                            "roll(uniques_mask) != uniques_mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "zeros_like_500": {
                "variable": {
                    "value": "stripes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "banks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([state.bank for state in constraint_states], device=device)",
                            "Call"
                        ],
                        [
                            "banks[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(banks, uniques_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_583": {
                "variable": {
                    "value": "diversity_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lprobs[:, 0, :].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_615": {
                "variable": {
                    "value": "scores_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_616": {
                "variable": {
                    "value": "indices_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indices_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_617": {
                "variable": {
                    "value": "beams_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "beams_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_722": {
                "variable": {
                    "value": "scores_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.exp_()",
                            "Call"
                        ],
                        [
                            "self._sample_topp(lprobs)",
                            "Call"
                        ],
                        [
                            "lprobs.exp_()",
                            "Call"
                        ],
                        [
                            "lprobs.exp_()",
                            "Call"
                        ],
                        [
                            "probs.expand(bsz, beam_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices_buf.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_799": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "i_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.LongTensor().to(device=lprobs.device) for i in range(beam_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_801": {
                "variable": {
                    "value": "final_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_804": {
                "variable": {
                    "value": "(final_scores, final_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(s_list, dim=1).view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(beam_size * 2, lprobs.view(bsz, -1).size(1) - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "not_finished_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "not_finished_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(not_finished_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_347": {
                "variable": {
                    "value": "(top_scores, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.view(batch_size * beam_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "each_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "scores_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scores_buf, top_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "indices_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(indices_buf, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_356": {
                "variable": {
                    "value": "new_beams",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "x.shape[0] // original_batch_idxs.shape[0]",
                            "BinOp"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_357": {
                "variable": {
                    "value": "beams_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(beams_buf, new_beams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_400": {
                "variable": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(state.next_tokens())",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "multinomial_705": {
                "variable": {
                    "value": "indices_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "x.shape[0] // original_batch_idxs.shape[0]",
                            "BinOp"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multinomial_711": {
                "variable": {
                    "value": "indices_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs.view(bsz * beam_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_727": {
                "variable": {
                    "value": "indices_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_indices.expand(bsz, beam_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices_buf.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_727": {
                "variable": {
                    "value": "indices_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_736": {
                "variable": {
                    "value": "beams_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "x.shape[0] // original_batch_idxs.shape[0]",
                            "BinOp"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ],
                        [
                            "lprobs.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_402": {
                "variable": {
                    "value": "indices_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(indices_buf, next_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_404": {
                "variable": {
                    "value": "next_beams",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "beamno",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beamno in enumerate(sent_constraints)",
                            "Call"
                        ],
                        [
                            "beamno in enumerate(constraint_states)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_408": {
                "variable": {
                    "value": "beams_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(beams_buf, next_beams)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_410": {
                "variable": {
                    "value": "scores_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scores_buf, next_values)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_460": {
                "tensors": {
                    "value": "(t[-1].unsqueeze(0), t[0:-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_592": {
                "variable": {
                    "value": "lprobs_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lprobs[:, g::self.num_groups, :]",
                            "Subscript"
                        ],
                        [
                            "torch.add(lprobs_g, other=diversity_buf.unsqueeze(1), alpha=self.diversity_strength)",
                            "Call"
                        ],
                        [
                            "lprobs_g.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "diversity_buf.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.diversity_strength",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_702": {
                "variable": {
                    "value": "top_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_782": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_784": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_792": {
                "input": {
                    "value": "lprobs[:, i, :].view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(beam_size * 2, lprobs.view(bsz, -1).size(1) - 1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "(s_list[i], i_list[i])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_805": {
                "tensors": {
                    "value": "s_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty(0).to(lprobs) for i in range(beam_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_611": {
                "*size": {
                    "value": "indices_buf.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_739": {
                "input": {
                    "value": "scores[:, :, step - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "beams_buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_buf // vocab_size",
                            "BinOp"
                        ],
                        [
                            "indices_buf // vocab_size",
                            "BinOp"
                        ],
                        [
                            "indices_buf // vocab_size",
                            "BinOp"
                        ],
                        [
                            "torch.cat((beams_buf, new_beams), dim=1)",
                            "Call"
                        ],
                        [
                            "beams_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(beams_buf, uniques_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((beams_buf, next_beams))",
                            "Call"
                        ],
                        [
                            "beams_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "beams_buf[:self.num_cands]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(beams_G, dim=2).view(bsz, -1)",
                            "Call"
                        ],
                        [
                            "self.beam.step(step, lprobs_g, scores_g)",
                            "Call"
                        ],
                        [
                            "indices_buf.new_zeros(bsz, beam_size)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, beam_size).to(indices_buf).repeat(bsz, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/sequence_generator.py": {
        "torch": {
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "annotate_196": {
                "variable": {
                    "value": "incremental_states",
                    "type": "variable",
                    "possible_values": []
                },
                "the_type": {
                    "value": "List[Dict[str, Dict[str, Optional[Tensor]]]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[torch.jit.annotate(Dict[str, Dict[str, Optional[Tensor]]], {}) for i in range(self.model.models_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_256": {
                "variable": {
                    "value": "new_order",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_bsz",
                            "variable"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_280": {
                "variable": {
                    "value": "cands_to_ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_bsz",
                            "variable"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eq_280": {
                "variable": {
                    "value": "cands_to_ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "annotate_284": {
                "variable": {
                    "value": "finalized",
                    "type": "variable",
                    "possible_values": []
                },
                "the_type": {
                    "value": "List[List[Dict[str, Tensor]]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[torch.jit.annotate(List[Dict[str, Tensor]], []) for i in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_303": {
                "variable": {
                    "value": "cand_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "cand_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * beam_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_570": {
                "variable": {
                    "value": "lprobs[prefix_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-math.inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_742": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models",
                            "Method Argument"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_896": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_312": {
                "variable": {
                    "value": "original_batch_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_bsz",
                            "variable"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_346": {
                "variable": {
                    "value": "lprobs[lprobs != lprobs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-math.inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_378": {
                "variable": {
                    "value": "eos_bbsz_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_381": {
                "variable": {
                    "value": "eos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_408": {
                "variable": {
                    "value": "eos_mask[:, :beam_size][cands_to_ignore]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_413": {
                "variable": {
                    "value": "eos_bbsz_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_bbsz_idx[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "eos_mask[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "cand_indices.eq(self.eos) & cand_scores.ne(-math.inf)",
                            "BinOp"
                        ],
                        [
                            "eos_mask[batch_idxs]",
                            "Subscript"
                        ],
                        [
                            "prefix_toks.eq(self.eos)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_492": {
                "variable": {
                    "value": "active_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eos_mask.type_as(cand_offsets) * cand_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "cand_offsets[:eos_mask.size(1)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "topk_502": {
                "variable": {
                    "value": "(new_cands_to_ignore, active_hypos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "active_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(eos_mask.type_as(cand_offsets) * cand_size, cand_offsets[:eos_mask.size(1)])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_515": {
                "variable": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cand_beams.add(bbsz_offsets)",
                            "Call"
                        ],
                        [
                            "cand_beams.add(bbsz_offsets)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(active_mask, k=beam_size, dim=1, largest=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_516": {
                "variable": {
                    "value": "active_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search.step(step, lprobs.view(bsz, -1, self.vocab_size), scores.view(bsz, beam_size, -1)[:, :, :step], tokens[:, :step + 1], original_batch_idxs)",
                            "Call"
                        ],
                        [
                            "cand_scores[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(active_mask, k=beam_size, dim=1, largest=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_524": {
                "variable": {
                    "value": "tokens[:, :step + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens[:, :step + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(cand_bbsz_idx, dim=1, index=active_hypos)",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_528": {
                "variable": {
                    "value": "tokens.view(bsz, beam_size, -1)[:, :, step + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search.step(step, lprobs.view(bsz, -1, self.vocab_size), scores.view(bsz, beam_size, -1)[:, :, :step], tokens[:, :step + 1], original_batch_idxs)",
                            "Call"
                        ],
                        [
                            "cand_indices[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(active_mask, k=beam_size, dim=1, largest=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_535": {
                "variable": {
                    "value": "scores.view(bsz, beam_size, -1)[:, :, step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search.step(step, lprobs.view(bsz, -1, self.vocab_size), scores.view(bsz, beam_size, -1)[:, :, :step], tokens[:, :step + 1], original_batch_idxs)",
                            "Call"
                        ],
                        [
                            "cand_scores[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(active_mask, k=beam_size, dim=1, largest=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_553": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(elem['score'].item()) for elem in finalized[sent]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sort_556": {
                "variable": {
                    "value": "(_, sorted_scores_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(bsz * beam_size, max_len + 1).to(src_tokens).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor([float(elem['score'].item()) for elem in finalized[sent]])",
                            "Call"
                        ],
                        [
                            "self._prefix_tokens(step, lprobs, scores, tokens, prefix_tokens, beam_size)",
                            "Call"
                        ],
                        [
                            "scores.type_as(lprobs)",
                            "Call"
                        ],
                        [
                            "scores.view(bsz, -1)[batch_idxs].view(new_bsz * beam_size, -1)",
                            "Call"
                        ],
                        [
                            "self.replicate_first_beam(scores, eos_mask_batch_dim, beam_size)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "annotate_558": {
                "variable": {
                    "value": "finalized[sent]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_type": {
                    "value": "List[Dict[str, Tensor]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "finalized[sent]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "masked_select_419": {
                "variable": {
                    "value": "eos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_scores[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "eos_mask[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "cand_indices.eq(self.eos) & cand_scores.ne(-math.inf)",
                            "BinOp"
                        ],
                        [
                            "eos_mask[batch_idxs]",
                            "Subscript"
                        ],
                        [
                            "prefix_toks.eq(self.eos)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_451": {
                "variable": {
                    "value": "batch_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_bsz",
                            "variable"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cand_indices.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_456": {
                "variable": {
                    "value": "batch_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_bsz",
                            "variable"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "cand_indices.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_456": {
                "variable": {
                    "value": "batch_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(bsz, dtype=torch.bool, device=cand_indices.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_532": {
                "variable": {
                    "value": "scores[:, :step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, :step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(cand_bbsz_idx, dim=1, index=active_hypos)",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_544": {
                "variable": {
                    "value": "attn[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "attn[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(cand_bbsz_idx, dim=1, index=active_hypos)",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_679": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "-math.inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_828": {
                "input": {
                    "value": "torch.stack(log_probs, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "annotate_199": {
                "the_type": {
                    "value": "Dict[str, Dict[str, Optional[Tensor]]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "annotate_286": {
                "the_type": {
                    "value": "List[Dict[str, Tensor]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_372": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "avg_attn_scores.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "max_len + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_688": {
                "variable": {
                    "value": "hypo_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_828": {
                "tensors": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "data": {
                    "value": "src_tokens.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_223": {
                "data": {
                    "value": "src_tokens.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_319": {
                "start": {
                    "value": "batch_idxs.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_695": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_298": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_bsz",
                            "variable"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/sequence_scorer.py": {
        "torch": {
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_101": {
                "obj": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_out[1] if len(decoder_out) > 1 else None",
                            "IfExp"
                        ],
                        [
                            "attn.get('attn', None)",
                            "Call"
                        ],
                        [
                            "attn.data",
                            "Attribute"
                        ],
                        [
                            "attn[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/tasks/audio_pretraining.py": {
        "torch": {}
    },
    "fairseq/tasks/fairseq_task.py": {
        "torch": {
            "no_grad_505": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_520": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_495": {
                "enabled": {
                    "value": "isinstance(optimizer, AMPOptimizer)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tasks/language_modeling.py": {
        "torch": {
            "no_grad_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tasks/multilingual_masked_lm.py": {
        "torch": {}
    },
    "fairseq/tasks/multilingual_translation.py": {
        "torch": {
            "no_grad_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tasks/online_backtranslation.py": {
        "torch": {
            "no_grad_589": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_451": {
                "variable": {
                    "value": "n_src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(generated), max_lngth + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "net_input['src_tokens'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_454": {
                "variable": {
                    "value": "n_src_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(generated)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "net_input['src_lengths'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_549": {
                "variable": {
                    "value": "source_lang_token_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net_input['src_tokens'][:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_598": {
                "variable": {
                    "value": "emb.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(new_vocab_size, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_617": {
                "variable": {
                    "value": "new_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(new_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "old_bias.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "old_bias.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_462": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens.new([bos_token]), tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_463": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gn[0]['tokens']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([tokens.new([bos_token]), tokens])",
                            "Call"
                        ],
                        [
                            "F.pad(tokens, (0, padding_needed), value=self.dictionary.pad())",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding_needed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.dictionary.pad()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tasks/translation.py": {
        "torch": {
            "is_tensor_403": {
                "obj": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((log.get(key, 0) for log in logging_outputs))",
                            "Call"
                        ],
                        [
                            "result.cpu()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/tasks/translation_from_pretrained_bart.py": {
        "torch": {
            "cat_123": {
                "variable": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s_t, s_t.new(1).fill_(src_lang_id)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tasks/translation_lev.py": {
        "torch": {
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tasks/translation_multi_simple_epoch.py": {
        "torch": {
            "no_grad_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/token_generation_constraints.py": {
        "torch": {
            "zeros_82": {
                "variable": {
                    "value": "constraints_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_constraints_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/trainer.py": {
        "torch": {
            "device_58": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_106": {
                "variable": {
                    "value": "self.last_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.distributed_training.pipeline_devices[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_755": {
                "obj": {
                    "value": "sample_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "sample_size * 0.0",
                            "BinOp"
                        ],
                        [
                            "sample_size.float()",
                            "Call"
                        ],
                        [
                            "float(sample_size)",
                            "Call"
                        ],
                        [
                            "self.task.valid_step(sample, self.model, self.criterion)",
                            "Call"
                        ],
                        [
                            "sample_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_62": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_tensor_750": {
                "obj": {
                    "value": "sample_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "sample_size * 0.0",
                            "BinOp"
                        ],
                        [
                            "sample_size.float()",
                            "Call"
                        ],
                        [
                            "float(sample_size)",
                            "Call"
                        ],
                        [
                            "self.task.valid_step(sample, self.model, self.criterion)",
                            "Call"
                        ],
                        [
                            "sample_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_856": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_962": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_1212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_1310": {
                "variable": {
                    "value": "max_abs_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(tensor - tensor[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_989": {
                "obj": {
                    "value": "sample_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "sample_size * 0.0",
                            "BinOp"
                        ],
                        [
                            "sample_size.float()",
                            "Call"
                        ],
                        [
                            "float(sample_size)",
                            "Call"
                        ],
                        [
                            "self.task.valid_step(sample, self.model, self.criterion)",
                            "Call"
                        ],
                        [
                            "sample_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_initialized_1112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_1213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_1340": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).cuda()",
                            "Call"
                        ],
                        [
                            "self.clip_grad_norm(self.cfg.optimization.clip_norm)",
                            "Call"
                        ],
                        [
                            "grad_norm",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_723": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_813": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).cuda()",
                            "Call"
                        ],
                        [
                            "self.clip_grad_norm(self.cfg.optimization.clip_norm)",
                            "Call"
                        ],
                        [
                            "grad_norm",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_813": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_peak_memory_stats_915": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_936": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_summary_1214": {
                "device": {
                    "value": "device_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_idx in range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_1310": {
                "input": {
                    "value": "tensor - tensor[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_1340": {
                "obj": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).cuda()",
                            "Call"
                        ],
                        [
                            "self.clip_grad_norm(self.cfg.optimization.clip_norm)",
                            "Call"
                        ],
                        [
                            "grad_norm",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_1347": {
                "condition": {
                    "value": "grad_norm > self.cfg.optimization.clip_norm",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_norm.new_tensor(100)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_norm.new_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_1282": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_lr.items()",
                            "Call"
                        ],
                        [
                            "sum((log[k] for log in logging_outputs if k in log))",
                            "Call"
                        ],
                        [
                            "logging_outputs[0][k]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(v) if torch.is_tensor(v) else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_1282": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_lr.items()",
                            "Call"
                        ],
                        [
                            "sum((log[k] for log in logging_outputs if k in log))",
                            "Call"
                        ],
                        [
                            "logging_outputs[0][k]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(v) if torch.is_tensor(v) else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "isfinite_1312": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_1312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_capability_295": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_device_capability_312": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_735": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_1315": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_1315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_914": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_983": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/utils.py": {
        "torch": {
            "empty_288": {
                "variable": {
                    "value": "buffered",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_333": {
                "variable": {
                    "value": "total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(norms)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "remainder_294": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range - num_pads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "remainder_296": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range + num_pads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_359": {
                "variable": {
                    "value": "total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grads[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_587": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_588": {
                "variable": {
                    "value": "state[cuda_rng_state]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_rng_state_593": {
                "new_state": {
                    "value": "state['torch_rng_state']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_596": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_690": {
                "start": {
                    "value": "size[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_736": {
                "variable": {
                    "value": "cur_device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_properties_737": {
                "variable": {
                    "value": "prop",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "'cuda:{}'.format(cur_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_82": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(x)",
                            "Call"
                        ],
                        [
                            "eval(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "current_device_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_195": {
                "variable": {
                    "value": "embed_dict[pieces[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_269": {
                "start": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "buffered_arange.buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_290": {
                "start": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "buffered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_302": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.mul(tensor, ~indices) + torch.mul(value, indices)",
                            "BinOp"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_325": {
                "variable": {
                    "value": "has_inf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device or torch.cuda.current_device()",
                            "BoolOp"
                        ],
                        [
                            "xm.xla_device()",
                            "Call"
                        ],
                        [
                            "grad.device",
                            "Attribute"
                        ],
                        [
                            "per_device_grads.keys()",
                            "Call"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "grads[0].device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "xm.xla_device()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_333": {
                "tensors": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "norms + [torch.norm(g, p=2, dtype=torch.float32) for g in cur_device_grads]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_374": {
                "variable": {
                    "value": "total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([torch.norm(g, p=2, dtype=torch.float32).to(device) for g in grads])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_505": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_507": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(x)",
                            "Call"
                        ],
                        [
                            "eval(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_512": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_514": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(x)",
                            "Call"
                        ],
                        [
                            "eval(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_rng_state_584": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_rng_state_597": {
                "new_state": {
                    "value": "state['cuda_rng_state']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_605": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_608": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_713": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.mul(tensor, ~indices) + torch.mul(value, indices)",
                            "BinOp"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_356": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_369": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_609": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_722": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "indices.expand_as(tensor)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_326": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device or torch.cuda.current_device()",
                            "BoolOp"
                        ],
                        [
                            "xm.xla_device()",
                            "Call"
                        ],
                        [
                            "grad.device",
                            "Attribute"
                        ],
                        [
                            "per_device_grads.keys()",
                            "Call"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "grads[0].device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "xm.xla_device()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_332": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads + expert_grads",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_373": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_375": {
                "tensors": {
                    "value": "[torch.norm(g, p=2, dtype=torch.float32).to(device) for g in grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cumsum_257": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.ne(padding_idx).int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_376": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads + expert_grads",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq_cli/eval_lm.py": {
        "torch": {
            "is_available_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_265": {
                "device": {
                    "value": "cfg.distributed_training.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq_cli/generate.py": {
        "torch": {
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq_cli/hydra_train.py": {
        "torch": {
            "profile_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "emit_nvtx_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq_cli/interactive.py": {
        "torch": {
            "is_available_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq_cli/train.py": {
        "torch": {
            "profile_503": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "emit_nvtx_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq_cli/validate.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_46": {
                "device": {
                    "value": "cfg.distributed_training.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/average_checkpoints.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "files",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda s, _: torch.serialization.default_restore_location(s, 'cpu')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "state",
                            "variable"
                        ],
                        [
                            "average_checkpoints(args.inputs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "files",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "setup.py": {
        "torch": {}
    },
    "tests/distributed/test_bmuf.py": {
        "torch": {
            "CrossEntropyLoss_39": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "variable": {
                    "value": "is_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_71": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_72": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_66": {
                "device": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank",
                            "Method Argument"
                        ],
                        [
                            "rank",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_84": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(results, param.flatten().cpu().data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributed/test_distributed_timeout_wrapper.py": {
        "torch": {
            "rand_38": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_43": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_49": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributed/test_module_proxy_wrapper.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_65": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_70": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributed/test_utils.py": {
        "torch": {
            "tensor_117": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_40": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_83": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_54": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_55": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_97": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_98": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_51": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_52": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_53": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_94": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_95": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_96": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributed/utils.py": {
        "torch": {
            "set_device_31": {
                "device": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank",
                            "Method Argument"
                        ],
                        [
                            "rank",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_54": {
                "obj": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_59": {
                "input": {
                    "value": "a == b",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tests/gpu/test_binaries_gpu.py": {
        "torch": {
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/speech_recognition/asr_test_base.py": {
        "torch": {
            "randn_76": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(low=1, high=T, size=B, dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "encoder_out[encoder_out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(*encoder_out_shape).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(low=1, high=T, size=B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_116": {
                "start": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_484": {
                "input": {
                    "value": "torch.div(net_output['encoder_out'], 1 - net_output['encoder_out'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_530": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_534": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 10, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_542": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_546": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(low=0, high=K, size=token_length, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "div_485": {
                "input": {
                    "value": "net_output['encoder_out']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - net_output['encoder_out']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_313": {
                "obj": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_314": {
                "obj": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_381": {
                "obj": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_382": {
                "obj": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_554": {
                "data": {
                    "value": "[L]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/speech_recognition/test_collaters.py": {
        "torch": {
            "tensor_33": {
                "data": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [pad_idx, pad_idx]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[[eos_idx, 3, 2, pad_idx], [eos_idx, 4, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "[[3, 2, eos_idx, pad_idx], [4, 2, 3, eos_idx]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/speech_recognition/test_data_utils.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "sample_len1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.7661, -1.3889, -2.0972, -0.9134, -0.7071, -0.9765, -0.87, -0.8283, 0.7512, 1.3211, 2.1532, 2.1174, 1.28, 1.2633, 1.6147, 1.6322, 2.0723, 3.1522, 3.2852, 2.2309, 2.5569, 2.2183, 2.2862, 1.5886, 0.8773, 0.8725, 1.2662, 0.9899, 1.1069, 1.3926, 1.2795, 1.1199, 1.1477, 1.2687, 1.3843, 1.1903, 0.8355, 1.1367, 1.2639, 1.4707]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isnan_61": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.apply_mv_norm(sample_len1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_activation_checkpointing.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(32, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_43": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_47": {
                "variable": {
                    "value": "gnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([torch.norm(p.grad.detach()) for p in model.parameters()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_42": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_48": {
                "tensors": {
                    "value": "[torch.norm(p.grad.detach()) for p in model.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_71": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_75": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_48": {
                "input": {
                    "value": "p.grad.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_amp_optimizer.py": {
        "torch": {
            "tensor_18": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.x * weight + bias + self.error]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "L1Loss_23": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "self.model.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[weight]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "self.model.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradScaler_40": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init_scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "growth_interval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "[[3.1]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[5.1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_average_checkpoints.py": {
        "torch": {
            "Embedding_21": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.FC1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.FC2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.FC2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.FC1.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.FC2.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.FC1.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_61": {
                "obj": {
                    "value": "collections.OrderedDict([('model', params_0)])",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mkstemp()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_62": {
                "obj": {
                    "value": "collections.OrderedDict([('model', params_1)])",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mkstemp()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_92": {
                "obj": {
                    "value": "{'model': m.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdir, 'm1.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'm2.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'm3.pt')",
                            "Call"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_111": {
                "input": {
                    "value": "new_model['model']['embedding.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.embedding.weight + m2.embedding.weight + m3.embedding.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_118": {
                "input": {
                    "value": "new_model['model']['FC1.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.FC1.weight + m2.FC1.weight + m3.FC1.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_125": {
                "input": {
                    "value": "new_model['model']['FC2.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.FC2.weight + m2.FC2.weight + m3.FC2.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_backtranslation_dataset.py": {
        "torch": {
            "is_available_32": {
                "variable": {
                    "value": "self.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "backtranslation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BacktranslationDataset(tgt_dataset=TransformEosDataset(dataset=tgt_dataset, eos=self.tgt_dict.eos(), remove_eos_from_src=remove_eos_from_input_src), src_dict=self.tgt_dict, backtranslation_fn=lambda sample: generator.generate([self.model], sample), output_collater=TransformEosDataset(dataset=tgt_dataset, eos=self.tgt_dict.eos(), append_eos_to_tgt=remove_eos_from_input_src, remove_eos_from_src=remove_eos_from_output_src).collater, cuda=self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "backtranslation_dataset.collater",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_binaries.py": {
        "torch": {
            "rand_1747": {
                "variable": {
                    "value": "random_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_examples * maxlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_1750": {
                "variable": {
                    "value": "output_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_examples, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_1748": {
                "input": {
                    "value": "26 * random_data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_1752": {
                "input": {
                    "value": "num_classes * torch.rand(num_examples)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_1752": {
                "*size": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_character_token_embedder.py": {
        "torch": {}
    },
    "tests/test_concat_dataset.py": {
        "torch": {}
    },
    "tests/test_constraints.py": {
        "torch": {
            "tensor_14": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_47": {
                "input": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pack_constraints(batch_constraints)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.examples",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[[0], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "[[3, 3, 1, 2, 0, 3, 0, 4, 5, 6, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 8, 9, 10, 1, 4, 11, 12, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "[3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "data": {
                    "value": "[4, 5, 6, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "[1, 8, 9, 10, 1, 4, 11, 12]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_convtbc.py": {
        "torch": {
            "Conv1d_18": {
                "variable": {
                    "value": "conv1d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_23": {
                "variable": {
                    "value": "input_tbc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "grad_tbc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_tbc.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_dictionary.py": {
        "torch": {}
    },
    "tests/test_export.py": {
        "torch": {
            "script_70": {
                "variable": {
                    "value": "scripted",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention.MultiheadAttention(embed_dim=8, num_heads=2)",
                            "Call"
                        ],
                        [
                            "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding(embedding_dim=8, padding_idx=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_75": {
                "variable": {
                    "value": "module1",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "module1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention.MultiheadAttention(embed_dim=8, num_heads=2)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(module1)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_77": {
                "variable": {
                    "value": "module2",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "module2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention.MultiheadAttention(embed_dim=8, num_heads=2)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(module2)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_92": {
                "variable": {
                    "value": "scripted",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention.MultiheadAttention(embed_dim=8, num_heads=2)",
                            "Call"
                        ],
                        [
                            "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding(embedding_dim=8, padding_idx=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_103": {
                "variable": {
                    "value": "scripted",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformerModel.build_model(args, task)",
                            "Call"
                        ],
                        [
                            "TransformerModel.build_model(args, task)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_115": {
                "variable": {
                    "value": "scripted",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformerModel.build_model(args, task)",
                            "Call"
                        ],
                        [
                            "TransformerModel.build_model(args, task)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_64": {
                "f": {
                    "value": "f.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_fp16_optimizer.py": {
        "torch": {
            "tensor_19": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.x * weight + bias + self.error]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "L1Loss_24": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "self.model.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[weight]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "self.model.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_64": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "[[3.0996]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "[5.1016]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "all_92": {
                "input": {
                    "value": "fp32_params.eq(torch.tensor([3.1, 5.1], device='cuda:0', requires_grad=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "[3.1, 5.1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_label_smoothing.py": {
        "torch": {
            "unsqueeze_48": {
                "variable": {
                    "value": "self.args.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_lm_context_window.py": {
        "torch": {
            "tensor_22": {
                "data": {
                    "value": "[4, 5, 6, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[8, 9, 10, 11]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[12, 13]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_lstm_jitable.py": {
        "torch": {
            "script_80": {
                "variable": {
                    "value": "scripted_model",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSTMModel.build_model(args, task)",
                            "Call"
                        ],
                        [
                            "LSTMModel.build_model(args, task)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_90": {
                "variable": {
                    "value": "scripted_model",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSTMModel.build_model(args, task)",
                            "Call"
                        ],
                        [
                            "LSTMModel.build_model(args, task)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_95": {
                "variable": {
                    "value": "seq_len_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(iter,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_96": {
                "variable": {
                    "value": "num_samples_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(iter,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_101": {
                "variable": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "seq_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sort_102": {
                "variable": {
                    "value": "(src_lengths, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(1, seq_len + 1, (num_samples,))",
                            "Call"
                        ],
                        [
                            "torch.sort(src_lengths, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_66": {
                "f": {
                    "value": "f.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_69": {
                "input": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t1[~torch.isnan(t1)]",
                            "Subscript"
                        ],
                        [
                            "t1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isnan_70": {
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t2[~torch.isnan(t2)]",
                            "Subscript"
                        ],
                        [
                            "t2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_100": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(task.source_dictionary)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_samples, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_105": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(task.source_dictionary)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_memory_efficient_fp16.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_73": {
                "obj": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_63": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_multi_corpus_dataset.py": {
        "torch": {}
    },
    "tests/test_multi_corpus_sampled_dataset.py": {
        "torch": {}
    },
    "tests/test_multihead_attention.py": {
        "torch": {
            "tensor_22": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[[0, 0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[[0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "[[0, 1, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "[[0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "[[0, 1, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "[[0, 1, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "[[0, 1, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[[0, 1, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "[[0, 1, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_62": {
                "input": {
                    "value": "torch.eq(key_padding_mask, c[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_62": {
                "input": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiheadAttention._append_prev_key_padding_mask(c[0], c[1], batch_size=bsz, src_len=src_len, static_kv=False)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_noising.py": {
        "torch": {
            "DataLoader_444": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "language_pair_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LanguagePairDataset(src=noising_dataset, tgt=tgt, src_sizes=None, src_dict=src_dict)",
                            "Call"
                        ],
                        [
                            "TransformEosDataset(language_pair_dataset, src_dict.eos(), append_eos_to_tgt=append_eos_to_tgt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "language_pair_dataset.collater",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_458": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[['he@@', 'llo', 'n@@', 'ew', 'y@@', 'or@@', 'k'], ['how', 'are', 'y@@', 'ou']]",
                            "List"
                        ],
                        [
                            "[['he', 'llo_EOW', 'n', 'ew_EOW', 'y', 'or', 'k_EOW'], ['how_EOW', 'are_EOW', 'y', 'ou_EOW']]",
                            "List"
                        ],
                        [
                            "[['hello', 'new', 'york', 'you'], ['how', 'are', 'you', 'new', 'york']]",
                            "List"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=True)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=False)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_495": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[['he@@', 'llo', 'n@@', 'ew', 'y@@', 'or@@', 'k'], ['how', 'are', 'y@@', 'ou']]",
                            "List"
                        ],
                        [
                            "[['he', 'llo_EOW', 'n', 'ew_EOW', 'y', 'or', 'k_EOW'], ['how_EOW', 'are_EOW', 'y', 'ou_EOW']]",
                            "List"
                        ],
                        [
                            "[['hello', 'new', 'york', 'you'], ['how', 'are', 'you', 'new', 'york']]",
                            "List"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=True)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=False)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_online_backtranslation.py": {
        "torch": {
            "stack_19": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(tokens, dtype=torch.long)] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randint_34": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_35": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[len(tokens)] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_reproducibility.py": {
        "torch": {
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_roberta.py": {
        "torch": {
            "stack_87": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(tok, dtype=torch.long)] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_70": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "[len(tok)] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "tok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 11, 12, 13, 14, 15, 2]",
                            "List"
                        ],
                        [
                            "[20, 21, 22, 23, 24, 25, 26, 27, 2]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sequence_generator.py": {
        "torch": {
            "randint_73": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_tokens, torch.LongTensor([[eos], [eos]]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_86": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "script_132": {
                "variable": {
                    "value": "scripted_model",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequenceGenerator([model], self.task.tgt_dict, beam_size=2, no_repeat_ngram_size=2, max_len_b=10)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, normalize_scores=False)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, len_penalty=lenpen)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, len_penalty=lenpen)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, max_len_b=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([reshaping_model], self.tgt_dict, beam_size=2, max_len_b=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([add_input_model], self.tgt_dict, beam_size=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_172": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_346": {
                "variable": {
                    "value": "generated_tok",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 2, 2, 2], [3, 3, 3, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_349": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(beam_size * bsz, vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_363": {
                "variable": {
                    "value": "generated_tok",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 2, 2, 2], [3, 3, 3, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_366": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(beam_size * bsz, vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "script_369": {
                "variable": {
                    "value": "scripted_blocker",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "blocker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NGramRepeatBlock(2, use_extension=False)",
                            "Call"
                        ],
                        [
                            "NGramRepeatBlock(block_param)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_528": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_727": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "script_121": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer_model",
                            "Attribute"
                        ],
                        [
                            "self.transformer_model",
                            "Attribute"
                        ],
                        [
                            "self.transformer_model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "script_138": {
                "obj": {
                    "value": "ensemble_models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EnsembleModel([model])",
                            "Call"
                        ]
                    ]
                }
            },
            "script_151": {
                "obj": {
                    "value": "search_strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=high_sampling_topp)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_158": {
                "obj": {
                    "value": "search_strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=high_sampling_topp)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_164": {
                "obj": {
                    "value": "search_strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=high_sampling_topp)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_383": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(beam_size * batch_size, vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_385": {
                "variable": {
                    "value": "generated_tok",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.randint(0, vocab_size, size=(batch_size * beam_size, step + 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_111": {
                "f": {
                    "value": "f.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sequence_scorer.py": {
        "torch": {
            "log_102": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sparse_multihead_attention.py": {
        "torch": {
            "randn_14": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "bidirectional_sparse_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "sparse_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_34": {
                "input": {
                    "value": "torch.eq(bidirectional_attention_sparse_mask, bidirectional_sparse_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_110": {
                "input": {
                    "value": "torch.eq(attention_sparse_mask, sparse_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_35": {
                "input": {
                    "value": "bidirectional_attention_sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bidirectional_attention.buffered_sparse_mask(attn_weights, 8, 8)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bidirectional_sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_110": {
                "input": {
                    "value": "attention_sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.buffered_sparse_mask(attn_weights, 8, 8)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_token_block_dataset.py": {
        "torch": {
            "tensor_21": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "[9, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "[9, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "[4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "list(range(10000))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_train.py": {
        "torch": {}
    },
    "tests/test_transformer.py": {
        "torch": {
            "stack_15": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(tok, dtype=torch.long)] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_47": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[len(tok)] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "tok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 11, 12, 13, 14, 15, 2]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_utils.py": {
        "torch": {
            "Parameter_88": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_97": {
                "variable": {
                    "value": "exp_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(15,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_97": {
                "variable": {
                    "value": "exp_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_95": {
                "variable": {
                    "value": "p.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(5,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_tensor_90": {
                "obj": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ],
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ],
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_93": {
                "data": {
                    "value": "torch.zeros(5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_98": {
                "obj": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ],
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ],
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_102": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/utils.py": {
        "torch": {
            "DataLoader_52": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset(samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(samples)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda samples: collate(samples, padding_idx, eos_idx)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "rand_164": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_examples * maxlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_546": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bbsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_output_tokens.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tgt_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(tgt.split())",
                            "Call"
                        ],
                        [
                            "prev_output_tokens.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(src.split())",
                            "Call"
                        ],
                        [
                            "encoder_out.encoder_out.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_574": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens",
                            "variable"
                        ],
                        [
                            "F.pad(x, (0, padding_needed))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding_needed)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_165": {
                "input": {
                    "value": "26 * data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_183": {
                "variable": {
                    "value": "src_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(num_alignments) * src_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_184": {
                "variable": {
                    "value": "tgt_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(num_alignments) * tgt_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_183": {
                "*size": {
                    "value": "num_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(avg_len // 2, 2 * avg_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_184": {
                "*size": {
                    "value": "num_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(avg_len // 2, 2 * avg_len)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}