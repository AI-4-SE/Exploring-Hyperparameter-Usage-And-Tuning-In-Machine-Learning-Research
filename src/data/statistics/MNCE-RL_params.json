{
    "model/criterial.py": {
        "sklearn": {
            "roc_curve_111": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_score": {
                    "value": "Pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "auc_114": {
                "x": {
                    "value": "fpr",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Linear_35": {
                "variable": {
                    "value": "self.atom_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.atom_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.bond_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bond_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bond_emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.gcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layer",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_49": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_51": {
                "variable": {
                    "value": "self.cl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_66": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.one_hot(adj, self.bond_size).float()",
                            "Call"
                        ],
                        [
                            "self.bond_linear(adj) * mask",
                            "BinOp"
                        ],
                        [
                            "adj.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "adj.cuda(critdevice)",
                            "Call"
                        ],
                        [
                            "adj.cuda()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.bond_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_68": {
                "variable": {
                    "value": "mol",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mol",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.one_hot(mol, self.atom_size).float()",
                            "Call"
                        ],
                        [
                            "self.atom_linear(mol) * maskmol",
                            "BinOp"
                        ],
                        [
                            "mol.mean(1)",
                            "Call"
                        ],
                        [
                            "mol.cuda(critdevice)",
                            "Call"
                        ],
                        [
                            "mol.cuda()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.atom_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_129": {
                "variable": {
                    "value": "fakelabel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(fake[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['dis_lr']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_64": {
                "n": {
                    "value": "adj.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_64": {
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_93": {
                "input": {
                    "value": "1 - pred + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.one_hot(adj, self.bond_size).float()",
                            "Call"
                        ],
                        [
                            "self.bond_linear(adj) * mask",
                            "BinOp"
                        ],
                        [
                            "adj.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "adj.cuda(critdevice)",
                            "Call"
                        ],
                        [
                            "adj.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "NCE/toolbox.py": {
        "torch": {
            "tensor_1323": {
                "variable": {
                    "value": "resmol",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "resmol",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(resmol)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1324": {
                "variable": {
                    "value": "resadj",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "block_diag(*resadj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1325": {
                "variable": {
                    "value": "residx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "residx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(residx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "1008611",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_130": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_132": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(256, 1024, total)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "traindata",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "treedataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "treeDataset(os.path.join(config['data_path'], 'train.json'))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['batchsize']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "importlib.import_module(args.config)",
                            "Call"
                        ],
                        [
                            "config.config",
                            "Attribute"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_wrapper",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "{'gen': gen.state_dict(), 'epoch': 0}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_path, 'pretrain.model.ckpt-{}'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_271": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(config['log_path'], 'model/')",
                            "Call"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(os.path.join(config['log_path'], 'model/'), 'model.ckpt-best')",
                            "Call"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_305": {
                "variable": {
                    "value": "traindata",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "list_moleculars",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['batchsize']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "importlib.import_module(args.config)",
                            "Call"
                        ],
                        [
                            "config.config",
                            "Attribute"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_wrapper",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_377": {
                "obj": {
                    "value": "{'gen': gen.state_dict(), 'crit': crit.state_dict(), 'epoch': epoch, 'loss': sum(losses) / len(losses)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_path, 'model.ckpt-{}'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_397": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_429": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(config['log_path'], 'model/')",
                            "Call"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(os.path.join(config['log_path'], 'model/'), 'model.ckpt-best')",
                            "Call"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_158": {
                "obj": {
                    "value": "{'gen': gen.state_dict(), 'epoch': 0}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_path, 'pretrain.model.ckpt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_352": {
                "variable": {
                    "value": "traindata",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "list_moleculars",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['batchsize']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "importlib.import_module(args.config)",
                            "Call"
                        ],
                        [
                            "config.config",
                            "Attribute"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_wrapper",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_390": {
                "obj": {
                    "value": "{'gen': gen.state_dict(), 'crit': crit.state_dict(), 'epoch': epoch, 'loss': sum(losses) / len(losses)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_path, 'model.ckpt-{}'.format('best'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_593": {
                "variable": {
                    "value": "antib_train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "antib_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "AntibDataset(os.path.join(config['data_path'], 'train.hdf5'))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['batchsize']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "importlib.import_module(args.config)",
                            "Call"
                        ],
                        [
                            "config.config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_594": {
                "variable": {
                    "value": "config[raw_atd_pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "AntibDataset_pos(os.path.join(config['data_path'], 'train.hdf5'))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['batchsize']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "importlib.import_module(args.config)",
                            "Call"
                        ],
                        [
                            "config.config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_597": {
                "variable": {
                    "value": "config[raw_atd_neg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "AntibDataset_neg(os.path.join(config['data_path'], 'train.hdf5'))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['batchsize']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "importlib.import_module(args.config)",
                            "Call"
                        ],
                        [
                            "config.config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_756": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(config['log_path'], 'model/')",
                            "Call"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(os.path.join(config['log_path'], 'model/'), 'model.ckpt-best')",
                            "Call"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_521": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(config['log_path'], 'model/')",
                            "Call"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(os.path.join(config['log_path'], 'model/'), 'model.ckpt-best')",
                            "Call"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_631": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(config['log_path'], 'model/')",
                            "Call"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(os.path.join(config['log_path'], 'model/'), 'model.ckpt-best')",
                            "Call"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ],
                        [
                            "check_path(save_path)",
                            "Call"
                        ],
                        [
                            "config['pretrain_path']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_count_491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_580": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_694": {
                "obj": {
                    "value": "{'gen': gen.state_dict(), 'crit': crit.state_dict(), 'epoch': epoch, 'loss': sum(losses) / len(losses), 'score_func': Score_func.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_path, 'model.ckpt-{}'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_626": {
                "obj": {
                    "value": "{'score_func': Score_func.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_path, 'scorefunc_pretrain.model.ckpt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_639": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config['log_path'], 'scorefunc_pretrain.model.ckpt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_719": {
                "variable": {
                    "value": "traindata",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "list_moleculars",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['batchsize']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "importlib.import_module(args.config)",
                            "Call"
                        ],
                        [
                            "config.config",
                            "Attribute"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_wrapper",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_739": {
                "obj": {
                    "value": "{'gen': gen.state_dict(), 'crit': crit.state_dict(), 'epoch': epoch, 'loss': sum(losses) / len(losses), 'score_func': Score_func.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_path, 'model.ckpt-{}'.format('best'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_647": {
                "obj": {
                    "value": "{'score_func': Score_func.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_path, 'scorefunc_pretrain.model.ckpt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/RL_utils.py": {
        "torch": {
            "cat_30": {
                "variable": {
                    "value": "returns",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "returns",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(returns, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_50": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(newpolicy_probs + 1e-10) - torch.log(oldpolicy_probs + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_31": {
                "tensors": {
                    "value": "mvalues",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "oldpolicy_probs + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_54": {
                "input": {
                    "value": "p1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ratio * advantages.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_25": {
                "input": {
                    "value": "rewards[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_56": {
                "input": {
                    "value": "newpolicy_probs + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_26": {
                "input": {
                    "value": "rewards[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_27": {
                "input": {
                    "value": "rewards[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model/generator.py": {
        "torch": {
            "Sequential_60": {
                "variable": {
                    "value": "self.gen_gcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.gen_gcn",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.atom_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_atoms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.bond_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_bonds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bond_emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.gen_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.emb_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_grammar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_67": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_68": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['gen_lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_103": {
                "variable": {
                    "value": "mol",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mol",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(torch.ones(inp, 1) * self.atoms['START']).cuda().long()",
                            "Call"
                        ],
                        [
                            "nn.functional.one_hot(mol, self.num_atoms).float()",
                            "Call"
                        ],
                        [
                            "self.atom_linear(mol) * maskmol",
                            "BinOp"
                        ],
                        [
                            "torch.cat([mol[:, 0], mol.mean(1)], 1)",
                            "Call"
                        ],
                        [
                            "self.gen_linear(mol)",
                            "Call"
                        ],
                        [
                            "self.softmax(mol)",
                            "Call"
                        ],
                        [
                            "torch.tensor(mol).cuda().long()",
                            "Call"
                        ],
                        [
                            "torch.tensor(mol).cuda().long()",
                            "Call"
                        ],
                        [
                            "tb.nodegraph2mol(graphs[i], c=True)",
                            "Call"
                        ],
                        [
                            "tb.nodegraph2mol(graphs[i], c=True)",
                            "Call"
                        ],
                        [
                            "Chem.MolFromSmiles(Chem.MolToSmiles(mol))",
                            "Call"
                        ],
                        [
                            "Chem.MolFromSmiles(Chem.MolToSmiles(mol))",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_atoms",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_104": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros([inp, 1, 1]).cuda().long()",
                            "Call"
                        ],
                        [
                            "nn.functional.one_hot(adj, self.num_bonds).float()",
                            "Call"
                        ],
                        [
                            "self.bond_linear(adj) * mask",
                            "BinOp"
                        ],
                        [
                            "adj.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tensor(adj).cuda().long()",
                            "Call"
                        ],
                        [
                            "torch.tensor(adj).cuda().long()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_bonds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "mol",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mol[:, 0], mol.mean(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "over_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_over_lens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_407": {
                "variable": {
                    "value": "cprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cprobs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_198": {
                "variable": {
                    "value": "prod_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "productions",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.forward([mol, adj])",
                            "Call"
                        ],
                        [
                            "productions.clamp(1e-20, 1.0) * masks",
                            "BinOp"
                        ],
                        [
                            "productions / productions.sum(1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.forward([mol.cuda(), adj.cuda()])",
                            "Call"
                        ],
                        [
                            "productions.clamp(1e-10, 1.0) * masks",
                            "BinOp"
                        ],
                        [
                            "productions / productions.sum(1, keepdim=True) * masks + torch.rand(productions.shape).to(masks.device) * masks * random_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_291": {
                "variable": {
                    "value": "right",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "Categorical_344": {
                "variable": {
                    "value": "prod_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "productions",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.forward([mol, adj])",
                            "Call"
                        ],
                        [
                            "productions.clamp(1e-20, 1.0) * masks",
                            "BinOp"
                        ],
                        [
                            "productions / productions.sum(1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.forward([mol.cuda(), adj.cuda()])",
                            "Call"
                        ],
                        [
                            "productions.clamp(1e-10, 1.0) * masks",
                            "BinOp"
                        ],
                        [
                            "productions / productions.sum(1, keepdim=True) * masks + torch.rand(productions.shape).to(masks.device) * masks * random_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_406": {
                "variable": {
                    "value": "oldprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "oldprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(oldprobs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_100": {
                "n": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_100": {
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_176": {
                "variable": {
                    "value": "tmask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "_tmask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([int(len(x) > 0) for x in ansqs])",
                            "Call"
                        ],
                        [
                            "np.array([int(len(x) > 0) for x in ansqs])",
                            "Call"
                        ],
                        [
                            "np.ones(num)",
                            "Call"
                        ],
                        [
                            "np.array([int(len(x) > 0) for x in qs])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_186": {
                "variable": {
                    "value": "tmask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "_tmask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([int(len(x) > 0) for x in ansqs])",
                            "Call"
                        ],
                        [
                            "np.array([int(len(x) > 0) for x in ansqs])",
                            "Call"
                        ],
                        [
                            "np.ones(num)",
                            "Call"
                        ],
                        [
                            "np.array([int(len(x) > 0) for x in qs])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "mol",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mol",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(torch.ones(inp, 1) * self.atoms['START']).cuda().long()",
                            "Call"
                        ],
                        [
                            "nn.functional.one_hot(mol, self.num_atoms).float()",
                            "Call"
                        ],
                        [
                            "self.atom_linear(mol) * maskmol",
                            "BinOp"
                        ],
                        [
                            "torch.cat([mol[:, 0], mol.mean(1)], 1)",
                            "Call"
                        ],
                        [
                            "self.gen_linear(mol)",
                            "Call"
                        ],
                        [
                            "self.softmax(mol)",
                            "Call"
                        ],
                        [
                            "torch.tensor(mol).cuda().long()",
                            "Call"
                        ],
                        [
                            "torch.tensor(mol).cuda().long()",
                            "Call"
                        ],
                        [
                            "tb.nodegraph2mol(graphs[i], c=True)",
                            "Call"
                        ],
                        [
                            "tb.nodegraph2mol(graphs[i], c=True)",
                            "Call"
                        ],
                        [
                            "Chem.MolFromSmiles(Chem.MolToSmiles(mol))",
                            "Call"
                        ],
                        [
                            "Chem.MolFromSmiles(Chem.MolToSmiles(mol))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros([inp, 1, 1]).cuda().long()",
                            "Call"
                        ],
                        [
                            "nn.functional.one_hot(adj, self.num_bonds).float()",
                            "Call"
                        ],
                        [
                            "self.bond_linear(adj) * mask",
                            "BinOp"
                        ],
                        [
                            "adj.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tensor(adj).cuda().long()",
                            "Call"
                        ],
                        [
                            "torch.tensor(adj).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_296": {
                "variable": {
                    "value": "tmask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "mol",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mol",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(torch.ones(inp, 1) * self.atoms['START']).cuda().long()",
                            "Call"
                        ],
                        [
                            "nn.functional.one_hot(mol, self.num_atoms).float()",
                            "Call"
                        ],
                        [
                            "self.atom_linear(mol) * maskmol",
                            "BinOp"
                        ],
                        [
                            "torch.cat([mol[:, 0], mol.mean(1)], 1)",
                            "Call"
                        ],
                        [
                            "self.gen_linear(mol)",
                            "Call"
                        ],
                        [
                            "self.softmax(mol)",
                            "Call"
                        ],
                        [
                            "torch.tensor(mol).cuda().long()",
                            "Call"
                        ],
                        [
                            "torch.tensor(mol).cuda().long()",
                            "Call"
                        ],
                        [
                            "tb.nodegraph2mol(graphs[i], c=True)",
                            "Call"
                        ],
                        [
                            "tb.nodegraph2mol(graphs[i], c=True)",
                            "Call"
                        ],
                        [
                            "Chem.MolFromSmiles(Chem.MolToSmiles(mol))",
                            "Call"
                        ],
                        [
                            "Chem.MolFromSmiles(Chem.MolToSmiles(mol))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros([inp, 1, 1]).cuda().long()",
                            "Call"
                        ],
                        [
                            "nn.functional.one_hot(adj, self.num_bonds).float()",
                            "Call"
                        ],
                        [
                            "self.bond_linear(adj) * mask",
                            "BinOp"
                        ],
                        [
                            "adj.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tensor(adj).cuda().long()",
                            "Call"
                        ],
                        [
                            "torch.tensor(adj).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_336": {
                "variable": {
                    "value": "tmask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "_tmask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([int(len(x) > 0) for x in ansqs])",
                            "Call"
                        ],
                        [
                            "np.array([int(len(x) > 0) for x in ansqs])",
                            "Call"
                        ],
                        [
                            "np.ones(num)",
                            "Call"
                        ],
                        [
                            "np.array([int(len(x) > 0) for x in qs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_422": {
                "tensors": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "data": {
                    "value": "ans",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([x.pop() if len(x) > 0 else 0 for x in ansqs])",
                            "Call"
                        ],
                        [
                            "np.array([x.pop() if len(x) > 0 else 0 for x in ansqs])",
                            "Call"
                        ],
                        [
                            "prod_d.sample()",
                            "Call"
                        ],
                        [
                            "ans.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_290": {
                "*size": {
                    "value": "num",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "Categorical_356": {
                "variable": {
                    "value": "oprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "oprod",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.config['old'].forward([mol.cuda(), adj.cuda()])",
                            "Call"
                        ],
                        [
                            "oprod.clamp(1e-10, 1.0) * masks",
                            "BinOp"
                        ],
                        [
                            "oprod / oprod.sum(1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_356": {
                "variable": {
                    "value": "oprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_427": {
                "data": {
                    "value": "mol",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(torch.ones(inp, 1) * self.atoms['START']).cuda().long()",
                            "Call"
                        ],
                        [
                            "nn.functional.one_hot(mol, self.num_atoms).float()",
                            "Call"
                        ],
                        [
                            "self.atom_linear(mol) * maskmol",
                            "BinOp"
                        ],
                        [
                            "torch.cat([mol[:, 0], mol.mean(1)], 1)",
                            "Call"
                        ],
                        [
                            "self.gen_linear(mol)",
                            "Call"
                        ],
                        [
                            "self.softmax(mol)",
                            "Call"
                        ],
                        [
                            "torch.tensor(mol).cuda().long()",
                            "Call"
                        ],
                        [
                            "torch.tensor(mol).cuda().long()",
                            "Call"
                        ],
                        [
                            "tb.nodegraph2mol(graphs[i], c=True)",
                            "Call"
                        ],
                        [
                            "tb.nodegraph2mol(graphs[i], c=True)",
                            "Call"
                        ],
                        [
                            "Chem.MolFromSmiles(Chem.MolToSmiles(mol))",
                            "Call"
                        ],
                        [
                            "Chem.MolFromSmiles(Chem.MolToSmiles(mol))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_428": {
                "data": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros([inp, 1, 1]).cuda().long()",
                            "Call"
                        ],
                        [
                            "nn.functional.one_hot(adj, self.num_bonds).float()",
                            "Call"
                        ],
                        [
                            "self.bond_linear(adj) * mask",
                            "BinOp"
                        ],
                        [
                            "adj.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tensor(adj).cuda().long()",
                            "Call"
                        ],
                        [
                            "torch.tensor(adj).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_343": {
                "*size": {
                    "value": "productions.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_91": {
                "*size": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[mol, adj, maskmol, mask]",
                            "List"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_408": {
                "tensors": {
                    "value": "valid_ps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/modelutils.py": {
        "torch": {
            "Uniform_15": {
                "variable": {
                    "value": "self.uniform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_25": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.softmax(inp)",
                            "Call"
                        ],
                        [
                            "torch.log(x)",
                            "Call"
                        ],
                        [
                            "x + g * self.temperature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_43": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inp.argmax(-1)",
                            "Call"
                        ],
                        [
                            "nn.functional.one_hot(idx, n).float()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_91": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "w_bar",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_124": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.adj_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.out_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.adj_out_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 + self.num_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_156": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mol.reshape(m1 * m2, m3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m1",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "m2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "tadj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output.unsqueeze(1) * torch.ones([1, a2, 1, 1]).cuda(output.device), output.unsqueeze(2) * torch.ones([1, 1, a3, 1]).cuda(output.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "tadj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tadj, adj.permute(0, 2, 3, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_18": {
                "input": {
                    "value": "mu.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_129": {
                "variable": {
                    "value": "self.mol_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_head * self.out_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_130": {
                "variable": {
                    "value": "self.mol_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_131": {
                "variable": {
                    "value": "self.adj_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_132": {
                "variable": {
                    "value": "self.adj_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.out_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.out_features * self.num_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_157": {
                "input": {
                    "value": "adj.reshape(a0, a1 * a2, a3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "support",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(mol.reshape(m1 * m2, m3), self.weight).reshape(m1, m2, self.out_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_157": {
                "input": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mv_72": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_73": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "self.out_features * self.num_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_72": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_172": {
                "*size": {
                    "value": "[1, a2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_173": {
                "*size": {
                    "value": "[1, 1, a3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/datautils.py": {
        "torch": {
            "from_numpy_223": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.queue)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_486": {
                "data": {
                    "value": "matrix[output]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_552": {
                "data": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros(len(graphs), dtype=int)",
                            "Call"
                        ],
                        [
                            "matrix[output]",
                            "Subscript"
                        ],
                        [
                            "output + mymasks",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(output) - 1",
                            "BinOp"
                        ],
                        [
                            "output.cuda()",
                            "Call"
                        ],
                        [
                            "output.clamp(0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/testutils.py": {
        "torch": {}
    }
}