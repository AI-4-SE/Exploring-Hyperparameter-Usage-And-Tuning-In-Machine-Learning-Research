{
    "hmlstm/hmlstm_cell.py": {
        "tensorflow": {
            "zeros_31": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self._num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self._num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_50": {
                "variable": {
                    "value": "in_splits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[self._h_below_size, 1, self._h_above_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_52": {
                "variable": {
                    "value": "(hb, zb, ha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "in_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([self._h_below_size, 1, self._h_above_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "split",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_61": {
                "variable": {
                    "value": "s_above",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "expanded_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "ha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=inputs, num_or_size_splits=in_splits, axis=1, name='split')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_62": {
                "variable": {
                    "value": "s_below",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=inputs, num_or_size_splits=in_splits, axis=1, name='split')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(zb, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(zb, axis=[1])",
                            "Call"
                        ],
                        [
                            "zb",
                            "Method Argument"
                        ],
                        [
                            "zb",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "hb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=inputs, num_or_size_splits=in_splits, axis=1, name='split')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_67": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "-100000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "gate_splits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[self._num_units] * 4 + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_75": {
                "variable": {
                    "value": "(i, g, f, o, z_tilde)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_cell_impl._linear(states, length, bias=False, bias_initializer=bias_init)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "gate_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([self._num_units] * 4 + [1], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_78": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=concat, num_or_size_splits=gate_splits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_79": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=concat, num_or_size_splits=gate_splits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tanh(g)",
                            "Call"
                        ],
                        [
                            "g",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_80": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=concat, num_or_size_splits=gate_splits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=concat, num_or_size_splits=gate_splits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "o",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_85": {
                "variable": {
                    "value": "new_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.calculate_new_indicator(z_tilde)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_87": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(new_h, new_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_101": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size])",
                            "Call"
                        ],
                        [
                            "state.z",
                            "Attribute"
                        ],
                        [
                            "tf.squeeze(z, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=[1])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "zb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=inputs, num_or_size_splits=in_splits, axis=1, name='split')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(zb, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(zb, axis=[1])",
                            "Call"
                        ],
                        [
                            "zb",
                            "Method Argument"
                        ],
                        [
                            "zb",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_103": {
                "variable": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(z, tf.constant(1.0, dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(i, g, name='c')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.where(tf.equal(zb, tf.constant(0.0, dtype=tf.float32)), tf.identity(c), tf.add(tf.multiply(f, c), tf.multiply(i, g)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size])",
                            "Call"
                        ],
                        [
                            "state.z",
                            "Attribute"
                        ],
                        [
                            "tf.squeeze(z, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=[1])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "variable": {
                    "value": "zb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=inputs, num_or_size_splits=in_splits, axis=1, name='split')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(zb, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(zb, axis=[1])",
                            "Call"
                        ],
                        [
                            "zb",
                            "Method Argument"
                        ],
                        [
                            "zb",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_123": {
                "variable": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.equal(z, tf.constant(0.0, dtype=tf.float32)), tf.equal(zb, tf.constant(0.0, dtype=tf.float32)))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.identity(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(o, tf.tanh(new_c))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_136": {
                "variable": {
                    "value": "sigmoided",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z_tilde * slope_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_140": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_145": {
                "input": {
                    "value": "new_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(self.calculate_new_indicator(z_tilde), -1)",
                            "Call"
                        ],
                        [
                            "tf.round(sigmoided, name=name)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_104": {
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size])",
                            "Call"
                        ],
                        [
                            "state.z",
                            "Attribute"
                        ],
                        [
                            "tf.squeeze(z, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=[1])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(1.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_105": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=concat, num_or_size_splits=gate_splits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=concat, num_or_size_splits=gate_splits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tanh(g)",
                            "Call"
                        ],
                        [
                            "g",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_106": {
                "condition": {
                    "value": "tf.equal(zb, tf.constant(0.0, dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.identity(c)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.add(tf.multiply(f, c), tf.multiply(i, g))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_124": {
                "x": {
                    "value": "tf.equal(z, tf.constant(0.0, dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(zb, tf.constant(0.0, dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_128": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self._num_units])",
                            "Call"
                        ],
                        [
                            "state.h",
                            "Attribute"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_129": {
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=concat, num_or_size_splits=gate_splits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "o",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.tanh(new_c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_141": {
                "name": {
                    "value": "BinaryRound",
                    "type": "str",
                    "possible_values": []
                }
            },
            "round_143": {
                "variable": {
                    "value": "new_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigmoided",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(z_tilde * slope_multiplier)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_104": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_107": {
                "x": {
                    "value": "zb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=inputs, num_or_size_splits=in_splits, axis=1, name='split')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(zb, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(zb, axis=[1])",
                            "Call"
                        ],
                        [
                            "zb",
                            "Method Argument"
                        ],
                        [
                            "zb",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_108": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self._num_units])",
                            "Call"
                        ],
                        [
                            "state.c",
                            "Attribute"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_109": {
                "x": {
                    "value": "tf.multiply(f, c)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(i, g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_125": {
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size])",
                            "Call"
                        ],
                        [
                            "state.z",
                            "Attribute"
                        ],
                        [
                            "tf.squeeze(z, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(z, axis=[1])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_126": {
                "x": {
                    "value": "zb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=inputs, num_or_size_splits=in_splits, axis=1, name='split')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(zb, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(zb, axis=[1])",
                            "Call"
                        ],
                        [
                            "zb",
                            "Method Argument"
                        ],
                        [
                            "zb",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_129": {
                "x": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calculate_new_cell_state(c, g, i, f, z, zb)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(z, tf.constant(1.0, dtype=tf.float32)), tf.multiply(i, g, name='c'), tf.where(tf.equal(zb, tf.constant(0.0, dtype=tf.float32)), tf.identity(c), tf.add(tf.multiply(f, c), tf.multiply(i, g))))",
                            "Call"
                        ],
                        [
                            "new_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_107": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_109": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=concat, num_or_size_splits=gate_splits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(value=concat, num_or_size_splits=gate_splits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tanh(g)",
                            "Call"
                        ],
                        [
                            "g",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_125": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hmlstm/hmlstm_network.py": {
        "tensorflow": {
            "placeholder_64": {
                "variable": {
                    "value": "self.batch_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_in_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(None, None, self._input_size)",
                            "Tuple"
                        ]
                    ]
                },
                "name": {
                    "value": "batch_in",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.batch_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(None, None, self._output_size)",
                            "Tuple"
                        ]
                    ]
                },
                "name": {
                    "value": "batch_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_69": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_110": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_222": {
                "variable": {
                    "value": "split_states",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "accum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "accum",
                            "Method Argument"
                        ],
                        [
                            "accum",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "splits + [size, size, 1]",
                            "BinOp"
                        ],
                        [
                            "tf.constant([elem_len, self._output_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_240": {
                "variable": {
                    "value": "concated_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "hidden_states[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "h_above_for_last_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hmlstm._cells[-1]._h_above_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_245": {
                "variable": {
                    "value": "h_aboves",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[concated_hs, h_above_for_last_layer]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, elem_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_272": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "scan_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scan_rnn",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "self.batch_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, elem_len])",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_278": {
                "variable": {
                    "value": "raw_indicators",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "map_indicators",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_indicators",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(scan_rnn, self.batch_in, initial)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_279": {
                "variable": {
                    "value": "indicators",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "raw_indicators",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(map_indicators, states)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_280": {
                "variable": {
                    "value": "to_map",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(states, self.batch_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_295": {
                "variable": {
                    "value": "mapped",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "map_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map_output",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "to_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((states, self.batch_out), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_298": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mapped[:, :, :-self._output_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gradients_380": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "predictions[-1:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.batch_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_103": {
                "variable": {
                    "value": "self._session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_105": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_127": {
                "variable": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self._hidden_state_sizes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_136": {
                "variable": {
                    "value": "gated_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "gated_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_146": {
                "variable": {
                    "value": "embed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embed_weights",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_148": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "gated_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(gated_list, axis=1)",
                            "Call"
                        ],
                        [
                            "gated_input",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "embed_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('embed_weights', dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_149": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(gated_input, embed_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_162": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_163": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_164": {
                "variable": {
                    "value": "b3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_165": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_166": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_167": {
                "variable": {
                    "value": "w3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_171": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(embedding, w1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_174": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(l1, w2) + b2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_178": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(l2, w3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('b3')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_262": {
                "variable": {
                    "value": "hmlstm_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(elem, h_aboves)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_283": {
                "variable": {
                    "value": "splits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[elem_len, self._output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_284": {
                "variable": {
                    "value": "(cell_states, outcome)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "elem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "elem",
                            "Method Argument"
                        ],
                        [
                            "elem",
                            "Method Argument"
                        ],
                        [
                            "elem",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "splits + [size, size, 1]",
                            "BinOp"
                        ],
                        [
                            "tf.constant([elem_len, self._output_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "gates_vars",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "embedding_vars",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "name": {
                    "value": "embed_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "embed_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sum(self._hidden_state_sizes), self._embed_size]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "output_module_vars",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self._out_hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self._out_hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_90": {
                "name": {
                    "value": "b3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self._output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_91": {
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._embed_size, self._out_hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._out_hidden_size, self._out_hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_97": {
                "name": {
                    "value": "w3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._out_hidden_size, self._output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "gates_vars",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_124": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'gate_%d' % l",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "embedding_vars",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "output_module_vars",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_185": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._loss_function(**loss_args)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(loss, -1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(mapped[:, :, :-self._output_size])",
                            "Call"
                        ],
                        [
                            "self.output_module(embeded, outcome)",
                            "Call"
                        ],
                        [
                            "self._get_graph()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_251": {
                "input": {
                    "value": "self.batch_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_267": {
                "values": {
                    "value": "concated_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[array_ops.concat(tuple(s), axis=1) for s in state]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_276": {
                "values": {
                    "value": "[l.z for l in state]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_293": {
                "values": {
                    "value": "(loss, prediction)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_334": {
                "variable": {
                    "value": "self._session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_335": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_77": {
                "name": {
                    "value": "'gate_%s' % l",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sum(self._hidden_state_sizes), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "a": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(l1, w2) + b2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('w3')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_266": {
                "values": {
                    "value": "tuple(s)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_289": {
                "values": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s.h for s in self.split_out_cell_states(cell_states)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_60": {
                "x": {
                    "value": "logits - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_125": {
                "x": {
                    "value": "tf.matmul(hidden_states, weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_134": {
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(gates, split)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(gates, split)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_171": {
                "a": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(prod)",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('w1')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_174": {
                "a": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(embedding, w1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('w2')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_125": {
                "a": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('gate_%d' % l, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hmlstm/multi_hmlstm_cell.py": {
        "tensorflow": {
            "split_41": {
                "variable": {
                    "value": "h_aboves",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "raw_h_aboves",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, -total_hidden_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "ha_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[c._h_above_size for c in self._cells]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_44": {
                "variable": {
                    "value": "z_below",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(inputs)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_45": {
                "variable": {
                    "value": "raw_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[raw_inp, z_below]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_53": {
                "variable": {
                    "value": "cur_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[raw_inp, h_aboves[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "input_to_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "'cell_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_44": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}