{
    "contrib/training/train_on_gpu.py": {
        "tensorflow": {
            "ReduceLROnPlateau_35": {
                "variable": {
                    "value": "reduce_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorBoard_37": {
                "variable": {
                    "value": "tensorboard",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "TB_PATH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/path/to/tensorboard_logs'",
                            "Constant"
                        ]
                    ]
                }
            },
            "ModelCheckpoint_38": {
                "variable": {
                    "value": "checkpoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "weights.{epoch:02d}_{val_acc:.4f}.hdf5",
                    "type": "Constant",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clear_session_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deepface/dataset.py": {
        "tensorflow": {
            "read_file_17": {
                "variable": {
                    "value": "file_contents",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_18": {
                "variable": {
                    "value": "file_contents",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "file_contents",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(file_contents, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_20": {
                "variable": {
                    "value": "class_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "file_contents",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(file_contents, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "sep": {
                    "value": "line_seperator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'\\n'",
                            "Constant"
                        ]
                    ]
                }
            },
            "equal_39": {
                "variable": {
                    "value": "classl",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.class_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "classl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.equal(self.class_labels, classl)",
                            "Call"
                        ],
                        [
                            "tf.cast(classl, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(classl, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(classl, self.num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_40": {
                "variable": {
                    "value": "classl",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "classl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.equal(self.class_labels, classl)",
                            "Call"
                        ],
                        [
                            "tf.cast(classl, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(classl, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(classl, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_41": {
                "variable": {
                    "value": "classl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "classl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.equal(self.class_labels, classl)",
                            "Call"
                        ],
                        [
                            "tf.cast(classl, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(classl, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(classl, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_42": {
                "variable": {
                    "value": "classl",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "classl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.equal(self.class_labels, classl)",
                            "Call"
                        ],
                        [
                            "tf.cast(classl, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(classl, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(classl, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_44": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_pad(image, self.image_size[0], self.image_size[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "Dataset.preprocess_image(image)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_image_with_pad_45": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_pad(image, self.image_size[0], self.image_size[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "Dataset.preprocess_image(image)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "self.image_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target_width": {
                    "value": "self.image_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_pad(image, self.image_size[0], self.image_size[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "Dataset.preprocess_image(image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_56": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.parse_single_example(example, feature)",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'image': tf.io.FixedLenFeature([], tf.string), 'class': tf.io.FixedLenFeature([], tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Options_63": {
                "variable": {
                    "value": "option",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_53": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_54": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_35": {
                "input": {
                    "value": "self.class_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "deepface/deepface.py": {
        "tensorflow": {
            "RandomNormal_19": {
                "variable": {
                    "value": "wt_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Constant_20": {
                "variable": {
                    "value": "bias_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "deepface",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[keras.layers.InputLayer(input_shape=(*image_size, channels), name='I0'), conv2d_layer(filters=32, kernel_size=11, name='C1'), keras.layers.MaxPooling2D(pool_size=3, strides=2, padding='same', name='M2'), conv2d_layer(filters=16, kernel_size=9, name='C3'), lc2d_layer(filters=16, kernel_size=9, name='L4'), lc2d_layer(filters=16, kernel_size=7, strides=2, name='L5'), lc2d_layer(filters=16, kernel_size=5, name='L6'), keras.layers.Flatten(name='F0'), dense_layer(units=4096, activation=keras.activations.relu, name='F7'), keras.layers.Dropout(rate=0.5, name='D0'), dense_layer(units=num_classes, activation=keras.activations.softmax, name='F8')]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "DeepFace",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_66": {
                "variable": {
                    "value": "sgd_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learn_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LEARN_RATE",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MOMENTUM",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_file_77": {
                "variable": {
                    "value": "downloaded_file_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "fname": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'deepface.zip'",
                            "Constant"
                        ]
                    ]
                },
                "origin": {
                    "value": "DOWNLOAD_PATH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'https://github.com/swghosh/DeepFace/releases/download/weights-vggface2-2d-aligned/VGGFace2_DeepFace_weights_val-0.9034.h5.zip'",
                            "Constant"
                        ]
                    ]
                },
                "md5_hash": {
                    "value": "MD5_HASH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'0b21fb70cd6901c96c19ac14c9ea8b89'",
                            "Constant"
                        ]
                    ]
                },
                "extract": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_28": {
                "kernel_initializer": {
                    "value": "wt_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.initializers.RandomNormal(mean=0, stddev=0.01)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "bias_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.initializers.Constant(value=0.5)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "keras.activations.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LocallyConnected2D_33": {
                "kernel_initializer": {
                    "value": "wt_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.initializers.RandomNormal(mean=0, stddev=0.01)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "bias_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.initializers.Constant(value=0.5)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "keras.activations.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_38": {
                "kernel_initializer": {
                    "value": "wt_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.initializers.RandomNormal(mean=0, stddev=0.01)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "bias_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.initializers.Constant(value=0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "InputLayer_47": {
                "input_shape": {
                    "value": "(*image_size, channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "I0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPooling2D_49": {
                "pool_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "M2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_54": {
                "name": {
                    "value": "F0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "rate": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "D0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "training/train_on_tpu.py": {
        "tensorflow": {
            "TPUClusterResolver_36": {
                "variable": {
                    "value": "tpu_cluster",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "TPU_WORKER",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'grpc://10.0.0.1:8470'",
                            "Constant"
                        ]
                    ]
                }
            },
            "TPUStrategy_38": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu_cluster_resolver": {
                    "value": "tpu_cluster",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.cluster_resolver.TPUClusterResolver(tpu=TPU_WORKER)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_60": {
                "variable": {
                    "value": "reduce_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorBoard_62": {
                "variable": {
                    "value": "tensorboard",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "TB_PATH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'gs://bucket-name/vggface2_deepface_tensorboard'",
                            "Constant"
                        ]
                    ]
                }
            },
            "ModelCheckpoint_63": {
                "variable": {
                    "value": "checkpoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "weights.{epoch:02d}_{val_acc:.4f}.hdf5",
                    "type": "Constant",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clear_session_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_tpu_system_37": {
                "enable_coordination_service": {
                    "value": "tpu_cluster",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.cluster_resolver.TPUClusterResolver(tpu=TPU_WORKER)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}