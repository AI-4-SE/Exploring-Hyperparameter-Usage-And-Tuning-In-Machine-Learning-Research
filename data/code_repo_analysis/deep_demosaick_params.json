{
    "MMNet_TBPTT.py": {
        "torch": {
            "conv2d_20": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mosaick_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mosaick_img / 255",
                            "BinOp"
                        ],
                        [
                            "mosaick_img",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "bilinear_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([F_r, F_g, F_b])[:, None]",
                            "Subscript"
                        ],
                        [
                            "bilinear_filter.cuda()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_151": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_155": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mmnet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(np.linspace(np.log(sigma_max), np.log(sigma_min), max_iter))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(iterations)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_138": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_17": {
                "tensors": {
                    "value": "[F_r, F_g, F_b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_51": {
                "input": {
                    "value": "wk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w[k]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_grad_norm__130": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_loaders/concat_dataset_loader.py": {
        "torch": {
            "DataLoader_237": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "demosaic_dataset_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset(root_dir='data/mit-demosaicing/joined.zip', selection_pattern='train', transform=composed, apply_bilinear=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data_loaders/dataset_loader.py": {
        "torch": {}
    },
    "data_loaders/kodak_dataset_loader.py": {
        "torch": {}
    },
    "data_loaders/mcm_dataset_loader.py": {
        "torch": {}
    },
    "data_loaders/rgb_transform.py": {
        "torch": {}
    },
    "l2proj.py": {
        "torch": {
            "randn_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_32": {
                "variable": {
                    "value": "numX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_38": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_39": {
                "variable": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x_resized, 2, dim=1).reshape(x.size(0), 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_31": {
                "variable": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "(input - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_57": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_34": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor([2.0])",
                            "Call"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_36": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor([2.0])",
                            "Call"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "Adam_82": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mmnet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultiStepLR_83": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(mmnet.parameters(), lr=args.lr, amsgrad=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[100, 200, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "L1Loss_84": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_175": {
                "variable": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + 'model_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "42 + pid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "42 + pid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_79": {
                "variable": {
                    "value": "mmnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "mmnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MMNet(model, max_iter=args.max_iter)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(mmnet, device_ids=range(args.num_gpus))",
                            "Call"
                        ],
                        [
                            "mmnet.cuda()",
                            "Call"
                        ],
                        [
                            "MMNet(model, max_iter=model_params[1])",
                            "Call"
                        ],
                        [
                            "mmnet.cuda()",
                            "Call"
                        ],
                        [
                            "mmnet.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.num_gpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "[mmnet.module.state_dict(), args.max_iter, args.depth]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + 'model_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "[mmnet.state_dict(), args.max_iter, args.depth]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + 'model_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main_xtrans.py": {
        "torch": {
            "Adam_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(model.parameters()) + [stdn_v, w]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_133": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(list(model.parameters()) + [stdn_v, w], lr=args.lr, weight_decay=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[30, 70, 100]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "L1Loss_134": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + 'model_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_123": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNet_Den(BasicBlock, args.depth, weightnorm=True)",
                            "Call"
                        ],
                        [
                            "utils.load_resdnet_params(model, 'resDNetPRelu_color_prox-stages:5-conv:5x5x3@64-res:3x3x64@64-std:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]-solver:adam-jointTrain/net-final.mat', args.depth)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=list(np.arange(args.num_gpus))).cuda()",
                            "Call"
                        ],
                        [
                            "ResNet_Den(BasicBlock, args.depth, weightnorm=True)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(np.arange(args.num_gpus))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_131": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.Tensor(iterations).cuda(), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "model_params[2]",
                            "Subscript"
                        ],
                        [
                            "w.cuda()",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_67": {
                "input": {
                    "value": "wk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w[k]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(1).fill_(0))",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(1).fill_(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_213": {
                "obj": {
                    "value": "[model.module.state_dict(), stdn_v, w]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + 'model_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_215": {
                "obj": {
                    "value": "[model.state_dict(), stdn_v, w]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + 'model_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "modules/wmad_estimator.py": {
        "torch": {
            "pad_32": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.imread('peppers.png') / 255",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, self.db7_decomp_high.shape[2] // 2, self.db7_decomp_high.shape[2] // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_33": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, 0, self.db7_decomp_high.shape[2] // 2, self.db7_decomp_high.shape[2] // 2), mode='reflect')",
                            "Call"
                        ],
                        [
                            "F.conv2d(diagonal, db7_decomp_high, stride=(2, 1), groups=x.shape[1])",
                            "Call"
                        ],
                        [
                            "F.pad(diagonal, (self.db7_decomp_high.shape[2] // 2, self.db7_decomp_high.shape[2] // 2, 0, 0), mode='reflect')",
                            "Call"
                        ],
                        [
                            "F.conv2d(diagonal.transpose(2, 3), db7_decomp_high, stride=(2, 1), groups=x.shape[1])",
                            "Call"
                        ],
                        [
                            "diagonal.view(diagonal.shape[0], diagonal.shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "db7_decomp_high",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db7_decomp_high",
                            "Attribute"
                        ],
                        [
                            "torch.cat([self.db7_decomp_high] * x.shape[1], dim=0)",
                            "Call"
                        ],
                        [
                            "db7_decomp_high.cuda()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_34": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, 0, self.db7_decomp_high.shape[2] // 2, self.db7_decomp_high.shape[2] // 2), mode='reflect')",
                            "Call"
                        ],
                        [
                            "F.conv2d(diagonal, db7_decomp_high, stride=(2, 1), groups=x.shape[1])",
                            "Call"
                        ],
                        [
                            "F.pad(diagonal, (self.db7_decomp_high.shape[2] // 2, self.db7_decomp_high.shape[2] // 2, 0, 0), mode='reflect')",
                            "Call"
                        ],
                        [
                            "F.conv2d(diagonal.transpose(2, 3), db7_decomp_high, stride=(2, 1), groups=x.shape[1])",
                            "Call"
                        ],
                        [
                            "diagonal.view(diagonal.shape[0], diagonal.shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.db7_decomp_high.shape[2] // 2, self.db7_decomp_high.shape[2] // 2, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_35": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diagonal.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "db7_decomp_high",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db7_decomp_high",
                            "Attribute"
                        ],
                        [
                            "torch.cat([self.db7_decomp_high] * x.shape[1], dim=0)",
                            "Call"
                        ],
                        [
                            "db7_decomp_high.cuda()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "db7_decomp_high",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.db7_decomp_high] * x.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_55": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "median_41": {
                "input": {
                    "value": "torch.abs(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_41": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diagonal[:, c]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "problems.py": {
        "torch": {
            "zeros_17": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_24": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(20, 30)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size[0], size[1], 2)",
                            "Call"
                        ],
                        [
                            "grid.unsqueeze(0).repeat(x.size(0), 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "grid.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_67": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "bilinear_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([F_r, F_g, F_b])[:, None]",
                            "Subscript"
                        ],
                        [
                            "bilinear_filter.cuda()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_89": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(20, 30)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(20, 30)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_90": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "y_ - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_64": {
                "tensors": {
                    "value": "[F_r, F_g, F_b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_14": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_15": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "residual_model_resdnet.py": {
        "torch": {
            "Adam_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_113": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_24": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "init": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "PReLU_25": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "init": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "F.pad(out, (1, 1, 1, 1), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "out[:, :, :x.shape[2], :x.shape[3]]",
                            "Subscript"
                        ],
                        [
                            "self.relu2(out)",
                            "Call"
                        ],
                        [
                            "F.pad(out, (1, 1, 1, 1), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out[:, :, :x.shape[2], :x.shape[3]]",
                            "Subscript"
                        ],
                        [
                            "x + out",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (2, 2, 2, 2), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.conv_out(out)",
                            "Call"
                        ],
                        [
                            "self.l2proj(out, stdn, alpha)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "F.pad(out, (1, 1, 1, 1), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "out[:, :, :x.shape[2], :x.shape[3]]",
                            "Subscript"
                        ],
                        [
                            "self.relu2(out)",
                            "Call"
                        ],
                        [
                            "F.pad(out, (1, 1, 1, 1), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out[:, :, :x.shape[2], :x.shape[3]]",
                            "Subscript"
                        ],
                        [
                            "x + out",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (2, 2, 2, 2), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.conv_out(out)",
                            "Call"
                        ],
                        [
                            "self.l2proj(out, stdn, alpha)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_63": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_97": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(2, 2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "weight_norm_28": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_59": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_66": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Tensor_75": {
                "variable": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_93": {
                "input": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_112": {
                "*size": {
                    "value": "original.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "permute_125": {
                "variable": {
                    "value": "state_dict[conv1.weight_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_129": {
                "variable": {
                    "value": "state_dict[conv_out.weight_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_135": {
                "variable": {
                    "value": "state_dict[layer[2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_140": {
                "variable": {
                    "value": "state_dict[layer[7]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_229": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(prediction.data[i] - target.data[i], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_264": {
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_f_color_t(img, param_dict)",
                            "Call"
                        ],
                        [
                            "np.where(img > 0.0, _f_gamma(img, param_dict), img)",
                            "Call"
                        ],
                        [
                            "_f_corr(img, param_dict)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_229": {
                "input": {
                    "value": "prediction.data[i] - target.data[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_266": {
                "ndarray": {
                    "value": "img.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_268": {
                "ndarray": {
                    "value": "img.transpose((3, 2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}