{
    "datasets/s3dis/s3dis_patches.py": {
        "tensorflow": {
            "MeanSquaredError_58": {
                "variable": {
                    "value": "loss_object",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Example_51": {
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_69": {
                "path": {
                    "value": "config['out_test_file']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Features_51": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'points': tf_utils.float_list_feature(pts.reshape(-1, 1)), 'colors': tf_utils.float_list_feature(pts.reshape(-1, 1)), 'label': tf_utils.float_list_feature(label.reshape(-1, 1))}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Variable_154": {
                "variable": {
                    "value": "pred_dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[0.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_158": {
                "initial_value": {
                    "value": "label_mean_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "helpers.rotate_euler(label_mean.reshape(1, 3), theta)[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/s3dis/s3dis_scenes.py": {
        "tensorflow": {
            "Example_73": {
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_84": {
                "path": {
                    "value": "config['out_test_file']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Features_73": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'points': tf_utils.float_list_feature(pts.reshape(-1, 1)), 'colors': tf_utils.float_list_feature(colors.reshape(-1, 1)), 'labels': tf_utils.float_list_feature(labels.reshape(-1, 1)), 'n_inst': tf_utils.int64_feature(n_inst)}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/scannet/scannet_patches.py": {
        "tensorflow": {
            "MeanSquaredError_58": {
                "variable": {
                    "value": "loss_object",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Example_51": {
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_72": {
                "path": {
                    "value": "config['out_test_file']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Features_51": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'points': tf_utils.float_list_feature(pts.reshape(-1, 1)), 'colors': tf_utils.float_list_feature(pts.reshape(-1, 1)), 'label': tf_utils.float_list_feature(label.reshape(-1, 1))}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Variable_152": {
                "variable": {
                    "value": "pred_dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[0.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_156": {
                "initial_value": {
                    "value": "label_mean_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "helpers.rotate_euler(label_mean.reshape(1, 3), theta)[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/scannet/scannet_scenes.py": {
        "tensorflow": {
            "Example_75": {
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_85": {
                "path": {
                    "value": "config['out_test_file']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Features_75": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'points': tf_utils.float_list_feature(pts.reshape(-1, 1)), 'colors': tf_utils.float_list_feature(colors.reshape(-1, 1)), 'labels': tf_utils.float_list_feature(labels.reshape(-1, 1)), 'n_inst': tf_utils.int64_feature(n_inst)}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "loss_network/evaluate.py": {
        "tensorflow": {
            "set_seed_15": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_20": {
                "variable": {
                    "value": "clf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(labels[:, 0], tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MeanSquaredError_42": {
                "variable": {
                    "value": "dir_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanSquaredError_43": {
                "variable": {
                    "value": "ext_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BinaryAccuracy_44": {
                "variable": {
                    "value": "clf_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_20": {
                "x": {
                    "value": "labels[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "shape": {
                    "value": "(config['batch_size'], config['num_points'], 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "loss_network/model.py": {
        "tensorflow": {
            "Dense_36": {
                "variable": {
                    "value": "self.reg_dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "variable": {
                    "value": "self.reg_dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_45": {
                "variable": {
                    "value": "self.reg_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_55": {
                "variable": {
                    "value": "self.ext_dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "variable": {
                    "value": "self.ext_dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_64": {
                "variable": {
                    "value": "self.ext_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_74": {
                "variable": {
                    "value": "self.clf_dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.clf_dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_83": {
                "variable": {
                    "value": "self.clf_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoded, (self.batch_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_124": {
                "values": {
                    "value": "[reg_pred, ext_pred, clf_pred]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "loss_network/train.py": {
        "tensorflow": {
            "set_seed_13": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_18": {
                "variable": {
                    "value": "clf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(test_labels[:, 0], tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_22": {
                "variable": {
                    "value": "arg_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.argmax(pred[:, 8:10], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_40": {
                "variable": {
                    "value": "clf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(train_labels[:, 0], tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'train_dataset': './data/s3d_patches_train.tfrecord', 'test_dataset': './data/s3d_patches_train.tfrecord', 'log_dir': './logs', 'log_code': 'lossnet_1', 'test_freq': 25, 'log_freq': 25, 'n_steps': 200000.0, 'batch_size': 16, 'num_points': 4096, 'lr': 0.0001}",
                            "Dict"
                        ]
                    ]
                }
            },
            "create_file_writer_81": {
                "variable": {
                    "value": "train_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(config['log_dir'], config['log_code'], 'tensorboard', 'train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "create_file_writer_84": {
                "variable": {
                    "value": "test_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(config['log_dir'], config['log_code'], 'tensorboard', 'test')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "arg_max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.argmax(pred[:, 8:10], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_18": {
                "x": {
                    "value": "test_labels[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_22": {
                "input": {
                    "value": "pred[:, 8:10]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MeanSquaredError_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanSquaredError_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "train_labels[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_42": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Mean_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Accuracy_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Accuracy_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "text_97": {
                "name": {
                    "value": "config",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf_utils.tb_config(config)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_46": {
                "input": {
                    "value": "pred[:, 8:10]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MeanSquaredError_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanSquaredError_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_111": {
                "name": {
                    "value": "total loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_metrics[0].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_112": {
                "name": {
                    "value": "dir loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_metrics[1].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_113": {
                "name": {
                    "value": "ext loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_metrics[2].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_114": {
                "name": {
                    "value": "clf loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_metrics[3].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_115": {
                "name": {
                    "value": "argmax accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_metrics[4].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_125": {
                "name": {
                    "value": "total loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_metrics[0].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_126": {
                "name": {
                    "value": "dir loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_metrics[1].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_127": {
                "name": {
                    "value": "ext loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_metrics[2].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_128": {
                "name": {
                    "value": "clf. loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_metrics[3].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_129": {
                "name": {
                    "value": "argmax accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_metrics[4].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pointnet2/cpp_modules.py": {
        "tensorflow": {
            "load_op_library_4": {
                "variable": {
                    "value": "sampling_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "./tf_ops/sampling/tf_sampling_so.so",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_op_library_5": {
                "variable": {
                    "value": "grouping_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "./tf_ops/grouping/tf_grouping_so.so",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_op_library_6": {
                "variable": {
                    "value": "interpolate_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "./tf_ops/3d_interpolation/tf_interpolate_so.so",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_18": {
                "op_type": {
                    "value": "GatherPoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_49": {
                "op_type": {
                    "value": "GroupPoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_64": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(xyz1, (b, 1, n, c))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, m, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_65": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(xyz2, (b, m, 1, c))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_66": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(xyz1 - xyz2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_69": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "outi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select_top_k(k, dist)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_70": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select_top_k(k, dist)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RegisterGradient_86": {
                "op_type": {
                    "value": "ThreeInterpolate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(xyz1, (b, 1, n, c)), [1, m, 1, 1])",
                            "Call"
                        ],
                        [
                            "xyz1",
                            "Method Argument"
                        ],
                        [
                            "xyz1",
                            "Method Argument"
                        ],
                        [
                            "xyz1",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(b, 1, n, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(xyz2, (b, m, 1, c)), [1, 1, n, 1])",
                            "Call"
                        ],
                        [
                            "xyz2",
                            "Method Argument"
                        ],
                        [
                            "xyz2",
                            "Method Argument"
                        ],
                        [
                            "xyz2",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(b, m, 1, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/model.py": {
        "tensorflow": {
            "reshape_117": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pn_conv1(input, None)",
                            "Call"
                        ],
                        [
                            "self.pn_conv2(xyz, points)",
                            "Call"
                        ],
                        [
                            "self.pn_conv3(xyz, points)",
                            "Call"
                        ],
                        [
                            "self.pn_conv4(xyz, points)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/pointnet_util.py": {
        "tensorflow": {
            "constant_45": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_47": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.tile(np.array(range(nsample)).reshape((1, 1, nsample)), (batch_size, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "grouped_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 1, nsample, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_27": {
                "input": {
                    "value": "tf.expand_dims(new_xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, nsample, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_54": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, self.use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(self.npoint, self.radius, self.nsample, xyz, points, self.knn, use_xyz=self.use_xyz)",
                            "Call"
                        ],
                        [
                            "mlp_layer(new_points)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_max(new_points, axis=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_max(grouped_points, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_84": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_141": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, self.use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(self.npoint, self.radius, self.nsample, xyz, points, self.knn, use_xyz=self.use_xyz)",
                            "Call"
                        ],
                        [
                            "mlp_layer(new_points)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_max(new_points, axis=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_max(grouped_points, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_199": {
                "variable": {
                    "value": "new_points_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "new_points_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_27": {
                "input": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, self.use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(self.npoint, self.radius, self.nsample, xyz, points, self.knn, use_xyz=self.use_xyz)",
                            "Call"
                        ],
                        [
                            "gather_point(xyz, farthest_point_sample(self.npoint, xyz))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_31": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_xyz, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_51": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xyz, points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_196": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_points, grouped_xyz], axis=-1)",
                            "Call"
                        ],
                        [
                            "mlp_layer(grouped_points)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_122": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, filters=self.w, strides=self.strides, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activation(points)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(points, axis=0)",
                            "Call"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_143": {
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, self.use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(self.npoint, self.radius, self.nsample, xyz, points, self.knn, use_xyz=self.use_xyz)",
                            "Call"
                        ],
                        [
                            "mlp_layer(new_points)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_max(new_points, axis=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_max(grouped_points, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_184": {
                "input": {
                    "value": "tf.expand_dims(new_xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, nsample, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_184": {
                "input": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, self.use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(self.npoint, self.radius, self.nsample, xyz, points, self.knn, use_xyz=self.use_xyz)",
                            "Call"
                        ],
                        [
                            "gather_point(xyz, farthest_point_sample(self.npoint, xyz))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_189": {
                "variable": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_points, grouped_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "scene_network/evaluate.py": {
        "tensorflow": {
            "set_seed_15": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_21": {
                "variable": {
                    "value": "pred_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dist[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_31": {
                "variable": {
                    "value": "pred_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pred_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(pts)",
                            "Call"
                        ],
                        [
                            "tf_utils.objectness_mask(pred_xyz, pred_dist, pred_ext, config['score_thresh'])",
                            "Call"
                        ],
                        [
                            "tf.gather(pred_xyz, nms_inds, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nms_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_utils.nms(pred_xyz, boxes, pred_dist, 15, 0.25, config['score_thresh'])",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_32": {
                "variable": {
                    "value": "pred_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pred_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(pts)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pred_dist[:, :, 1], -1)",
                            "Call"
                        ],
                        [
                            "tf_utils.objectness_mask(pred_xyz, pred_dist, pred_ext, config['score_thresh'])",
                            "Call"
                        ],
                        [
                            "tf.gather(pred_dist, nms_inds, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nms_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_utils.nms(pred_xyz, boxes, pred_dist, 15, 0.25, config['score_thresh'])",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_33": {
                "variable": {
                    "value": "pred_ext",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pred_ext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(pts)",
                            "Call"
                        ],
                        [
                            "tf_utils.objectness_mask(pred_xyz, pred_dist, pred_ext, config['score_thresh'])",
                            "Call"
                        ],
                        [
                            "tf.gather(pred_ext, nms_inds, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nms_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_utils.nms(pred_xyz, boxes, pred_dist, 15, 0.25, config['score_thresh'])",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_34": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "helpers.make_boxes(pred_xyz, pred_ext)",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nms_inds, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nms_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_utils.nms(pred_xyz, boxes, pred_dist, 15, 0.25, config['score_thresh'])",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "shape": {
                    "value": "(1, config['num_points'], 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Mean_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scene_network/inference.py": {
        "tensorflow": {
            "zeros_55": {
                "shape": {
                    "value": "(1, config['n_pts'], 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_122": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels - pts_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_128": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tf.expand_dims(pts, 0))",
                            "Call"
                        ],
                        [
                            "tf_utils.objectness_mask(xyz, score[:, :, 1], ext, config['score_thresh'])",
                            "Call"
                        ],
                        [
                            "tf.gather(xyz, nms_inds, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nms_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_utils.nms(xyz, boxes, score, 15, 0, config['score_thresh'])",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_129": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tf.expand_dims(pts, 0))",
                            "Call"
                        ],
                        [
                            "tf_utils.objectness_mask(xyz, score[:, :, 1], ext, config['score_thresh'])",
                            "Call"
                        ],
                        [
                            "tf.gather(score, nms_inds, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nms_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_utils.nms(xyz, boxes, score, 15, 0, config['score_thresh'])",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_130": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack((boxes_min, boxes_max))",
                            "Call"
                        ],
                        [
                            "helpers.make_boxes(xyz, ext)",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nms_inds, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nms_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_utils.nms(xyz, boxes, score, 15, 0, config['score_thresh'])",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_131": {
                "variable": {
                    "value": "ext",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tf.expand_dims(pts, 0))",
                            "Call"
                        ],
                        [
                            "tf_utils.objectness_mask(xyz, score[:, :, 1], ext, config['score_thresh'])",
                            "Call"
                        ],
                        [
                            "tf.gather(ext, nms_inds, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nms_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_utils.nms(xyz, boxes, score, 15, 0, config['score_thresh'])",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "input": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scene[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "pts[pts[:, 2] < np.max(pts[:, 2]) - 1.5]",
                            "Subscript"
                        ],
                        [
                            "scene_crop[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "pts - pts_mean",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scene_network/metrics_util.py": {
        "tensorflow": {
            "Mean_6": {
                "variable": {
                    "value": "total_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_7": {
                "variable": {
                    "value": "ext_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_8": {
                "variable": {
                    "value": "score_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_9": {
                "variable": {
                    "value": "iou_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_11": {
                "variable": {
                    "value": "sup_xyz_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_12": {
                "variable": {
                    "value": "sup_ext_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_13": {
                "variable": {
                    "value": "sup_score_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_15": {
                "variable": {
                    "value": "test_xyz_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_16": {
                "variable": {
                    "value": "test_ext_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_17": {
                "variable": {
                    "value": "test_score_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_61": {
                "name": {
                    "value": "total loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[0].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_62": {
                "name": {
                    "value": "ext loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[1].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_63": {
                "name": {
                    "value": "clf loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[2].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_64": {
                "name": {
                    "value": "iou loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[3].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_65": {
                "name": {
                    "value": "supervised xyz",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[4].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_66": {
                "name": {
                    "value": "supervised ext",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[5].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_67": {
                "name": {
                    "value": "supervised clf",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[6].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "histogram_69": {
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pred[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "histogram_70": {
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pred[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "histogram_71": {
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pred[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_75": {
                "name": {
                    "value": "supervised xyz",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[0].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_76": {
                "name": {
                    "value": "supervised ext",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[1].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_77": {
                "name": {
                    "value": "supervised obj",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[2].result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "scene_network/model.py": {
        "tensorflow": {
            "reshape_32": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoded, (self.batch_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_72": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_79": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_86": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_96": {
                "variable": {
                    "value": "self.score_dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_103": {
                "variable": {
                    "value": "self.score_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_113": {
                "variable": {
                    "value": "self.ext_dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_120": {
                "variable": {
                    "value": "self.ext_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(net, (self.batch_size, self.n_pred, -1))",
                            "Call"
                        ],
                        [
                            "self.dense1(net)",
                            "Call"
                        ],
                        [
                            "self.dense2(net)",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, (self.batch_size, self.n_pred, -1))",
                            "Call"
                        ],
                        [
                            "self.score_dense1(net)",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, (self.batch_size, self.n_pred, -1))",
                            "Call"
                        ],
                        [
                            "self.ext_dense1(net)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, self.n_pred, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_137": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.clip_by_value(pred[:, :, :2], -2, 2), tf.expand_dims(pred[:, :, 2], -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(net, (self.batch_size, self.n_pred, -1))",
                            "Call"
                        ],
                        [
                            "self.dense1(net)",
                            "Call"
                        ],
                        [
                            "self.dense2(net)",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, (self.batch_size, self.n_pred, -1))",
                            "Call"
                        ],
                        [
                            "self.score_dense1(net)",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, (self.batch_size, self.n_pred, -1))",
                            "Call"
                        ],
                        [
                            "self.ext_dense1(net)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, self.n_pred, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(net, (self.batch_size, self.n_pred, -1))",
                            "Call"
                        ],
                        [
                            "self.dense1(net)",
                            "Call"
                        ],
                        [
                            "self.dense2(net)",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, (self.batch_size, self.n_pred, -1))",
                            "Call"
                        ],
                        [
                            "self.score_dense1(net)",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, (self.batch_size, self.n_pred, -1))",
                            "Call"
                        ],
                        [
                            "self.ext_dense1(net)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, self.n_pred, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_utils.fixed_crop3d(input, boxes, points)",
                            "Call"
                        ],
                        [
                            "tf.reshape(crops, (crops.shape[0] * crops.shape[1], -1, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(crops.shape[0] * crops.shape[1], -1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_171": {
                "variable": {
                    "value": "scene_code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scene_code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "tf.tile(scene_code, [tf.cast(patch_code.shape[0] / scene_code.shape[0], tf.int8), 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[tf.cast(patch_code.shape[0] / scene_code.shape[0], tf.int8), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_176": {
                "variable": {
                    "value": "patch_code",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[scene_code, patch_code]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_138": {
                "t": {
                    "value": "pred[:, :, :2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_139": {
                "input": {
                    "value": "pred[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_173": {
                "x": {
                    "value": "patch_code.shape[0] / scene_code.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scene_network/train.py": {
        "tensorflow": {
            "set_seed_15": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'train_dataset': './data/s3d_scene_train.tfrecord', 'test_dataset': './data/s3d_scene_test.tfrecord', 'loss_weights': './logs/lossnet_1/models/weights.ckpt', 'log_dir': './logs', 'log_code': 'scenenet_1', 'log_freq': 10, 'test_freq': 25, 'loss_size': 1.0, 'loss_points': 4096, 'num_points': 32768, 'batch_size': 2, 'lr': 0.0001, 'n_pred': 15, 'max_labels': 25, 'unsupervised': True, 'loss_network_inf': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "create_file_writer_89": {
                "variable": {
                    "value": "train_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(config['log_dir'], config['log_code'], 'tensorboard', 'train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "create_file_writer_92": {
                "variable": {
                    "value": "test_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(config['log_dir'], config['log_code'], 'tensorboard', 'test')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "lossnet_results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_model(tf.reshape(crops, (crops.shape[0] * crops.shape[1], -1, 3)))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(pred_points.shape[0], -1, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "text_102": {
                "name": {
                    "value": "config",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf_utils.tb_config(config)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "tensor": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_pts)",
                            "Call"
                        ],
                        [
                            "tf_utils.fixed_crop3d(train_pts, boxes, pred_points)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(crops.shape[0] * crops.shape[1], -1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataset.py": {
        "tensorflow": {
            "TFRecordDataset_31": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_file",
                            "Method Argument"
                        ],
                        [
                            "in_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TFRecordDataset_76": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_file",
                            "Method Argument"
                        ],
                        [
                            "in_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['points']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pts, (n_points, 3))",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(pts)",
                            "Call"
                        ],
                        [
                            "sample['points']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pts, (n_points, 3))",
                            "Call"
                        ],
                        [
                            "tf.gather(pts, shuffle_idx)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_points, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shuffle_27": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['points']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pts, (n_points, 3))",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(pts)",
                            "Call"
                        ],
                        [
                            "sample['points']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pts, (n_points, 3))",
                            "Call"
                        ],
                        [
                            "tf.gather(pts, shuffle_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['points']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pts, (n_points, 3))",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(pts)",
                            "Call"
                        ],
                        [
                            "sample['points']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pts, (n_points, 3))",
                            "Call"
                        ],
                        [
                            "tf.gather(pts, shuffle_idx)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_points, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['colors']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(cols, (n_points, 3))",
                            "Call"
                        ],
                        [
                            "tf.gather(cols, shuffle_idx)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_points, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['labels']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(labels, (max_labels, n_labels))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(max_labels, n_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_68": {
                "variable": {
                    "value": "shuffle_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shuffle_69": {
                "variable": {
                    "value": "shuffle_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "shuffle_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(n_points)",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(shuffle_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_71": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['points']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pts, (n_points, 3))",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(pts)",
                            "Call"
                        ],
                        [
                            "sample['points']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pts, (n_points, 3))",
                            "Call"
                        ],
                        [
                            "tf.gather(pts, shuffle_idx)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "shuffle_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(n_points)",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(shuffle_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_72": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['colors']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(cols, (n_points, 3))",
                            "Call"
                        ],
                        [
                            "tf.gather(cols, shuffle_idx)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "shuffle_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(n_points)",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(shuffle_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "parse_single_example_19": {
                "serialized": {
                    "value": "data_record",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_record",
                            "Method Argument"
                        ],
                        [
                            "data_record",
                            "Method Argument"
                        ]
                    ]
                },
                "features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'points': tf.io.FixedLenFeature([n_points * 3], tf.float32), 'colors': tf.io.FixedLenFeature([n_points * 3], tf.float32), 'label': tf.io.FixedLenFeature([n_labels], tf.float32)}",
                            "Dict"
                        ],
                        [
                            "{'points': tf.io.FixedLenFeature([n_points * 3], tf.float32), 'colors': tf.io.FixedLenFeature([n_points * 3], tf.float32), 'labels': tf.io.FixedLenFeature([max_labels * n_labels], tf.float32), 'n_inst': tf.io.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "parse_single_example_56": {
                "serialized": {
                    "value": "data_record",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_record",
                            "Method Argument"
                        ],
                        [
                            "data_record",
                            "Method Argument"
                        ]
                    ]
                },
                "features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'points': tf.io.FixedLenFeature([n_points * 3], tf.float32), 'colors': tf.io.FixedLenFeature([n_points * 3], tf.float32), 'label': tf.io.FixedLenFeature([n_labels], tf.float32)}",
                            "Dict"
                        ],
                        [
                            "{'points': tf.io.FixedLenFeature([n_points * 3], tf.float32), 'colors': tf.io.FixedLenFeature([n_points * 3], tf.float32), 'labels': tf.io.FixedLenFeature([max_labels * n_labels], tf.float32), 'n_inst': tf.io.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "FixedLenFeature_14": {
                "shape": {
                    "value": "[n_points * 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_15": {
                "shape": {
                    "value": "[n_points * 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_16": {
                "shape": {
                    "value": "[n_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_50": {
                "shape": {
                    "value": "[n_points * 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_51": {
                "shape": {
                    "value": "[n_points * 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_52": {
                "shape": {
                    "value": "[max_labels * n_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_53": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/eval.py": {
        "tensorflow": {}
    },
    "utils/halton.py": {
        "tensorflow": {
            "constant_83": {
                "value": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([halton(dim, n_sample) for _ in range(batch_size)], dtype=np.float32) * (extent / 0.5)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_78": {
                "x": {
                    "value": "tf.constant([halton(dim, n_sample) for _ in range(batch_size)])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_78": {
                "value": {
                    "value": "[halton(dim, n_sample) for _ in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/helpers.py": {
        "tensorflow": {
            "constant_237": {
                "value": {
                    "value": "out_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((extent.shape[0], extent.shape[1], 6))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/losses.py": {
        "tensorflow": {
            "expand_dims_17": {
                "variable": {
                    "value": "a_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_18": {
                "variable": {
                    "value": "b_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b in range(labels.shape[0])",
                            "Call"
                        ],
                        [
                            "b in range(labels.shape[0])",
                            "Call"
                        ],
                        [
                            "b in range(batch_size)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_20": {
                "variable": {
                    "value": "a_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(a, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(a_tile, [1, 1, m, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, m, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_21": {
                "variable": {
                    "value": "b_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(b, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(b_tile, [1, n, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, n, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_23": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(a_tile - b_tile)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_min_25": {
                "variable": {
                    "value": "dist1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(a_tile - b_tile), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_26": {
                "variable": {
                    "value": "idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(a_tile - b_tile), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_28": {
                "variable": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(a_tile - b_tile), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_29": {
                "variable": {
                    "value": "idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(a_tile - b_tile), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_84": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(pred, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(grads)",
                            "Call"
                        ],
                        [
                            "lossnet_results[:, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "tf.where(iou_mask == True, grads, tf.zeros_like(pred_points))",
                            "Call"
                        ],
                        [
                            "t.gradient(loss, pred)",
                            "Call"
                        ],
                        [
                            "tf.where(iou_mask == False, grads, tf.zeros_like(grads))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_96": {
                "variable": {
                    "value": "max_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(patch_size / 2.0) ** 2 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MeanSquaredError_98": {
                "variable": {
                    "value": "loss_MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_99": {
                "variable": {
                    "value": "loss_BCE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_149": {
                "variable": {
                    "value": "grad_points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grad_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(pred_points, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(grad_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_150": {
                "variable": {
                    "value": "grad_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grad_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(pred_scores, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(grad_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_151": {
                "variable": {
                    "value": "grad_exts",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grad_exts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(pred_exts, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(grad_exts)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_153": {
                "variable": {
                    "value": "loss_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(batch_size, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "loss_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(batch_size, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "loss_exts",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_exts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(batch_size, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_exts)",
                            "Call"
                        ]
                    ]
                }
            },
            "MeanSquaredError_166": {
                "variable": {
                    "value": "loss_MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_167": {
                "variable": {
                    "value": "loss_BCE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_173": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "iou_mask == True",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(pred, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(grads)",
                            "Call"
                        ],
                        [
                            "lossnet_results[:, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "tf.where(iou_mask == True, grads, tf.zeros_like(pred_points))",
                            "Call"
                        ],
                        [
                            "t.gradient(loss, pred)",
                            "Call"
                        ],
                        [
                            "tf.where(iou_mask == False, grads, tf.zeros_like(grads))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(pred_points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_175": {
                "variable": {
                    "value": "lossnet_results",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grads, lossnet_results[:, :, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lossnet_results[:, :, 9]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(pred_points.shape[0], -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_179": {
                "variable": {
                    "value": "score_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "score_labels > conf_thresh",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(score_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(score_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_180": {
                "variable": {
                    "value": "score_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "iou_mask == True",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "score_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(euc_dists.shape[1], np.float32)",
                            "Call"
                        ],
                        [
                            "lossnet_results[:, :, 8:10]",
                            "Subscript"
                        ],
                        [
                            "tf.where(score_labels > conf_thresh, tf.ones_like(score_labels), tf.zeros_like(score_labels))",
                            "Call"
                        ],
                        [
                            "tf.where(iou_mask == True, score_labels, tf.zeros_like(score_labels))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(score_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_181": {
                "variable": {
                    "value": "ext_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "conf > conf_thresh",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "lossnet_results[:, :, 3:8]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(pred_exts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_188": {
                "variable": {
                    "value": "grads_p",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "conf >= conf_thresh",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(pred, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(grads)",
                            "Call"
                        ],
                        [
                            "lossnet_results[:, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "tf.where(iou_mask == True, grads, tf.zeros_like(pred_points))",
                            "Call"
                        ],
                        [
                            "t.gradient(loss, pred)",
                            "Call"
                        ],
                        [
                            "tf.where(iou_mask == False, grads, tf.zeros_like(grads))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(pred_points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_191": {
                "variable": {
                    "value": "grads_e",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "conf > conf_thresh",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "grads_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_tape.gradient(exts_loss, pred_exts)",
                            "Call"
                        ],
                        [
                            "tf.where(conf > conf_thresh, grads_e, tf.zeros_like(pred_exts))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(pred_exts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_209": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "iou_mask == False",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(pred, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(grads)",
                            "Call"
                        ],
                        [
                            "lossnet_results[:, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "tf.where(iou_mask == True, grads, tf.zeros_like(pred_points))",
                            "Call"
                        ],
                        [
                            "t.gradient(loss, pred)",
                            "Call"
                        ],
                        [
                            "tf.where(iou_mask == False, grads, tf.zeros_like(grads))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(grads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_41": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_44": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ],
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ],
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(gt, tf.bool)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(gt, tf.bool)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(gt, tf.bool)[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_45": {
                "variable": {
                    "value": "gt_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt[:, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_53": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(pred.shape[0])",
                            "Call"
                        ],
                        [
                            "np.zeros(pred.shape[0])",
                            "Call"
                        ],
                        [
                            "tf_utils.iou_matrix_2d(pred, clip_border=0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_68": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_71": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ],
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ],
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(gt, tf.bool)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(gt, tf.bool)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(gt, tf.bool)[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_72": {
                "variable": {
                    "value": "gt_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt[:, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_112": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_points[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_117": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ],
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ],
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(gt, tf.bool)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(gt, tf.bool)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(gt, tf.bool)[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_118": {
                "variable": {
                    "value": "gt_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt[:, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MeanSquaredError_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_23": {
                "x": {
                    "value": "a_tile - b_tile",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(pred.shape[0])",
                            "Call"
                        ],
                        [
                            "np.zeros(pred.shape[0])",
                            "Call"
                        ],
                        [
                            "tf_utils.iou_matrix_2d(pred, clip_border=0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_131": {
                "variable": {
                    "value": "euc_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_gt_dist + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_134": {
                "variable": {
                    "value": "score_labels_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(score_labels, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_137": {
                "variable": {
                    "value": "ext_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gt_ext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[:, 3:8]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "p_gt_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ],
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ],
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ]
                    ]
                },
                "validate_indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_138": {
                "variable": {
                    "value": "ext_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.cast(tf.expand_dims(score_labels, -1), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "ext_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(gt_ext, p_gt_idx, 1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.cast(tf.expand_dims(score_labels, -1), tf.bool), ext_labels, tf.zeros_like(ext_labels))",
                            "Call"
                        ],
                        [
                            "tf.where(conf > conf_thresh, lossnet_results[:, :, 3:8], tf.zeros_like(pred_exts))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(ext_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_173": {
                "input": {
                    "value": "pred_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_points",
                            "Method Argument"
                        ],
                        [
                            "pred_points",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_179": {
                "input": {
                    "value": "score_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(euc_dists.shape[1], np.float32)",
                            "Call"
                        ],
                        [
                            "lossnet_results[:, :, 8:10]",
                            "Subscript"
                        ],
                        [
                            "tf.where(score_labels > conf_thresh, tf.ones_like(score_labels), tf.zeros_like(score_labels))",
                            "Call"
                        ],
                        [
                            "tf.where(iou_mask == True, score_labels, tf.zeros_like(score_labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_179": {
                "input": {
                    "value": "score_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(euc_dists.shape[1], np.float32)",
                            "Call"
                        ],
                        [
                            "lossnet_results[:, :, 8:10]",
                            "Subscript"
                        ],
                        [
                            "tf.where(score_labels > conf_thresh, tf.ones_like(score_labels), tf.zeros_like(score_labels))",
                            "Call"
                        ],
                        [
                            "tf.where(iou_mask == True, score_labels, tf.zeros_like(score_labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_180": {
                "input": {
                    "value": "score_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(euc_dists.shape[1], np.float32)",
                            "Call"
                        ],
                        [
                            "lossnet_results[:, :, 8:10]",
                            "Subscript"
                        ],
                        [
                            "tf.where(score_labels > conf_thresh, tf.ones_like(score_labels), tf.zeros_like(score_labels))",
                            "Call"
                        ],
                        [
                            "tf.where(iou_mask == True, score_labels, tf.zeros_like(score_labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_181": {
                "input": {
                    "value": "pred_exts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_exts",
                            "Method Argument"
                        ],
                        [
                            "pred_exts",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GradientTape_183": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_188": {
                "input": {
                    "value": "pred_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_points",
                            "Method Argument"
                        ],
                        [
                            "pred_points",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_191": {
                "input": {
                    "value": "pred_exts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_exts",
                            "Method Argument"
                        ],
                        [
                            "pred_exts",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GradientTape_202": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_209": {
                "input": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(pred, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(grads)",
                            "Call"
                        ],
                        [
                            "lossnet_results[:, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "tf.where(iou_mask == True, grads, tf.zeros_like(pred_points))",
                            "Call"
                        ],
                        [
                            "t.gradient(loss, pred)",
                            "Call"
                        ],
                        [
                            "tf.where(iou_mask == False, grads, tf.zeros_like(grads))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_43": {
                "x": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ],
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ],
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_49": {
                "input_tensor": {
                    "value": "p_gt_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ],
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ],
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_70": {
                "x": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ],
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ],
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_74": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_116": {
                "x": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ],
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ],
                        [
                            "labels[b]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(gt, gt_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_121": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_129": {
                "variable": {
                    "value": "chamfer_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gt_p_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ],
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ],
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_157": {
                "input": {
                    "value": "score_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(euc_dists.shape[1], np.float32)",
                            "Call"
                        ],
                        [
                            "lossnet_results[:, :, 8:10]",
                            "Subscript"
                        ],
                        [
                            "tf.where(score_labels > conf_thresh, tf.ones_like(score_labels), tf.zeros_like(score_labels))",
                            "Call"
                        ],
                        [
                            "tf.where(iou_mask == True, score_labels, tf.zeros_like(score_labels))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_79": {
                "input_tensor": {
                    "value": "p_gt_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ],
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ],
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_134": {
                "x": {
                    "value": "score_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(euc_dists.shape[1], np.float32)",
                            "Call"
                        ],
                        [
                            "lossnet_results[:, :, 8:10]",
                            "Subscript"
                        ],
                        [
                            "tf.where(score_labels > conf_thresh, tf.ones_like(score_labels), tf.zeros_like(score_labels))",
                            "Call"
                        ],
                        [
                            "tf.where(iou_mask == True, score_labels, tf.zeros_like(score_labels))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_138": {
                "x": {
                    "value": "tf.expand_dims(score_labels, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_138": {
                "input": {
                    "value": "ext_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(gt_ext, p_gt_idx, 1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.cast(tf.expand_dims(score_labels, -1), tf.bool), ext_labels, tf.zeros_like(ext_labels))",
                            "Call"
                        ],
                        [
                            "tf.where(conf > conf_thresh, lossnet_results[:, :, 3:8], tf.zeros_like(pred_exts))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_138": {
                "input": {
                    "value": "score_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(euc_dists.shape[1], np.float32)",
                            "Call"
                        ],
                        [
                            "lossnet_results[:, :, 8:10]",
                            "Subscript"
                        ],
                        [
                            "tf.where(score_labels > conf_thresh, tf.ones_like(score_labels), tf.zeros_like(score_labels))",
                            "Call"
                        ],
                        [
                            "tf.where(iou_mask == True, score_labels, tf.zeros_like(score_labels))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_127": {
                "input_tensor": {
                    "value": "p_gt_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ],
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ],
                        [
                            "nn_distance(gt_pts, pts)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/tf_utils.py": {
        "tensorflow": {
            "join_74": {
                "variable": {
                    "value": "table_rows",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_join_75": {
                "variable": {
                    "value": "table_body",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "table_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.join(s)",
                            "Call"
                        ]
                    ]
                },
                "separator": {
                    "value": "\\n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "join_76": {
                "variable": {
                    "value": "table",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[header_row, '---|---', table_body]",
                    "type": "List",
                    "possible_values": []
                },
                "separator": {
                    "value": "\\n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_198": {
                "variable": {
                    "value": "(x1_min, y1_min, z1_min, x1_max, y1_max, z1_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_to_boxes(pred, clip_border)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack([min, max], axis=1), (pred.shape[0], pred.shape[1], 6))",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_200": {
                "variable": {
                    "value": "(x2_min, y2_min, z2_min, x2_max, y2_max, z2_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_to_boxes(pred, clip_border)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack([min, max], axis=1), (pred.shape[0], pred.shape[1], 6))",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_204": {
                "variable": {
                    "value": "intersection_xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(value=boxes, num_or_size_splits=6, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(x2_min, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_205": {
                "variable": {
                    "value": "intersection_xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(value=boxes, num_or_size_splits=6, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(x2_max, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_206": {
                "variable": {
                    "value": "intersection_ymin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(value=boxes, num_or_size_splits=6, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(y2_min, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_207": {
                "variable": {
                    "value": "intersection_ymax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(value=boxes, num_or_size_splits=6, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(y2_max, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_218": {
                "variable": {
                    "value": "padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(intersection_xmax, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(intersection_ymax, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_223": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersection_area / union_area",
                            "BinOp"
                        ],
                        [
                            "iou",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_224": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersection_area / union_area",
                            "BinOp"
                        ],
                        [
                            "iou",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "band_part_226": {
                "variable": {
                    "value": "lower_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(iou)",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "band_part_227": {
                "variable": {
                    "value": "diag_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(iou)",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_228": {
                "variable": {
                    "value": "zero_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(iou > 0, ones, zeros)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_229": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lower_mask - diag_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_230": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(lower_mask - diag_mask, dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(mask, zero_mask)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.where(scores >= thresh)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tf.argmax(scores, axis=1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(iou > 0, ones, zeros), tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_231": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(lower_mask - diag_mask, dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(mask, zero_mask)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.where(scores >= thresh)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tf.argmax(scores, axis=1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "maximum_233": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(iou - tf.eye(boxes.shape[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_315": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(xyz, mask, batch_dims=0, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(xyz, 0)",
                            "Call"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(lower_mask - diag_mask, dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(mask, zero_mask)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.where(scores >= thresh)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tf.argmax(scores, axis=1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_316": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(scores[scores > scores_thresh], -1)",
                            "Call"
                        ],
                        [
                            "tf.gather(scores, mask, batch_dims=0, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scores, 0)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(lower_mask - diag_mask, dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(mask, zero_mask)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.where(scores >= thresh)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tf.argmax(scores, axis=1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_317": {
                "variable": {
                    "value": "exts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "exts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(exts, mask, batch_dims=0, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(exts, 0)",
                            "Call"
                        ],
                        [
                            "exts",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(lower_mask - diag_mask, dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(mask, zero_mask)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.where(scores >= thresh)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tf.argmax(scores, axis=1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_329": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "subtract_330": {
                "variable": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_to_boxes(pred, clip_border)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack([min, max], axis=1), (pred.shape[0], pred.shape[1], 6))",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "offset / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_331": {
                "variable": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_to_boxes(pred, clip_border)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack([min, max], axis=1), (pred.shape[0], pred.shape[1], 6))",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "offset / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_332": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([min, max], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(pred.shape[0], pred.shape[1], 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Feature_8": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_12": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_60": {
                "value": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_110": {
                "x": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_to_boxes(pred, clip_border)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred, (-1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack([min, max], axis=1), (pred.shape[0], pred.shape[1], 6))",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(offset_arr, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_305": {
                "tensor": {
                    "value": "tf.constant(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(pred.shape[0], pred.shape[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_320": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(xyz, mask, batch_dims=0, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(xyz, 0)",
                            "Call"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_321": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(scores[scores > scores_thresh], -1)",
                            "Call"
                        ],
                        [
                            "tf.gather(scores, mask, batch_dims=0, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scores, 0)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_322": {
                "variable": {
                    "value": "exts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(exts, mask, batch_dims=0, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(exts, 0)",
                            "Call"
                        ],
                        [
                            "exts",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "shape": {
                    "value": "(batch_size, num_points, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_110": {
                "value": {
                    "value": "offset_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(boxes.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros(boxes.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_204": {
                "a": {
                    "value": "x2_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(value=boxes, num_or_size_splits=6, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_205": {
                "a": {
                    "value": "x2_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(value=boxes, num_or_size_splits=6, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_206": {
                "a": {
                    "value": "y2_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(value=boxes, num_or_size_splits=6, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_207": {
                "a": {
                    "value": "y2_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(value=boxes, num_or_size_splits=6, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_209": {
                "x": {
                    "value": "intersection_xmax - intersection_xmin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_210": {
                "x": {
                    "value": "intersection_ymax - intersection_ymin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_219": {
                "x": {
                    "value": "intersection_xmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(x1_max, tf.transpose(x2_max, [0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_220": {
                "x": {
                    "value": "intersection_ymax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(y1_max, tf.transpose(y2_max, [0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_228": {
                "condition": {
                    "value": "iou > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(iou)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(iou)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_233": {
                "input_tensor": {
                    "value": "iou - tf.eye(boxes.shape[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_251": {
                "variable": {
                    "value": "confs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.gather(lossnet_results[i, :, -1], arr[:, 0]), tf.gather(lossnet_results[i, :, -1], arr[:, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_274": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.gather(pred[i, :, :3], arr[:, 0]), tf.gather(pred[i, :, :3], arr[:, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_283": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(pred_dest[:, :2, 0] - pred_dest[:, :2, 1]), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_284": {
                "variable": {
                    "value": "d_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "dists < mask_dist",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(dists, dtype=tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(dists, dtype=tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_289": {
                "variable": {
                    "value": "loss_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.gather(lossnet_results[i, :, :3], arr[:, 0]), tf.gather(lossnet_results[i, :, :3], arr[:, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_294": {
                "variable": {
                    "value": "lvec_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(tf.zeros_like(loss_vec) - loss_vec), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_305": {
                "value": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(lower_mask - diag_mask, dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(mask, zero_mask)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.where(scores >= thresh)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tf.argmax(scores, axis=1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_310": {
                "condition": {
                    "value": "scores >= thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "rank_319": {
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(xyz, mask, batch_dims=0, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(xyz, 0)",
                            "Call"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_332": {
                "values": {
                    "value": "[min, max]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FloatList_8": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Int64List_12": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_313": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(scores[scores > scores_thresh], -1)",
                            "Call"
                        ],
                        [
                            "tf.gather(scores, mask, batch_dims=0, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scores, 0)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_214": {
                "a": {
                    "value": "area2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x2_max - x2_min) * (y2_max - y2_min)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_233": {
                "num_rows": {
                    "value": "boxes.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_269": {
                "values": {
                    "value": "[tf.gather(lossnet_results[i, :, :3], arr[:, 0]), tf.gather(lossnet_results[i, :, :3], arr[:, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_283": {
                "input_tensor": {
                    "value": "tf.square(pred_dest[:, :2, 0] - pred_dest[:, :2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_284": {
                "input": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(pred_dest[:, :2, 0] - pred_dest[:, :2, 1]), axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_284": {
                "input": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(pred_dest[:, :2, 0] - pred_dest[:, :2, 1]), axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_286": {
                "input": {
                    "value": "d_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists < mask_dist, tf.ones_like(dists, dtype=tf.bool), tf.zeros_like(dists, dtype=tf.bool))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_294": {
                "input_tensor": {
                    "value": "tf.square(tf.zeros_like(loss_vec) - loss_vec)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_248": {
                "params": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(ovr <= iou_thresh)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.where(mask)",
                            "Call"
                        ],
                        [
                            "inds",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(tf.where(inds[:, 0] == i), [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_252": {
                "params": {
                    "value": "lossnet_results[i, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "arr[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_253": {
                "params": {
                    "value": "lossnet_results[i, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "arr[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_275": {
                "params": {
                    "value": "pred[i, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "arr[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_276": {
                "params": {
                    "value": "pred[i, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "arr[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_283": {
                "x": {
                    "value": "pred_dest[:, :2, 0] - pred_dest[:, :2, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_290": {
                "params": {
                    "value": "lossnet_results[i, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "arr[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_291": {
                "params": {
                    "value": "lossnet_results[i, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "arr[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_294": {
                "x": {
                    "value": "tf.zeros_like(loss_vec) - loss_vec",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_248": {
                "tensor": {
                    "value": "tf.where(inds[:, 0] == i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_270": {
                "params": {
                    "value": "lossnet_results[i, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "arr[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_271": {
                "params": {
                    "value": "lossnet_results[i, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "arr[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_297": {
                "input": {
                    "value": "lvec_l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(tf.zeros_like(loss_vec) - loss_vec), axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_248": {
                "condition": {
                    "value": "inds[:, 0] == i",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_like_294": {
                "input": {
                    "value": "loss_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.gather(lossnet_results[i, :, :3], arr[:, 0]), tf.gather(lossnet_results[i, :, :3], arr[:, 1])], axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}