{
    "ARAE_utils.py": {
        "torch": {
            "Linear_41": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_124": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_125": {
                "variable": {
                    "value": "self.embedding_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_128": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "nlayers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_135": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "decoder_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emsize + nhidden",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_173": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_195": {
                "variable": {
                    "value": "packed_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(indices)",
                            "Call"
                        ],
                        [
                            "self.embedding_decoder(indices)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "augmented_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embeddings, all_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_222": {
                "variable": {
                    "value": "packed_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "augmented_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([embeddings, all_hidden], 2)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_227": {
                "variable": {
                    "value": "(output, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding, hidden.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "max_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding, hidden.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_339": {
                "variable": {
                    "value": "max_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_80": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_204": {
                "variable": {
                    "value": "gauss_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(hidden.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "self.noise_r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding, hidden.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding, hidden.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_346": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "overvocab + mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_34": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_164": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.nhidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_201": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "state[0][-1]",
                            "Subscript"
                        ],
                        [
                            "hidden / torch.norm(hidden, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "hidden + Variable(gauss_noise.cuda())",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_263": {
                "variable": {
                    "value": "(vals, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "overvocab + mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_265": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_266": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(overvocab / temp, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(overvocab / temp, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_305": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "overvocab + mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_328": {
                "variable": {
                    "value": "(vals, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "self.linear(output.squeeze(1))",
                            "Call"
                        ],
                        [
                            "overvocab + mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_331": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overvocab / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_332": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(overvocab / temp, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(overvocab / temp, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_121": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "*size": {
                    "value": "hidden.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_347": {
                "input": {
                    "value": "logit[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_364": {
                "ndarray": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_306": {
                "input": {
                    "value": "logit[:, 64]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "attack_util.py": {
        "torch": {
            "zeros_like_11": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "tensor_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[GPT2_tokenizer.bos_token_id] + GPT2_tokenizer.convert_tokens_to_ids(tokenize_input) + [GPT2_tokenizer.eos_token_id]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_26": {
                "variable": {
                    "value": "noise_radius",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noise ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_28": {
                "variable": {
                    "value": "noise_radius",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noise_radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(noise ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(noise_radius)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_29": {
                "input": {
                    "value": "noise_radius[mask_proj]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "snli/snli_attack.py": {
        "torch": {
            "cat_97": {
                "variable": {
                    "value": "premise_enhanced",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_premise, attended_hypothesis, encoded_premise - attended_hypothesis, encoded_premise * attended_hypothesis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "hypothesis_enhanced",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_hypothesis, attended_premise, encoded_hypothesis - attended_premise, encoded_hypothesis * attended_premise]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "v_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_a_avg, v_a_max, v_b_avg, v_b_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "variable": {
                    "value": "label_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model._output_logit(output_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_196": {
                "variable": {
                    "value": "loaded",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.load_path, 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "mask_ARAE_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_ARAE_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 1, len(ARAE_words)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(mask_ARAE_logits, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "mask_ARAE_logits.float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_270": {
                "variable": {
                    "value": "ARAE_weight_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(ARAE_weight_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_68": {
                "variable": {
                    "value": "trigger_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(hypothesis_mask.shape[0], trigger_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hypothesis_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "embedded_hypothesis",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded_trigger[:embedded_hypothesis.shape[0]], embedded_hypothesis)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "hypothesis_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(trigger_mask, hypothesis_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_232": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_233": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_312": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "noise_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.noise_n",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "ARAE_args['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "premise_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_text_field_mask(premise)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_136": {
                "input": {
                    "value": "hypothesis_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_text_field_mask(hypothesis)",
                            "Call"
                        ],
                        [
                            "torch.cat((trigger_mask, hypothesis_mask), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_310": {
                "seed": {
                    "value": "args.z_seed + tmp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_332": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_335": {
                "variable": {
                    "value": "decoded_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_337": {
                "variable": {
                    "value": "out_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(decoded, dim=-1)",
                            "Call"
                        ],
                        [
                            "one_hot_prob(decoded_prob, max_indices)",
                            "Call"
                        ],
                        [
                            "F.softmax(decoded, dim=-1)",
                            "Call"
                        ],
                        [
                            "one_hot_prob(decoded_prob, max_indices)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ARAE_weight_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.array(ARAE_weight_embedding)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "repeat_interleave_334": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "n_repeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_402": {
                "variable": {
                    "value": "sen_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(decoded, dim=-1)",
                            "Call"
                        ],
                        [
                            "one_hot_prob(decoded_prob, max_indices)",
                            "Call"
                        ],
                        [
                            "F.softmax(decoded, dim=-1)",
                            "Call"
                        ],
                        [
                            "one_hot_prob(decoded_prob, max_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_389": {
                "variable": {
                    "value": "noise_new",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "noise_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.noise_n",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "ARAE_args['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_395": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_399": {
                "variable": {
                    "value": "decoded_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "repeat_interleave_397": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "n_repeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sst/sst_attack.py": {
        "torch": {
            "load_58": {
                "variable": {
                    "value": "loaded",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.load_path, 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "sst_emb_weight.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "ARAE_weight_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(ARAE_weight_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "mask_sentiment_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_sentiment_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 1, len(ARAE_words)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(mask_sentiment_logits, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "mask_sentiment_logits.float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_97": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_234": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "noise_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.noise_n",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "ARAE_args['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_116": {
                "*args": {
                    "value": "word_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_232": {
                "seed": {
                    "value": "args.z_seed + tmp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_256": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_260": {
                "variable": {
                    "value": "decoded_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_262": {
                "variable": {
                    "value": "out_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(decoded, dim=-1)",
                            "Call"
                        ],
                        [
                            "one_hot_prob(decoded_prob, max_indices)",
                            "Call"
                        ],
                        [
                            "F.softmax(decoded, dim=-1)",
                            "Call"
                        ],
                        [
                            "one_hot_prob(decoded_prob, max_indices)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ARAE_weight_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.array(ARAE_weight_embedding)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_124": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "repeat_interleave_258": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "n_repeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_323": {
                "variable": {
                    "value": "sen_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(decoded, dim=-1)",
                            "Call"
                        ],
                        [
                            "one_hot_prob(decoded_prob, max_indices)",
                            "Call"
                        ],
                        [
                            "F.softmax(decoded, dim=-1)",
                            "Call"
                        ],
                        [
                            "one_hot_prob(decoded_prob, max_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_310": {
                "variable": {
                    "value": "noise_new",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "noise_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.noise_n",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "ARAE_args['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_316": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_320": {
                "variable": {
                    "value": "decoded_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "repeat_interleave_318": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(decoded, dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(decoded, repeats=n_repeat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "n_repeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sst/sst_classifier.py": {
        "torch": {
            "Linear_31": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab.get_vocab_size('labels')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_34": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(mask.size(0), trigger_len, dtype=mask.dtype, device=mask.device), mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_emb[:embeddings.size(0), :, :], embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_60": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tirgger_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tri_emb.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "trigger_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tri_emb.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "tri_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "trigger_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tri_emb.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "Adam_82": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "averaged_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extracted_grads[0].cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "batch[tokens][tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(trigger_sequence_tensor, original_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "batch[hypothesis][tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(trigger_sequence_tensor, original_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "batch[premise][tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(trigger_sequence_tensor, original_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_89": {
                "input": {
                    "value": "batch[0]['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}