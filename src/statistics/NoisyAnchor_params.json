{
    "demo/predictor.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "self.cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_count_32": {
                "variable": {
                    "value": "num_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/checkpoint/c2_model_loading.py": {
        "torch": {
            "as_tensor_248": {
                "variable": {
                    "value": "match_matrix",
                    "possible_values": []
                },
                "data": {
                    "value": "match_matrix",
                    "possible_values": [
                        [
                            "[len(j) if match(i, j) else 0 for i in model_keys for j in ckpt_keys]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(match_matrix).view(len(model_keys), len(ckpt_keys))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_202": {
                "variable": {
                    "value": "new_weights[renamed]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weights[orig][1:], weights[orig][:1]]",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/data/build.py": {
        "torch": {}
    },
    "detectron2/data/common.py": {
        "torch": {
            "MapDataset_14": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self._dataset": {
                    "value": "dataset",
                    "possible_values": []
                }
            },
            "DatasetFromList_60": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self._lst": {
                    "value": "lst",
                    "possible_values": []
                },
                "self._copy": {
                    "value": "copy",
                    "possible_values": []
                },
                "self._serialize": {
                    "value": "serialize",
                    "possible_values": []
                }
            },
            "AspectRatioGroupedDataset_115": {
                "base_class_0": {
                    "value": "torch.utils.data.IterableDataset",
                    "possible_values": []
                },
                "self.dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "self.batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/data/dataset_mapper.py": {
        "torch": {
            "as_tensor_103": {
                "variable": {
                    "value": "dataset_dict[image]",
                    "possible_values": []
                },
                "data": {
                    "value": "np.ascontiguousarray(image.transpose(2, 0, 1))",
                    "possible_values": []
                }
            },
            "as_tensor_147": {
                "variable": {
                    "value": "sem_seg_gt",
                    "possible_values": []
                },
                "data": {
                    "value": "sem_seg_gt.astype('long')",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/data/detection_utils.py": {
        "torch": {
            "tensor_256": {
                "variable": {
                    "value": "classes",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in annos]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "[obj['category_id'] for obj in annos]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "tensor_322": {
                "variable": {
                    "value": "classes",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in annos]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "[obj['category_id'] for obj in annos]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "as_tensor_125": {
                "variable": {
                    "value": "objectness_logits",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset_dict.pop('proposal_objectness_logits').astype('float32')",
                    "possible_values": []
                }
            },
            "stack_288": {
                "tensors": {
                    "value": "[torch.from_numpy(np.ascontiguousarray(x)) for x in masks]",
                    "possible_values": []
                }
            },
            "from_numpy_288": {
                "ndarray": {
                    "value": "np.ascontiguousarray(x)",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/data/samplers/distributed_sampler.py": {
        "torch": {
            "TrainingSampler_12": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                },
                "self._size": {
                    "value": "size",
                    "possible_values": []
                },
                "self._shuffle": {
                    "value": "shuffle",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RepeatFactorTrainingSampler_57": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                },
                "self._shuffle": {
                    "value": "shuffle",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "trunc_90": {
                    "variable": {
                        "value": "self._int_part",
                        "possible_values": []
                    },
                    "input": {
                        "value": "rep_factors",
                        "possible_values": [
                            [
                                "self._get_repeat_factors(dataset_dicts, repeat_thresh)",
                                "Call"
                            ],
                            [
                                "[]",
                                "List"
                            ],
                            [
                                "self._int_part + (rands < self._frac_part).float()",
                                "BinOp"
                            ]
                        ]
                    }
                }
            },
            "InferenceSampler_172": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                },
                "self._size": {
                    "value": "size",
                    "possible_values": []
                }
            },
            "Generator_48": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_146": {
                "variable": {
                    "value": "rands",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self._frac_part)",
                    "possible_values": []
                },
                "generator": {
                    "value": "generator",
                    "possible_values": []
                }
            },
            "Generator_159": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "rep_factors",
                    "possible_values": [
                        [
                            "self._get_repeat_factors(dataset_dicts, repeat_thresh)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._int_part + (rands < self._frac_part).float()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._get_epoch_indices(g)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "randperm_166": {
                "variable": {
                    "value": "randperm",
                    "possible_values": []
                },
                "n": {
                    "value": "len(indices)",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_52": {
                "n": {
                    "value": "self._size",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_54": {
                "start": {
                    "value": "self._size",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/data/samplers/grouped_batch_sampler.py": {
        "torch": {
            "GroupedBatchSampler_6": {
                "base_class_0": {
                    "value": "torch.utils.data.BatchSampler",
                    "possible_values": []
                },
                "self.sampler": {
                    "value": "sampler",
                    "possible_values": []
                },
                "self.batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/engine/defaults.py": {
        "torch": {
            "as_tensor_193": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "data": {
                    "value": "image.astype('float32').transpose(2, 0, 1)",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_257": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "self.build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[comm.get_local_rank()]",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/engine/hooks.py": {
        "torch": {
            "profile_275": {
                "variable": {
                    "value": "self._profiler",
                    "possible_values": []
                },
                "use_cuda": {
                    "value": "self._use_cuda",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/engine/launch.py": {
        "torch": {
            "is_available_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "set_device_73": {
                "device": {
                    "value": "local_rank",
                    "possible_values": []
                }
            },
            "device_count_72": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/engine/train_loop.py": {
        "torch": {
            "isfinite_237": {
                "input": {
                    "value": "losses",
                    "possible_values": [
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ]
                    ]
                }
            },
            "all_237": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/cityscapes_evaluation.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "self._cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/coco_evaluation.py": {
        "torch": {
            "sort_457": {
                "variable": {
                    "value": "(gt_overlaps, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_overlaps",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0) if len(gt_overlaps) else torch.zeros(0, dtype=torch.float32)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_462": {
                "variable": {
                    "value": "recalls",
                    "possible_values": []
                },
                "input": {
                    "value": "thresholds",
                    "possible_values": [
                        [
                            "torch.arange(0.5, 0.95 + 1e-05, step, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_59": {
                "variable": {
                    "value": "self._cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "as_tensor_414": {
                "variable": {
                    "value": "gt_boxes",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_boxes",
                    "possible_values": [
                        [
                            "[BoxMode.convert(obj['bbox'], BoxMode.XYWH_ABS, BoxMode.XYXY_ABS) for obj in anno if obj['iscrowd'] == 0]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(gt_boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "Boxes(gt_boxes)",
                            "Call"
                        ],
                        [
                            "gt_boxes[valid_gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_414": {
                "variable": {
                    "value": "gt_boxes",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "as_tensor_416": {
                "variable": {
                    "value": "gt_areas",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno if obj['iscrowd'] == 0]",
                    "possible_values": []
                }
            },
            "zeros_434": {
                "variable": {
                    "value": "_gt_overlaps",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "possible_values": []
                }
            },
            "arange_461": {
                "variable": {
                    "value": "thresholds",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95 + 1e-05",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "possible_values": [
                        [
                            "0.05",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "cat_455": {
                "tensors": {
                    "value": "gt_overlaps",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0) if len(gt_overlaps) else torch.zeros(0, dtype=torch.float32)",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_455": {
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "save_136": {
                "obj": {
                    "value": "predictions",
                    "possible_values": [
                        [
                            "prediction_dict['proposals']",
                            "Subscript"
                        ],
                        [
                            "predictions[inds]",
                            "Subscript"
                        ],
                        [
                            "predictions[:limit]",
                            "Subscript"
                        ],
                        [
                            "comm.gather(self._predictions, dst=0)",
                            "Call"
                        ],
                        [
                            "list(itertools.chain(*predictions))",
                            "Call"
                        ],
                        [
                            "self._predictions",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/evaluator.py": {
        "torch": {
            "is_initialized_103": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "synchronize_125": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/lvis_evaluation.py": {
        "torch": {
            "sort_288": {
                "variable": {
                    "value": "(gt_overlaps, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_overlaps",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0) if len(gt_overlaps) else torch.zeros(0, dtype=torch.float32)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_293": {
                "variable": {
                    "value": "recalls",
                    "possible_values": []
                },
                "input": {
                    "value": "thresholds",
                    "possible_values": [
                        [
                            "torch.arange(0.5, 0.95 + 1e-05, step, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_44": {
                "variable": {
                    "value": "self._cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "as_tensor_245": {
                "variable": {
                    "value": "gt_boxes",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_boxes",
                    "possible_values": [
                        [
                            "[BoxMode.convert(obj['bbox'], BoxMode.XYWH_ABS, BoxMode.XYXY_ABS) for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(gt_boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "Boxes(gt_boxes)",
                            "Call"
                        ],
                        [
                            "gt_boxes[valid_gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_245": {
                "variable": {
                    "value": "gt_boxes",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "as_tensor_247": {
                "variable": {
                    "value": "gt_areas",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno]",
                    "possible_values": []
                }
            },
            "zeros_265": {
                "variable": {
                    "value": "_gt_overlaps",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "possible_values": []
                }
            },
            "arange_292": {
                "variable": {
                    "value": "thresholds",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95 + 1e-05",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "possible_values": [
                        [
                            "0.05",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "cat_286": {
                "tensors": {
                    "value": "gt_overlaps",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0) if len(gt_overlaps) else torch.zeros(0, dtype=torch.float32)",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_286": {
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "save_105": {
                "obj": {
                    "value": "predictions",
                    "possible_values": [
                        [
                            "prediction_dict['proposals']",
                            "Subscript"
                        ],
                        [
                            "predictions[inds]",
                            "Subscript"
                        ],
                        [
                            "predictions[:limit]",
                            "Subscript"
                        ],
                        [
                            "comm.gather(self._predictions, dst=0)",
                            "Call"
                        ],
                        [
                            "list(itertools.chain(*predictions))",
                            "Call"
                        ],
                        [
                            "self._predictions",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/pascal_voc_evaluation.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "self._cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/rotated_coco_evaluation.py": {
        "torch": {
            "from_numpy_35": {
                "variable": {
                    "value": "box_tensor",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxlist",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "*size": {
                    "value": "(0, output_box_dim)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/sem_seg_evaluation.py": {
        "torch": {
            "device_42": {
                "variable": {
                    "value": "self._cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "save_138": {
                "obj": {
                    "value": "res",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/export/api.py": {
        "torch": {
            "Caffe2Model_87": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self._predict_net": {
                    "value": "predict_net",
                    "possible_values": [
                        [
                            "caffe2_pb2.NetDef()",
                            "Call"
                        ]
                    ]
                },
                "self._init_net": {
                    "value": "init_net",
                    "possible_values": [
                        [
                            "caffe2_pb2.NetDef()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/export/c10.py": {
        "torch": {
            "softmax_342": {
                "variable": {
                    "value": "class_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "possible_values": [
                        [
                            "fastrcnn_outputs.pred_class_logits",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_ids, rois_n4]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "full_415": {
                "size": {
                    "value": "(b, 1)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "rpn_rois_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pooler_fmt_boxes.device",
                            "Attribute"
                        ],
                        [
                            "class_logits.device",
                            "Attribute"
                        ],
                        [
                            "output.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_362": {
                "size": {
                    "value": "(b, 1)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "rpn_rois_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pooler_fmt_boxes.device",
                            "Attribute"
                        ],
                        [
                            "class_logits.device",
                            "Attribute"
                        ],
                        [
                            "output.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tensor_351": {}
        }
    },
    "detectron2/export/caffe2_export.py": {
        "torch": {
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/export/caffe2_inference.py": {
        "torch": {
            "ProtobufModel_16": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ProtobufDetectionModel_68": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/export/caffe2_modeling.py": {
        "torch": {
            "Caffe2MetaArch_134": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self._wrapped_model": {
                    "value": "torch_model",
                    "possible_values": [
                        [
                            "patch_generalized_rcnn(torch_model)",
                            "Call"
                        ],
                        [
                            "patch_generalized_rcnn(torch_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_129": {
                "variable": {
                    "value": "im_info",
                    "possible_values": []
                }
            },
            "arange_68": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "start": {
                    "value": "num_masks",
                    "possible_values": [
                        [
                            "mask_probs_pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "class_pred.device",
                    "possible_values": []
                }
            },
            "load_448": {
                "variable": {
                    "value": "self.anchor_generator",
                    "possible_values": []
                },
                "f": {
                    "value": "serialized_anchor_generator",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO(get_pb_arg_vals(predict_net, 'serialized_anchor_generator', None))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "result.pred_masks",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 1, 0, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "save_436": {
                "obj": {
                    "value": "self._wrapped_model.anchor_generator",
                    "possible_values": []
                },
                "f": {
                    "value": "serialized_anchor_generator",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO(get_pb_arg_vals(predict_net, 'serialized_anchor_generator', None))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/export/patcher.py": {
        "torch": {}
    },
    "detectron2/export/shared.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "dst",
                    "possible_values": []
                },
                "type": {
                    "value": "device_str",
                    "possible_values": []
                }
            },
            "conv_transpose2d_68": {
                "variable": {
                    "value": "tensor_out",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_in",
                    "possible_values": []
                },
                "weight": {
                    "value": "to_device(torch.Tensor(kernel), tensor_in.device)",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "int(up_scale)",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(up_scale / 2)",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/layers/batch_norm.py": {
        "torch": {
            "FrozenBatchNorm2d_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.num_features": {
                    "value": "num_features",
                    "possible_values": []
                },
                "self.eps": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AllReduce_148": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "stack_154": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_list",
                    "possible_values": [
                        [
                            "[torch.zeros_like(input) for k in range(dist.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "mean_180": {
                "variable": {
                    "value": "mean",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "possible_values": []
                }
            },
            "mean_181": {
                "variable": {
                    "value": "meansqr",
                    "possible_values": []
                },
                "input": {
                    "value": "input * input",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "vec",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mean, meansqr]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "split_186": {
                "variable": {
                    "value": "(mean, meansqr)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vec",
                    "possible_values": [
                        [
                            "torch.cat([mean, meansqr], dim=0)",
                            "Call"
                        ],
                        [
                            "AllReduce.apply(vec) * (1.0 / dist.get_world_size())",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "C",
                    "possible_values": [
                        [
                            "input.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rsqrt_191": {
                "variable": {
                    "value": "invstd",
                    "possible_values": []
                },
                "input": {
                    "value": "var + self.eps",
                    "possible_values": []
                }
            },
            "sum_155": {
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "torch.stack(input_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "batch_norm_57": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "state_dict[prefix + running_mean]",
                    "possible_values": []
                },
                "input": {
                    "value": "self.running_mean",
                    "possible_values": []
                }
            },
            "ones_like_78": {
                "variable": {
                    "value": "state_dict[prefix + running_var]",
                    "possible_values": []
                },
                "input": {
                    "value": "self.running_var",
                    "possible_values": []
                }
            },
            "zeros_like_151": {
                "input": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "ones_43": {
                "*size": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "GroupNorm_142": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "channels",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/layers/deform_conv.py": {
        "torch": {
            "_DeformConv_15": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "_ModulatedDeformConv_179": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "DeformConv_308": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.deformable_groups": {
                    "value": "deformable_groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm": {
                    "value": "norm",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_354": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                        "possible_values": []
                    }
                }
            },
            "ModulatedDeformConv_405": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.deformable_groups": {
                    "value": "deformable_groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.with_bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm": {
                    "value": "norm",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_443": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                        "possible_values": []
                    }
                }
            },
            "zeros_like_242": {
                "variable": {
                    "value": "grad_input",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "zeros_like_243": {
                "variable": {
                    "value": "grad_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "possible_values": []
                }
            },
            "zeros_like_244": {
                "variable": {
                    "value": "grad_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": []
                }
            },
            "zeros_like_245": {
                "variable": {
                    "value": "grad_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "possible_values": []
                }
            },
            "zeros_like_246": {
                "variable": {
                    "value": "grad_bias",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_447": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "variable": {
                    "value": "grad_input",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "zeros_like_90": {
                "variable": {
                    "value": "grad_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "possible_values": []
                }
            },
            "zeros_like_113": {
                "variable": {
                    "value": "grad_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/layers/mask_ops.py": {
        "torch": {
            "split_45": {
                "variable": {
                    "value": "(x0, y0, x1, y1)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "boxes.tensor",
                            "Attribute"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "grid",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gx, gy]",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "grid_sample_59": {
                "variable": {
                    "value": "img_masks",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.to(dtype=torch.float32)",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "possible_values": [
                        [
                            "torch.stack([gx, gy], dim=3)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "chunk_111": {
                "variable": {
                    "value": "chunks",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(N, device=device)",
                    "possible_values": []
                },
                "chunks": {
                    "value": "num_chunks",
                    "possible_values": [
                        [
                            "N",
                            "Name"
                        ],
                        [
                            "int(np.ceil(N * img_h * img_w * BYTES_PER_FLOAT / GPU_MEM_LIMIT))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "img_masks",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "masks.shape[0]",
                            "Subscript"
                        ],
                        [
                            "len(masks)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "img_h",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool if threshold >= 0 else torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "im_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "(img_h, img_w)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "zeros_like_236": {
                "variable": {
                    "value": "scaled_boxes",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "boxes.tensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_37": {
                "variable": {
                    "value": "(x0_int, y0_int)",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes.min(dim=0).values.floor()[:2] - 1",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_40": {
                "variable": {
                    "value": "x1_int",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, 2].max().ceil() + 1",
                    "possible_values": []
                },
                "max": {
                    "value": "img_w",
                    "possible_values": []
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "y1_int",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, 3].max().ceil() + 1",
                    "possible_values": []
                },
                "max": {
                    "value": "img_h",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "Image.fromarray(mask.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "mask.resize((samples_w, samples_h), resample=Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "np.array(mask, copy=False)",
                            "Call"
                        ],
                        [
                            "np.array(mask > threshold, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask * 255).to(torch.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask * 255",
                    "possible_values": []
                }
            },
            "arange_49": {
                "start": {
                    "value": "y0_int",
                    "possible_values": []
                },
                "end": {
                    "value": "y1_int",
                    "possible_values": [
                        [
                            "torch.clamp(boxes[:, 3].max().ceil() + 1, max=img_h).to(dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "arange_50": {
                "start": {
                    "value": "x0_int",
                    "possible_values": []
                },
                "end": {
                    "value": "x1_int",
                    "possible_values": [
                        [
                            "torch.clamp(boxes[:, 2].max().ceil() + 1, max=img_w).to(dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "arange_111": {
                "start": {
                    "value": "N",
                    "possible_values": [
                        [
                            "masks.shape[0]",
                            "Subscript"
                        ],
                        [
                            "len(masks)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/layers/nms.py": {
        "torch": {
            "unique_20": {
                "input": {
                    "value": "idxs",
                    "possible_values": []
                }
            },
            "empty_126": {
                "*size": {
                    "value": "(0,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "possible_values": []
                }
            },
            "max_137": {
                "input": {
                    "value": "boxes[:, 2]",
                    "possible_values": []
                }
            },
            "min_140": {
                "input": {
                    "value": "boxes[:, 2]",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/layers/roi_align.py": {
        "torch": {
            "_ROIAlign_10": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "ROIAlign_51": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.output_size": {
                    "value": "output_size",
                    "possible_values": [
                        [
                            "ctx.output_size",
                            "Attribute"
                        ]
                    ]
                },
                "self.spatial_scale": {
                    "value": "spatial_scale",
                    "possible_values": [
                        [
                            "ctx.spatial_scale",
                            "Attribute"
                        ]
                    ]
                },
                "self.sampling_ratio": {
                    "value": "sampling_ratio",
                    "possible_values": [
                        [
                            "ctx.sampling_ratio",
                            "Attribute"
                        ]
                    ]
                },
                "self.aligned": {
                    "value": "aligned",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/layers/roi_align_rotated.py": {
        "torch": {
            "_ROIAlignRotated_10": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "ROIAlignRotated_49": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.output_size": {
                    "value": "output_size",
                    "possible_values": [
                        [
                            "ctx.output_size",
                            "Attribute"
                        ]
                    ]
                },
                "self.spatial_scale": {
                    "value": "spatial_scale",
                    "possible_values": [
                        [
                            "ctx.spatial_scale",
                            "Attribute"
                        ]
                    ]
                },
                "self.sampling_ratio": {
                    "value": "sampling_ratio",
                    "possible_values": [
                        [
                            "ctx.sampling_ratio",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/layers/wrappers.py": {
        "torch": {
            "_NewEmptyTensorOp_28": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "base_class_0": {
                    "value": "torch.nn.Conv2d",
                    "possible_values": []
                },
                "self.norm": {
                    "value": "norm",
                    "possible_values": [
                        [
                            "kwargs.pop('norm', None)",
                            "Call"
                        ]
                    ]
                },
                "self.activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "kwargs.pop('activation', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_105": {
                "base_class_0": {
                    "value": "torch.nn.ConvTranspose2d",
                    "possible_values": []
                }
            },
            "BatchNorm2d_141": {
                "base_class_0": {
                    "value": "torch.nn.BatchNorm2d",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "tensors",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_159": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_15": {
                "tensor": {
                    "value": ".",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/model_zoo/model_zoo.py": {
        "torch": {
            "is_available_145": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/__init__.py": {
        "torch": {}
    },
    "detectron2/modeling/anchor_generator.py": {
        "torch": {
            "BufferList_20": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "DefaultAnchorGenerator_59": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "RotatedAnchorGenerator_202": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "arange_45": {
                "variable": {
                    "value": "shifts_x",
                    "possible_values": []
                },
                "start": {
                    "value": "offset * stride",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_width * stride",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "arange_48": {
                "variable": {
                    "value": "shifts_y",
                    "possible_values": []
                },
                "start": {
                    "value": "offset * stride",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_height * stride",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "meshgrid_52": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "possible_values": [
                        [
                            "torch.arange(offset * stride, grid_height * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "possible_values": [
                        [
                            "torch.arange(offset * stride, grid_width * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_134": {
                "variable": {
                    "value": "shifts",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, shift_x, shift_y)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "data": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[copy.deepcopy(anchors_in_image) for _ in range(num_images)]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[copy.deepcopy(anchors_in_image) for _ in range(num_images)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "zeros_like_291": {
                "variable": {
                    "value": "zeros",
                    "possible_values": []
                },
                "input": {
                    "value": "shift_x",
                    "possible_values": [
                        [
                            "shift_x.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_292": {
                "variable": {
                    "value": "shifts",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, zeros, zeros, zeros)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_335": {
                "data": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[copy.deepcopy(anchors_in_image) for _ in range(num_images)]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[copy.deepcopy(anchors_in_image) for _ in range(num_images)]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/modeling/backbone/backbone.py": {
        "torch": {
            "Backbone_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/backbone/fpn.py": {
        "torch": {
            "LastLevelMaxPool_165": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "LastLevelP6P7_180": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_feature": {
                    "value": "in_feature",
                    "possible_values": [
                        [
                            "'res5'",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv2d_190": {
                    "variable": {
                        "value": "self.p6",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": [
                            [
                                "[input_shapes[f].channels for f in in_features]",
                                "ListComp"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "out_channels",
                        "possible_values": [
                            [
                                "cfg.MODEL.FPN.OUT_CHANNELS",
                                "Attribute"
                            ],
                            [
                                "cfg.MODEL.FPN.OUT_CHANNELS",
                                "Attribute"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_191": {
                    "variable": {
                        "value": "self.p7",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "out_channels",
                        "possible_values": [
                            [
                                "cfg.MODEL.FPN.OUT_CHANNELS",
                                "Attribute"
                            ],
                            [
                                "cfg.MODEL.FPN.OUT_CHANNELS",
                                "Attribute"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "out_channels",
                        "possible_values": [
                            [
                                "cfg.MODEL.FPN.OUT_CHANNELS",
                                "Attribute"
                            ],
                            [
                                "cfg.MODEL.FPN.OUT_CHANNELS",
                                "Attribute"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "interpolate_131": {
                "variable": {
                    "value": "top_down_features",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_features",
                    "possible_values": [
                        [
                            "self.lateral_convs[0](x[0])",
                            "Call"
                        ],
                        [
                            "lateral_features + top_down_features",
                            "BinOp"
                        ],
                        [
                            "prev_features / 2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "max_pool2d_177": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "[bottom_up_features[f] for f in self.in_features[::-1]]",
                            "ListComp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "relu_197": {
                "input": {
                    "value": "p6",
                    "possible_values": [
                        [
                            "self.p6(c5)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/modeling/backbone/resnet.py": {
        "torch": {
            "ResNetBlockBase_31": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "cfg.MODEL.RESNETS.STEM_OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "cfg.MODEL.RESNETS.RES2_OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "out_channels * 2",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BasicStem_293": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "relu__140": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__143": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__153": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__247": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__258": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__268": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__315": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_316": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "chunk_251": {
                "variable": {
                    "value": "(offset_x, offset_y, mask)",
                    "possible_values": []
                },
                "input": {
                    "value": "offset_mask",
                    "possible_values": [
                        [
                            "self.conv2_offset(out)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "offset",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(offset_x, offset_y)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_353": {
                "variable": {
                    "value": "stage",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_363": {
                "variable": {
                    "value": "self.avgpool",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "Linear_364": {
                "variable": {
                    "value": "self.linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "curr_channels",
                    "possible_values": [
                        [
                            "block.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_391": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/box_regression.py": {
        "torch": {
            "stack_69": {
                "variable": {
                    "value": "deltas",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dx, dy, dw, dh)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clamp_97": {
                "variable": {
                    "value": "dw",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "possible_values": [
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.scale_clamp",
                    "possible_values": []
                }
            },
            "clamp_98": {
                "variable": {
                    "value": "dh",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "possible_values": [
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.scale_clamp",
                    "possible_values": []
                }
            },
            "zeros_like_105": {
                "variable": {
                    "value": "pred_boxes",
                    "possible_values": []
                },
                "input": {
                    "value": "deltas",
                    "possible_values": [
                        [
                            "torch.stack((dx, dy, dw, dh), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack((dx, dy, dw, dh, da), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_154": {
                "variable": {
                    "value": "(src_ctr_x, src_ctr_y, src_widths, src_heights, src_angles)",
                    "possible_values": []
                },
                "input": {
                    "value": "src_boxes",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unbind_156": {
                "variable": {
                    "value": "(target_ctr_x, target_ctr_y, target_widths, target_heights, target_angles)",
                    "possible_values": []
                },
                "input": {
                    "value": "target_boxes",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_171": {
                "variable": {
                    "value": "deltas",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dx, dy, dw, dh, da)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clamp_205": {
                "variable": {
                    "value": "dw",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "possible_values": [
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.scale_clamp",
                    "possible_values": []
                }
            },
            "clamp_206": {
                "variable": {
                    "value": "dh",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "possible_values": [
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.scale_clamp",
                    "possible_values": []
                }
            },
            "zeros_like_208": {
                "variable": {
                    "value": "pred_boxes",
                    "possible_values": []
                },
                "input": {
                    "value": "deltas",
                    "possible_values": [
                        [
                            "torch.stack((dx, dy, dw, dh), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack((dx, dy, dw, dh, da), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_66": {
                "input": {
                    "value": "target_widths / src_widths",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "target_heights / src_heights",
                    "possible_values": []
                }
            },
            "exp_102": {
                "input": {
                    "value": "dw",
                    "possible_values": [
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_103": {
                "input": {
                    "value": "dh",
                    "possible_values": [
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_163": {
                "input": {
                    "value": "target_widths / src_widths",
                    "possible_values": []
                }
            },
            "log_164": {
                "input": {
                    "value": "target_heights / src_heights",
                    "possible_values": []
                }
            },
            "exp_211": {
                "input": {
                    "value": "dw",
                    "possible_values": [
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_212": {
                "input": {
                    "value": "dh",
                    "possible_values": [
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/modeling/matcher.py": {
        "torch": {
            "nonzero_118": {
                "variable": {
                    "value": "gt_pred_pairs_of_highest_quality",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix == highest_quality_foreach_gt[:, None]",
                    "possible_values": []
                }
            },
            "nonzero_208": {
                "variable": {
                    "value": "gt_pred_pairs_of_highest_quality",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix == highest_quality_foreach_gt[:, None]",
                    "possible_values": []
                }
            },
            "all_86": {
                "input": {
                    "value": "match_quality_matrix >= 0",
                    "possible_values": []
                }
            },
            "all_182": {
                "input": {
                    "value": "match_quality_matrix >= 0",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/meta_arch/panoptic_fpn.py": {
        "torch": {
            "PanopticFPN_20": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "device_28": {
                    "variable": {
                        "value": "self.device",
                        "possible_values": []
                    },
                    "type": {
                        "value": "cfg.MODEL.DEVICE",
                        "possible_values": []
                    }
                },
                "Tensor_45": {
                    "variable": {
                        "value": "pixel_mean",
                        "possible_values": []
                    }
                },
                "Tensor_46": {
                    "variable": {
                        "value": "pixel_std",
                        "possible_values": []
                    }
                }
            },
            "zeros_like_155": {
                "variable": {
                    "value": "panoptic_seg",
                    "possible_values": []
                },
                "input": {
                    "value": "semantic_results",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "possible_values": []
                }
            },
            "argsort_158": {
                "variable": {
                    "value": "sorted_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "-instance_results.scores",
                    "possible_values": []
                }
            },
            "unique_198": {
                "variable": {
                    "value": "semantic_labels",
                    "possible_values": []
                },
                "input": {
                    "value": "semantic_results",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/meta_arch/rcnn.py": {
        "torch": {
            "GeneralizedRCNN_21": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "device_32": {
                    "variable": {
                        "value": "self.device",
                        "possible_values": []
                    },
                    "type": {
                        "value": "cfg.MODEL.DEVICE",
                        "possible_values": []
                    }
                },
                "Tensor_41": {
                    "variable": {
                        "value": "pixel_mean",
                        "possible_values": []
                    }
                },
                "Tensor_42": {
                    "variable": {
                        "value": "pixel_std",
                        "possible_values": []
                    }
                }
            },
            "ProposalNetwork_207": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "device_210": {
                    "variable": {
                        "value": "self.device",
                        "possible_values": []
                    },
                    "type": {
                        "value": "cfg.MODEL.DEVICE",
                        "possible_values": []
                    }
                },
                "Tensor_215": {
                    "variable": {
                        "value": "pixel_mean",
                        "possible_values": []
                    }
                },
                "Tensor_216": {
                    "variable": {
                        "value": "pixel_std",
                        "possible_values": []
                    }
                }
            }
        }
    },
    "detectron2/modeling/meta_arch/retinanet.py": {
        "torch": {
            "RetinaNet_59": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "device_67": {
                    "variable": {
                        "value": "self.device",
                        "possible_values": []
                    },
                    "type": {
                        "value": "cfg.MODEL.DEVICE",
                        "possible_values": []
                    }
                },
                "Tensor_101": {
                    "variable": {
                        "value": "pixel_mean",
                        "possible_values": []
                    }
                },
                "Tensor_102": {
                    "variable": {
                        "value": "pixel_std",
                        "possible_values": []
                    }
                }
            },
            "RetinaNetHead_424": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_456": {
                    "variable": {
                        "value": "self.cls_subnet",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*cls_subnet",
                        "possible_values": []
                    }
                },
                "Sequential_457": {
                    "variable": {
                        "value": "self.bbox_subnet",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*bbox_subnet",
                        "possible_values": []
                    }
                },
                "Conv2d_458": {
                    "variable": {
                        "value": "self.cls_score",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": [
                            [
                                "input_shape[0].channels",
                                "Attribute"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "num_anchors * num_classes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_461": {
                    "variable": {
                        "value": "self.bbox_pred",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": [
                            [
                                "input_shape[0].channels",
                                "Attribute"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "num_anchors * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "zeros_like_242": {
                "variable": {
                    "value": "gt_classes_target",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_class_logits",
                    "possible_values": []
                }
            },
            "no_grad_264": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_like_316": {
                "variable": {
                    "value": "gt_anchors_reg_deltas_i",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors_per_image.tensor",
                    "possible_values": []
                }
            },
            "stack_321": {
                "tensors": {
                    "value": "gt_anchors_deltas",
                    "possible_values": [
                        [
                            "gt_anchors_deltas.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_448": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "input_shape[0].channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "input_shape[0].channels",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_450": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_452": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "input_shape[0].channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "input_shape[0].channels",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_454": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_like_315": {
                "input": {
                    "value": "gt_matched_idxs",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/meta_arch/retinanet_noisy.py": {
        "torch": {
            "RetinaNetNoisy_92": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "device_100": {
                    "variable": {
                        "value": "self.device",
                        "possible_values": []
                    },
                    "type": {
                        "value": "cfg.MODEL.DEVICE",
                        "possible_values": []
                    }
                },
                "Tensor_133": {
                    "variable": {
                        "value": "pixel_mean",
                        "possible_values": []
                    }
                },
                "Tensor_134": {
                    "variable": {
                        "value": "pixel_std",
                        "possible_values": []
                    }
                }
            },
            "RetinaNetHead_520": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_552": {
                    "variable": {
                        "value": "self.cls_subnet",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*cls_subnet",
                        "possible_values": []
                    }
                },
                "Sequential_553": {
                    "variable": {
                        "value": "self.bbox_subnet",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*bbox_subnet",
                        "possible_values": []
                    }
                },
                "Conv2d_554": {
                    "variable": {
                        "value": "self.cls_score",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": [
                            [
                                "input_shape[0].channels",
                                "Attribute"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "num_anchors * num_classes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_557": {
                    "variable": {
                        "value": "self.bbox_pred",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": [
                            [
                                "input_shape[0].channels",
                                "Attribute"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "num_anchors * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "sigmoid_78": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "no_grad_315": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "log_79": {
                "input": {
                    "value": "p",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_80": {
                "input": {
                    "value": "1 - p",
                    "possible_values": []
                }
            },
            "zeros_like_366": {
                "variable": {
                    "value": "soft_labels_this",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_labels",
                    "possible_values": []
                }
            },
            "ones_like_367": {
                "variable": {
                    "value": "reweight_coeffs_this",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_labels",
                    "possible_values": []
                }
            },
            "zeros_like_409": {
                "variable": {
                    "value": "gt_anchors_reg_deltas_i",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors_per_image.tensor",
                    "possible_values": []
                }
            },
            "stack_416": {
                "tensors": {
                    "value": "gt_anchors_deltas",
                    "possible_values": [
                        [
                            "gt_anchors_deltas.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_417": {
                "tensors": {
                    "value": "reweight_coeffs",
                    "possible_values": [
                        [
                            "reweight_coeffs.flatten()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_544": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "input_shape[0].channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "input_shape[0].channels",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_546": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_548": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "input_shape[0].channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "input_shape[0].channels",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_550": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sigmoid_382": {
                "input": {
                    "value": "pred_class_logits[i].detach()",
                    "possible_values": []
                }
            },
            "zeros_like_408": {
                "input": {
                    "value": "gt_matched_idxs",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/meta_arch/semantic_seg.py": {
        "torch": {
            "SemanticSegmentor_28": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "device_36": {
                    "variable": {
                        "value": "self.device",
                        "possible_values": []
                    },
                    "type": {
                        "value": "cfg.MODEL.DEVICE",
                        "possible_values": []
                    }
                },
                "Tensor_41": {
                    "variable": {
                        "value": "pixel_mean",
                        "possible_values": []
                    }
                },
                "Tensor_42": {
                    "variable": {
                        "value": "pixel_std",
                        "possible_values": []
                    }
                }
            },
            "SemSegFPNHead_104": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "interpolate_162": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.predictor(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.common_stride, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.scale_heads[i](features[f])",
                            "Call"
                        ],
                        [
                            "x + self.scale_heads[i](features[f])",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.common_stride",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "*args": {
                    "value": "*head_ops",
                    "possible_values": []
                }
            },
            "cross_entropy_167": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.predictor(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.common_stride, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.scale_heads[i](features[f])",
                            "Call"
                        ],
                        [
                            "x + self.scale_heads[i](features[f])",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "possible_values": [
                        [
                            "[x['sem_seg'].to(self.device) for x in batched_inputs]",
                            "ListComp"
                        ],
                        [
                            "ImageList.from_tensors(targets, self.backbone.size_divisibility, self.sem_seg_head.ignore_value).tensor",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_value",
                    "possible_values": []
                }
            },
            "GroupNorm_133": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "conv_dims",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEM_SEG_HEAD.CONVS_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Upsample_148": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/poolers.py": {
        "torch": {
            "ROIPooler_84": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.output_size": {
                    "value": "output_size",
                    "possible_values": [
                        [
                            "(output_size, output_size)",
                            "Tuple"
                        ],
                        [
                            "self.output_size[0]",
                            "Subscript"
                        ]
                    ]
                },
                "self.canonical_level": {
                    "value": "canonical_level",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.canonical_box_size": {
                    "value": "canonical_box_size",
                    "possible_values": [
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_36": {
                "variable": {
                    "value": "box_sizes",
                    "possible_values": []
                },
                "input": {
                    "value": "cat([boxes.area() for boxes in box_lists])",
                    "possible_values": []
                }
            },
            "floor_38": {
                "variable": {
                    "value": "level_assignments",
                    "possible_values": []
                },
                "input": {
                    "value": "canonical_level + torch.log2(box_sizes / canonical_box_size + eps)",
                    "possible_values": []
                }
            },
            "clamp_43": {
                "variable": {
                    "value": "level_assignments",
                    "possible_values": []
                },
                "input": {
                    "value": "level_assignments",
                    "possible_values": [
                        [
                            "torch.floor(canonical_level + torch.log2(box_sizes / canonical_box_size + eps))",
                            "Call"
                        ],
                        [
                            "torch.clamp(level_assignments, min=min_level, max=max_level)",
                            "Call"
                        ],
                        [
                            "assign_boxes_to_levels(box_lists, self.min_level, self.max_level, self.canonical_box_size, self.canonical_level)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "min_level",
                    "possible_values": [
                        [
                            "-math.log2(scales[0])",
                            "UnaryOp"
                        ]
                    ]
                },
                "max": {
                    "value": "max_level",
                    "possible_values": [
                        [
                            "-math.log2(scales[-1])",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "full_72": {
                "variable": {
                    "value": "repeated_index",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(box_tensor), 1)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "batch_index",
                    "possible_values": []
                },
                "dtype": {
                    "value": "box_tensor.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "box_tensor.device",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_boxes, num_channels, output_size, output_size)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.level_poolers",
                    "possible_values": []
                },
                "modules": {
                    "value": "(ROIAlign(output_size, spatial_scale=scale, sampling_ratio=sampling_ratio, aligned=False) for scale in scales)",
                    "possible_values": []
                }
            },
            "nonzero_231": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "level_assignments == level",
                    "possible_values": []
                }
            },
            "squeeze_231": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log2_39": {
                "input": {
                    "value": "box_sizes / canonical_box_size + eps",
                    "possible_values": []
                }
            },
            "ModuleList_141": {
                "variable": {
                    "value": "self.level_poolers",
                    "possible_values": []
                },
                "modules": {
                    "value": "(ROIAlign(output_size, spatial_scale=scale, sampling_ratio=sampling_ratio, aligned=True) for scale in scales)",
                    "possible_values": []
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.level_poolers",
                    "possible_values": []
                },
                "modules": {
                    "value": "(RoIPool(output_size, spatial_scale=scale) for scale in scales)",
                    "possible_values": []
                }
            },
            "ModuleList_152": {
                "variable": {
                    "value": "self.level_poolers",
                    "possible_values": []
                },
                "modules": {
                    "value": "(ROIAlignRotated(output_size, spatial_scale=scale, sampling_ratio=sampling_ratio) for scale in scales)",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/postprocessing.py": {
        "torch": {
            "interpolate_75": {
                "input": {
                    "value": "result",
                    "possible_values": [
                        [
                            "result[:, :img_size[0], :img_size[1]].expand(1, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(result, size=(output_height, output_width), mode='bilinear', align_corners=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(output_height, output_width)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/proposal_generator/proposal_utils.py": {
        "torch": {
            "ones_50": {
                "*size": {
                    "value": "len(gt_boxes)",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "proposals.objectness_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/modeling/proposal_generator/rpn.py": {
        "torch": {
            "StandardRPNHead_35": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_62": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": [
                            [
                                "[s.channels for s in input_shape]",
                                "ListComp"
                            ],
                            [
                                "in_channels[0]",
                                "Subscript"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "in_channels",
                        "possible_values": [
                            [
                                "[s.channels for s in input_shape]",
                                "ListComp"
                            ],
                            [
                                "in_channels[0]",
                                "Subscript"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_64": {
                    "variable": {
                        "value": "self.objectness_logits",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": [
                            [
                                "[s.channels for s in input_shape]",
                                "ListComp"
                            ],
                            [
                                "in_channels[0]",
                                "Subscript"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "num_cell_anchors",
                        "possible_values": [
                            [
                                "anchor_generator.num_cell_anchors",
                                "Attribute"
                            ],
                            [
                                "num_cell_anchors[0]",
                                "Subscript"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_66": {
                    "variable": {
                        "value": "self.anchor_deltas",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": [
                            [
                                "[s.channels for s in input_shape]",
                                "ListComp"
                            ],
                            [
                                "in_channels[0]",
                                "Subscript"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "num_cell_anchors * box_dim",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "RPN_89": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(x)",
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/proposal_generator/rpn_outputs.py": {
        "torch": {
            "arange_100": {
                "variable": {
                    "value": "batch_idx",
                    "possible_values": []
                },
                "start": {
                    "value": "num_images",
                    "possible_values": [
                        [
                            "len(image_sizes)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "proposals[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_190": {
                "variable": {
                    "value": "objectness_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_objectness_logits[valid_masks]",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_objectness_logits[valid_masks].to(torch.float32)",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                }
            },
            "stack_340": {
                "variable": {
                    "value": "gt_objectness_logits",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[resample(label) for label in gt_objectness_logits]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "split_353": {
                "variable": {
                    "value": "gt_objectness_logits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt_objectness_logits",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack([resample(label) for label in gt_objectness_logits], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.split(gt_objectness_logits, num_anchors_per_map, dim=1)",
                            "Call"
                        ],
                        [
                            "cat([x.flatten() for x in gt_objectness_logits], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "num_anchors_per_map",
                    "possible_values": [
                        [
                            "[np.prod(x.shape[1:]) for x in self.pred_objectness_logits]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_358": {
                "variable": {
                    "value": "gt_anchor_deltas",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_anchor_deltas",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gt_anchor_deltas, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.split(gt_anchor_deltas, num_anchors_per_map, dim=1)",
                            "Call"
                        ],
                        [
                            "cat([x.reshape(-1, B) for x in gt_anchor_deltas], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "split_363": {
                "variable": {
                    "value": "gt_anchor_deltas",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt_anchor_deltas",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gt_anchor_deltas, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.split(gt_anchor_deltas, num_anchors_per_map, dim=1)",
                            "Call"
                        ],
                        [
                            "cat([x.reshape(-1, B) for x in gt_anchor_deltas], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "num_anchors_per_map",
                    "possible_values": [
                        [
                            "[np.prod(x.shape[1:]) for x in self.pred_objectness_logits]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "full_118": {
                "size": {
                    "value": "(num_proposals_i,)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "level_id",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "proposals[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "isfinite_130": {
                "input": {
                    "value": "scores_per_img",
                    "possible_values": [
                        [
                            "topk_scores[n]",
                            "Subscript"
                        ],
                        [
                            "scores_per_img[valid_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "all_130": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_like_289": {
                "variable": {
                    "value": "gt_anchor_deltas_i",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors_i.tensor",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/proposal_generator/rrpn.py": {
        "torch": {
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/proposal_generator/rrpn_outputs.py": {
        "torch": {
            "arange_88": {
                "variable": {
                    "value": "batch_idx",
                    "possible_values": []
                },
                "start": {
                    "value": "num_images",
                    "possible_values": [
                        [
                            "len(image_sizes)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "proposals[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_106": {
                "size": {
                    "value": "(num_proposals_i,)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "level_id",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "proposals[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "isfinite_118": {
                "input": {
                    "value": "scores_per_img",
                    "possible_values": [
                        [
                            "topk_scores[n]",
                            "Subscript"
                        ],
                        [
                            "scores_per_img[valid_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "all_118": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_like_233": {
                "variable": {
                    "value": "gt_anchor_deltas_i",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors_i.tensor",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/box_head.py": {
        "torch": {
            "FastRCNNConvFCHead_20": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "np.prod(self._output_size)",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc_dim",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.FC_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "flatten_78": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(layer(x))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x)",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/cascade_rcnn.py": {
        "torch": {
            "_ScaleGradient_18": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.box_head",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.box_predictor",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_like_179": {
                "input": {
                    "value": "matched_idxs",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/fast_rcnn.py": {
        "torch": {
            "FastRCNNOutputLayers_356": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_379": {
                    "variable": {
                        "value": "self.cls_score",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "input_size",
                        "possible_values": [
                            [
                                "np.prod(input_size)",
                                "Call"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "num_classes + 1",
                        "possible_values": []
                    }
                },
                "Linear_381": {
                    "variable": {
                        "value": "self.bbox_pred",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "input_size",
                        "possible_values": [
                            [
                                "np.prod(input_size)",
                                "Call"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "num_bbox_reg_classes * box_dim",
                        "possible_values": []
                    }
                }
            },
            "nonzero_229": {
                "variable": {
                    "value": "fg_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "(self.gt_classes >= 0) & (self.gt_classes < bg_class_ind)",
                    "possible_values": []
                }
            },
            "squeeze_229": {
                "variable": {
                    "value": "fg_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_334": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred_class_logits",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "isfinite_90": {
                "input": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "scores[valid_mask]",
                            "Subscript"
                        ],
                        [
                            "scores[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scores[filter_mask]",
                            "Subscript"
                        ],
                        [
                            "self.predict_probs()",
                            "Call"
                        ],
                        [
                            "self.cls_score(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_90": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cross_entropy_205": {
                "input": {
                    "value": "self.pred_class_logits",
                    "possible_values": []
                },
                "target": {
                    "value": "self.gt_classes",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            },
            "arange_234": {
                "variable": {
                    "value": "gt_class_cols",
                    "possible_values": []
                },
                "start": {
                    "value": "box_dim",
                    "possible_values": [
                        [
                            "gt_proposal_deltas.size(1)",
                            "Call"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "self.pred_proposal_deltas.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_321": {
                "variable": {
                    "value": "gt_classes",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gt_classes",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "possible_values": []
                }
            },
            "flatten_390": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_241": {
                "start": {
                    "value": "box_dim",
                    "possible_values": [
                        [
                            "gt_proposal_deltas.size(1)",
                            "Call"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "self.pred_proposal_deltas.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_323": {
                "start": {
                    "value": "num_pred",
                    "possible_values": [
                        [
                            "len(self.proposals)",
                            "Call"
                        ],
                        [
                            "len(self.proposals)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "predicted_boxes.device",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/keypoint_head.py": {
        "torch": {
            "BaseKeypointRCNNHead_118": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "cross_entropy_77": {
                "variable": {
                    "value": "keypoint_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_keypoint_logits[valid]",
                    "possible_values": []
                },
                "target": {
                    "value": "keypoint_targets[valid]",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                }
            },
            "nonzero_63": {
                "variable": {
                    "value": "valid",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat(valid, dim=0).to(dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(valid).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_63": {
                "variable": {
                    "value": "valid",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_221": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x)",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/mask_head.py": {
        "torch": {
            "BaseMaskRCNNHead_145": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_100": {
                "variable": {
                    "value": "mask_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_mask_logits",
                    "possible_values": [
                        [
                            "pred_mask_logits[:, 0]",
                            "Subscript"
                        ],
                        [
                            "pred_mask_logits[indices, gt_classes]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_masks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat(gt_masks, dim=0)",
                            "Call"
                        ],
                        [
                            "gt_masks.to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            },
            "arange_68": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "start": {
                    "value": "total_num_masks",
                    "possible_values": [
                        [
                            "pred_mask_logits.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_94": {
                "variable": {
                    "value": "vis_masks",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_masks, gt_masks]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "arange_134": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "start": {
                    "value": "num_masks",
                    "possible_values": [
                        [
                            "pred_mask_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "class_pred.device",
                    "possible_values": []
                }
            },
            "relu_243": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv(x)",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "vis_mask",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_mask] * 3",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/roi_heads.py": {
        "torch": {
            "ROIHeads_122": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "nonzero_113": {
                "variable": {
                    "value": "selection_idxs",
                    "possible_values": []
                },
                "input": {
                    "value": "selection",
                    "possible_values": [
                        [
                            "(kp_in_box & vis_mask).any(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_113": {
                "variable": {
                    "value": "selection_idxs",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "sampled_idxs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_fg_idxs, sampled_bg_idxs]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_388": {
                "*args": {
                    "value": "*blocks",
                    "possible_values": []
                }
            },
            "zeros_like_190": {
                "input": {
                    "value": "matched_idxs",
                    "possible_values": []
                }
            },
            "cat_432": {
                "tensors": {
                    "value": "fg_selection_masks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "no_grad_657": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/rotated_fast_rcnn.py": {
        "torch": {
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "isfinite_97": {
                "input": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "scores[valid_mask]",
                            "Subscript"
                        ],
                        [
                            "scores[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scores[filter_mask]",
                            "Subscript"
                        ],
                        [
                            "self.predict_probs()",
                            "Call"
                        ]
                    ]
                }
            },
            "all_97": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/sampling.py": {
        "torch": {
            "nonzero_34": {
                "variable": {
                    "value": "positive",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels != -1) & (labels != bg_label)",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "positive",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "nonzero_35": {
                "variable": {
                    "value": "negative",
                    "possible_values": []
                },
                "input": {
                    "value": "labels == bg_label",
                    "possible_values": []
                }
            },
            "squeeze_35": {
                "variable": {
                    "value": "negative",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "randperm_45": {
                "n": {
                    "value": "positive.numel()",
                    "possible_values": []
                },
                "device": {
                    "value": "positive.device",
                    "possible_values": []
                }
            },
            "randperm_46": {
                "n": {
                    "value": "negative.numel()",
                    "possible_values": []
                },
                "device": {
                    "value": "negative.device",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/test_time_augmentation.py": {
        "torch": {
            "GeneralizedRCNNWithTTA_70": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.model": {
                    "value": "model",
                    "possible_values": [
                        [
                            "model.module",
                            "Attribute"
                        ]
                    ]
                },
                "self.tta_mapper": {
                    "value": "tta_mapper",
                    "possible_values": [
                        [
                            "DatasetMapperTTA(cfg)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_195": {
                "variable": {
                    "value": "all_boxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_boxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_boxes, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_201": {
                "variable": {
                    "value": "all_scores_2d",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "possible_values": [
                        [
                            "len(all_boxes)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes + 1",
                    "possible_values": []
                },
                "device": {
                    "value": "all_boxes.device",
                    "possible_values": []
                }
            },
            "stack_243": {
                "variable": {
                    "value": "all_pred_masks",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.pred_masks for o in outputs]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "mean_244": {
                "variable": {
                    "value": "avg_pred_masks",
                    "possible_values": []
                },
                "input": {
                    "value": "all_pred_masks",
                    "possible_values": [
                        [
                            "torch.stack([o.pred_masks for o in outputs], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "as_tensor_55": {
                "variable": {
                    "value": "resized",
                    "possible_values": []
                },
                "data": {
                    "value": "resized.transpose(2, 0, 1).astype('float32')",
                    "possible_values": []
                }
            },
            "flip_65": {
                "variable": {
                    "value": "dic[image]",
                    "possible_values": []
                },
                "input": {
                    "value": "resized",
                    "possible_values": [
                        [
                            "tfm.apply_image(image)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(resized.transpose(2, 0, 1).astype('float32'))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/solver/build.py": {
        "torch": {
            "SGD_50": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.SOLVER.BASE_LR",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/solver/lr_scheduler.py": {
        "torch": {}
    },
    "detectron2/structures/boxes.py": {
        "torch": {
            "where_326": {
                "variable": {
                    "value": "iou",
                    "possible_values": []
                },
                "condition": {
                    "value": "inter > 0",
                    "possible_values": []
                },
                "x": {
                    "value": "inter / (area1[:, None] + area2 - inter)",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros(1, dtype=inter.dtype, device=inter.device)",
                    "possible_values": []
                }
            },
            "max_352": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, :2]",
                    "possible_values": []
                }
            },
            "min_353": {
                "variable": {
                    "value": "rb",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 2:]",
                    "possible_values": []
                }
            },
            "as_tensor_145": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "torch.as_tensor(tensor, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "tensor.reshape((0, 4)).to(dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "tensor.device if isinstance(tensor, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "abs_82": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cos(a * math.pi / 180.0)",
                    "possible_values": []
                }
            },
            "abs_83": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sin(a * math.pi / 180.0)",
                    "possible_values": []
                }
            },
            "isfinite_185": {
                "input": {
                    "value": "self.tensor",
                    "possible_values": []
                }
            },
            "all_185": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "min_317": {
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "possible_values": []
                }
            },
            "max_317": {
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "possible_values": []
                }
            },
            "zeros_329": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inter.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "inter.device",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "arr",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(box)",
                    "possible_values": []
                }
            },
            "clone_60": {
                "variable": {
                    "value": "arr",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "angles",
                    "possible_values": []
                },
                "*size": {
                    "value": "(arr.shape[0], 1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "arr.dtype",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "arr",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(arr, angles)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "device_144": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "box",
                    "possible_values": [
                        [
                            "self.tensor",
                            "Attribute"
                        ],
                        [
                            "self.tensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cos_82": {
                "input": {
                    "value": "a * math.pi / 180.0",
                    "possible_values": []
                }
            },
            "sin_83": {
                "input": {
                    "value": "a * math.pi / 180.0",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/structures/image_list.py": {
        "torch": {
            "pad_92": {
                "variable": {
                    "value": "padded",
                    "possible_values": []
                },
                "input": {
                    "value": "tensors[0]",
                    "possible_values": []
                },
                "pad": {
                    "value": "padding_size",
                    "possible_values": [
                        [
                            "[0, max_size[-1] - image_size[1], 0, max_size[-2] - image_size[0]]",
                            "List"
                        ]
                    ]
                },
                "value": {
                    "value": "pad_value",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/structures/instances.py": {
        "torch": {}
    },
    "detectron2/structures/keypoints.py": {
        "torch": {
            "arange_173": {
                "variable": {
                    "value": "keypoints_idx",
                    "possible_values": []
                },
                "start": {
                    "value": "num_keypoints",
                    "possible_values": []
                },
                "device": {
                    "value": "maps.device",
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "as_tensor_29": {
                "variable": {
                    "value": "keypoints",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "possible_values": [
                        [
                            "torch.as_tensor(keypoints, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "keypoints.device if isinstance(keypoints, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_28": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/structures/masks.py": {
        "torch": {
            "from_numpy_80": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "polygons_to_bitmask(polygons, mask_size, mask_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_99": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "torch.as_tensor(tensor, dtype=torch.bool, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "tensor.device if isinstance(tensor, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "self.tensor.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_190": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_inds, boxes]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_286": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.polygons)",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "device_279": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "as_tensor_288": {
                "variable": {
                    "value": "minxy",
                    "possible_values": []
                },
                "data": {
                    "value": "[float('inf'), float('inf')]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "maxxy",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "from_numpy_307": {
                "ndarray": {
                    "value": "np.asarray(keep, dtype=np.bool)",
                    "possible_values": []
                }
            },
            "stack_385": {
                "tensors": {
                    "value": "results",
                    "possible_values": [
                        [
                            "[rasterize_polygons_within_box(poly, box.numpy(), mask_size) for (poly, box) in zip(self.polygons, boxes)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_404": {
                "data": {
                    "value": "area",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "device_98": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "stack_167": {
                "tensors": {
                    "value": "[torch.from_numpy(x) for x in masks]",
                    "possible_values": []
                }
            },
            "arange_189": {
                "start": {
                    "value": "len(boxes)",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "tensor.device if isinstance(tensor, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "self.tensor.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_291": {
                "variable": {
                    "value": "coords",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "polygon",
                    "possible_values": [
                        [
                            "polygons_per_instance",
                            "Name"
                        ],
                        [
                            "polygons_per_instance",
                            "Name"
                        ]
                    ]
                }
            },
            "min_292": {
                "input": {
                    "value": "coords",
                    "possible_values": [
                        [
                            "torch.from_numpy(polygon).view(-1, 2).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_293": {
                "input": {
                    "value": "coords",
                    "possible_values": [
                        [
                            "torch.from_numpy(polygon).view(-1, 2).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "device_373": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "empty_384": {
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "mask_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "tensor.device if isinstance(tensor, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "self.tensor.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_167": {
                "ndarray": {
                    "value": "x",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/structures/rotated_boxes.py": {
        "torch": {
            "as_tensor_215": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "torch.as_tensor(tensor, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 5, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "tensor.device if isinstance(tensor, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "min_298": {
                "variable": {
                    "value": "self.tensor[idx, 2]",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tensor[idx, 2]",
                    "possible_values": []
                }
            },
            "min_299": {
                "variable": {
                    "value": "self.tensor[idx, 3]",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tensor[idx, 3]",
                    "possible_values": []
                }
            },
            "abs_367": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cos(a * math.pi / 180.0)",
                    "possible_values": []
                }
            },
            "abs_368": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sin(a * math.pi / 180.0)",
                    "possible_values": []
                }
            },
            "cos_401": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "possible_values": [
                        [
                            "self.tensor[:, 4] * math.pi / 180.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_402": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "possible_values": [
                        [
                            "self.tensor[:, 4] * math.pi / 180.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "tensor.device if isinstance(tensor, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sqrt_430": {
                "input": {
                    "value": "(scale_x * c) ** 2 + (scale_y * s) ** 2",
                    "possible_values": []
                }
            },
            "sqrt_440": {
                "input": {
                    "value": "(scale_x * s) ** 2 + (scale_y * c) ** 2",
                    "possible_values": []
                }
            },
            "device_214": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "where_280": {
                "condition": {
                    "value": "torch.abs(self.tensor[:, 4]) <= clip_angle_threshold",
                    "possible_values": []
                }
            },
            "cos_367": {
                "input": {
                    "value": "a * math.pi / 180.0",
                    "possible_values": []
                }
            },
            "sin_368": {
                "input": {
                    "value": "a * math.pi / 180.0",
                    "possible_values": []
                }
            },
            "atan2_452": {
                "input": {
                    "value": "scale_x * s",
                    "possible_values": []
                },
                "other": {
                    "value": "scale_y * c",
                    "possible_values": []
                }
            },
            "abs_280": {
                "input": {
                    "value": "self.tensor[:, 4]",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/utils/analysis.py": {
        "torch": {
            "WrapModel_38": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/utils/collect_env.py": {
        "torch": {
            "is_available_56": {
                "variable": {
                    "value": "has_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_89": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_device_name_90": {
                "device": {
                    "value": "k",
                    "possible_values": [
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/utils/comm.py": {
        "torch": {
            "device_97": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if backend == gloo else cuda",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "local_size",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "padding",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size - local_size,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_256": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_24": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_32": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_44": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_74": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "[1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "possible_values": []
                }
            },
            "empty_165": {
                "*size": {
                    "value": "(max_size,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "possible_values": []
                }
            },
            "gather_208": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "tensor_list",
                    "possible_values": [
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dst": {
                    "value": "dst",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "possible_values": [
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_216": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[]",
                    "possible_values": []
                },
                "dst": {
                    "value": "dst",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "possible_values": [
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_206": {
                "*size": {
                    "value": "(max_size,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/utils/env.py": {
        "torch": {
            "set_rng_state_31": {
                "new_state": {
                    "value": "torch.manual_seed(seed).get_state()",
                    "possible_values": []
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "os.getpid() + int(datetime.now().strftime('%S%f')) + int.from_bytes(os.urandom(2), 'big')",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/utils/events.py": {
        "torch": {
            "SummaryWriter_126": {
                "variable": {
                    "value": "self._writer",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "possible_values": []
                }
            },
            "is_available_180": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_memory_allocated_181": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/utils/memory.py": {
        "torch": {
            "empty_cache_75": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/utils/visualizer.py": {
        "torch": {
            "unique_147": {
                "variable": {
                    "value": "(segment_ids, areas)",
                    "possible_values": []
                },
                "input": {
                    "value": "panoptic_seg",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "device_315": {
                "variable": {
                    "value": "self.cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "docs/conf.py": {
        "torch": {}
    },
    "projects/DensePose/apply_net.py": {
        "torch": {
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "projects/DensePose/densepose/dataset_mapper.py": {
        "torch": {
            "as_tensor_68": {
                "variable": {
                    "value": "dataset_dict[image]",
                    "possible_values": []
                },
                "data": {
                    "value": "image.transpose(2, 0, 1).astype('float32')",
                    "possible_values": []
                }
            }
        }
    },
    "projects/DensePose/densepose/densepose_head.py": {
        "torch": {
            "DensePoseDeepLabHead_25": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "n_channels": {
                    "value": "input_channels",
                    "possible_values": []
                },
                "self.n_out_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DENSEPOSE_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DENSEPOSE_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ASPPConv_85": {
                "base_class_0": {
                    "value": "torch.nn.Sequential",
                    "possible_values": []
                }
            },
            "ASPPPooling_97": {
                "base_class_0": {
                    "value": "torch.nn.Sequential",
                    "possible_values": []
                }
            },
            "ASPP_112": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_130": {
                    "variable": {
                        "value": "self.convs",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "modules",
                        "possible_values": [
                            [
                                "[nn.Conv2d(in_channels, out_channels, 3, padding=dilation, dilation=dilation, bias=False), nn.GroupNorm(32, out_channels), nn.ReLU()]",
                                "List"
                            ],
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                },
                "Sequential_132": {
                    "variable": {
                        "value": "self.project",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(5 * out_channels, out_channels, 1, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "_NonLocalBlockND_150": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.dimension": {
                    "value": "dimension",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.sub_sample": {
                    "value": "sub_sample",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.inter_channels": {
                    "value": "inter_channels",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DensePoseV1ConvXHead_271": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "n_channels": {
                    "value": "input_channels",
                    "possible_values": []
                },
                "self.n_out_channels": {
                    "value": "n_channels",
                    "possible_values": [
                        [
                            "input_channels",
                            "Name"
                        ],
                        [
                            "hidden_dim",
                            "Name"
                        ],
                        [
                            "input_channels",
                            "Name"
                        ],
                        [
                            "hidden_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "DensePosePredictor_304": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "dim_in": {
                    "value": "input_channels",
                    "possible_values": []
                }
            },
            "min_481": {
                "variable": {
                    "value": "v_grid",
                    "possible_values": []
                },
                "input": {
                    "value": "v_hi.float()",
                    "possible_values": []
                }
            },
            "stack_618": {
                "variable": {
                    "value": "grid",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x, grid_y)",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "grid_sample_620": {
                "variable": {
                    "value": "zresampled",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "W_y + x",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "possible_values": [
                        [
                            "torch.stack((grid_x, grid_y), dim=3)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "res",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_247": {
                "variable": {
                    "value": "f",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "possible_values": [
                        [
                            "self.theta(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "possible_values": [
                        [
                            "self.phi(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_248": {
                "variable": {
                    "value": "f_div_C",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_250": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C",
                    "possible_values": [
                        [
                            "F.softmax(f, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "possible_values": [
                        [
                            "self.g(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_352": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_718": {
                "variable": {
                    "value": "i_gt",
                    "possible_values": []
                },
                "tensors": {
                    "value": "i_gt_all",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_719": {
                "variable": {
                    "value": "x_norm",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_norm_all",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_720": {
                "variable": {
                    "value": "y_norm",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_norm_all",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_721": {
                "variable": {
                    "value": "u_gt",
                    "possible_values": []
                },
                "tensors": {
                    "value": "u_gt_all",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_722": {
                "variable": {
                    "value": "v_gt",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v_gt_all",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_723": {
                "variable": {
                    "value": "s_gt",
                    "possible_values": []
                },
                "tensors": {
                    "value": "s_gt_all",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_724": {
                "variable": {
                    "value": "bbox_xywh_gt",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_xywh_gt_all",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_725": {
                "variable": {
                    "value": "bbox_xywh_est",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_xywh_est_all",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_726": {
                "variable": {
                    "value": "i_bbox",
                    "possible_values": []
                },
                "tensors": {
                    "value": "i_bbox_all",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.ASPP(x0)",
                            "Call"
                        ],
                        [
                            "self.NLBlock(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, layer_name)(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "super(ASPPPooling, self).forward(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "getattr(self, layer_name)(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_109": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.ASPP(x0)",
                            "Call"
                        ],
                        [
                            "self.NLBlock(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, layer_name)(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "super(ASPPPooling, self).forward(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "getattr(self, layer_name)(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "x.shape[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "MaxPool3d_171": {
                "variable": {
                    "value": "max_pool_layer",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "variable": {
                    "value": "self.W",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "possible_values": []
                }
            },
            "Sequential_230": {
                "variable": {
                    "value": "self.g",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.g",
                    "possible_values": []
                }
            },
            "Sequential_231": {
                "variable": {
                    "value": "self.phi",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.phi",
                    "possible_values": []
                }
            },
            "relu_295": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.ASPP(x0)",
                            "Call"
                        ],
                        [
                            "self.NLBlock(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, layer_name)(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "super(ASPPPooling, self).forward(x)",
                            "Call"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "getattr(self, layer_name)(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_608": {
                "start": {
                    "value": "wout",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "arange_609": {
                "start": {
                    "value": "hout",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "GroupNorm_91": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_100": {
                "output_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "GroupNorm_102": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, bias=False)",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "5 * out_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool2d_175": {
                "variable": {
                    "value": "max_pool_layer",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                }
            },
            "MaxPool1d_179": {
                "variable": {
                    "value": "max_pool_layer",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "no_grad_773": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_850": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_862": {
                "input": {
                    "value": "u_est",
                    "possible_values": [
                        [
                            "u_est_all[j_valid_fg]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "u_gt",
                    "possible_values": [
                        [
                            "torch.cat(u_gt_all, 0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "u_gt_all[j_valid_fg]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_864": {
                "input": {
                    "value": "v_est",
                    "possible_values": [
                        [
                            "v_est_all[j_valid_fg]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "v_gt",
                    "possible_values": [
                        [
                            "torch.cat(v_gt_all, 0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "v_gt_all[j_valid_fg]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                }
            },
            "cross_entropy_866": {
                "input": {
                    "value": "index_uv_est",
                    "possible_values": [
                        [
                            "index_uv_est_all[j_valid, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "index_uv_gt.long()",
                    "possible_values": []
                }
            },
            "cross_entropy_871": {
                "input": {
                    "value": "s_est",
                    "possible_values": [
                        [
                            "s[i_with_dp]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "s_gt.long()",
                    "possible_values": []
                }
            },
            "GroupNorm_47": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DENSEPOSE_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DENSEPOSE_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "GroupNorm_119": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "full_like_667": {
                "variable": {
                    "value": "i_bbox_k",
                    "possible_values": []
                },
                "input": {
                    "value": "dp_gt.i",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bbox_with_dp_offset + len(i_with_dp)",
                    "possible_values": []
                }
            }
        }
    },
    "projects/DensePose/densepose/evaluator.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "self._cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "projects/DensePose/densepose/roi_head.py": {
        "torch": {
            "Decoder_25": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_features": {
                    "value": "in_features",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "empty_tensor",
                    "possible_values": []
                },
                "size": {
                    "value": "(0, 0, 0, 0)",
                    "possible_values": []
                },
                "device": {
                    "value": "features_dp.device",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "*args": {
                    "value": "*head_ops",
                    "possible_values": []
                }
            },
            "Upsample_66": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "projects/DensePose/densepose/structures.py": {
        "torch": {
            "device_460": {
                "variable": {
                    "value": "_TORCH_DEVICE_CPU",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "as_tensor_78": {
                "variable": {
                    "value": "self.x",
                    "possible_values": []
                },
                "data": {
                    "value": "annotation[DensePoseDataRelative.X_KEY]",
                    "possible_values": []
                }
            },
            "as_tensor_79": {
                "variable": {
                    "value": "self.y",
                    "possible_values": []
                },
                "data": {
                    "value": "annotation[DensePoseDataRelative.Y_KEY]",
                    "possible_values": []
                }
            },
            "as_tensor_80": {
                "variable": {
                    "value": "self.i",
                    "possible_values": []
                },
                "data": {
                    "value": "annotation[DensePoseDataRelative.I_KEY]",
                    "possible_values": []
                }
            },
            "as_tensor_81": {
                "variable": {
                    "value": "self.u",
                    "possible_values": []
                },
                "data": {
                    "value": "annotation[DensePoseDataRelative.U_KEY]",
                    "possible_values": []
                }
            },
            "as_tensor_82": {
                "variable": {
                    "value": "self.v",
                    "possible_values": []
                },
                "data": {
                    "value": "annotation[DensePoseDataRelative.V_KEY]",
                    "possible_values": []
                }
            },
            "device_84": {
                "variable": {
                    "value": "self.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "segm",
                    "possible_values": []
                },
                "*size": {
                    "value": "(DensePoseDataRelative.MASK_SIZE,) * 2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "meshgrid_264": {
                "variable": {
                    "value": "grid",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(topleft_norm[1], bottomright_norm[1], (bottomright_norm[1] - topleft_norm[1]) / hsize)[:hsize]",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(topleft_norm[0], bottomright_norm[0], (bottomright_norm[0] - topleft_norm[0]) / wsize)[:wsize]",
                    "possible_values": []
                }
            },
            "stack_276": {
                "variable": {
                    "value": "grid",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid",
                    "possible_values": [
                        [
                            "torch.meshgrid(torch.arange(topleft_norm[1], bottomright_norm[1], (bottomright_norm[1] - topleft_norm[1]) / hsize)[:hsize], torch.arange(topleft_norm[0], bottomright_norm[0], (bottomright_norm[0] - topleft_norm[0]) / wsize)[:wsize])",
                            "Call"
                        ],
                        [
                            "torch.stack(grid, dim=2).to(S.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "grid_sample_283": {
                "variable": {
                    "value": "S_new",
                    "possible_values": []
                },
                "input": {
                    "value": "S.unsqueeze(0)",
                    "possible_values": []
                },
                "grid": {
                    "value": "torch.unsqueeze(grid, 0)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "squeeze_283": {
                "variable": {
                    "value": "S_new",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "grid_sample_290": {
                "variable": {
                    "value": "I_new",
                    "possible_values": []
                },
                "input": {
                    "value": "I.unsqueeze(0)",
                    "possible_values": []
                },
                "grid": {
                    "value": "torch.unsqueeze(grid, 0)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "squeeze_290": {
                "variable": {
                    "value": "I_new",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "grid_sample_297": {
                "variable": {
                    "value": "U_new",
                    "possible_values": []
                },
                "input": {
                    "value": "U.unsqueeze(0)",
                    "possible_values": []
                },
                "grid": {
                    "value": "torch.unsqueeze(grid, 0)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "squeeze_297": {
                "variable": {
                    "value": "U_new",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "grid_sample_304": {
                "variable": {
                    "value": "V_new",
                    "possible_values": []
                },
                "input": {
                    "value": "V.unsqueeze(0)",
                    "possible_values": []
                },
                "grid": {
                    "value": "torch.unsqueeze(grid, 0)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "squeeze_304": {
                "variable": {
                    "value": "V_new",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_378": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, h, w]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "U.device",
                    "possible_values": []
                }
            },
            "interpolate_382": {
                "variable": {
                    "value": "s_bbox",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "argmax_382": {
                "variable": {
                    "value": "s_bbox",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_393": {
                "variable": {
                    "value": "u_bbox",
                    "possible_values": []
                },
                "input": {
                    "value": "U",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_397": {
                "variable": {
                    "value": "v_bbox",
                    "possible_values": []
                },
                "input": {
                    "value": "V",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "flip_175": {
                "variable": {
                    "value": "self.segm",
                    "possible_values": []
                },
                "input": {
                    "value": "self.segm",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "possible_values": []
                }
            },
            "arange_265": {
                "start": {
                    "value": "topleft_norm[1]",
                    "possible_values": []
                },
                "end": {
                    "value": "bottomright_norm[1]",
                    "possible_values": []
                },
                "step": {
                    "value": "(bottomright_norm[1] - topleft_norm[1]) / hsize",
                    "possible_values": []
                }
            },
            "arange_270": {
                "start": {
                    "value": "topleft_norm[0]",
                    "possible_values": []
                },
                "end": {
                    "value": "bottomright_norm[0]",
                    "possible_values": []
                },
                "step": {
                    "value": "(bottomright_norm[0] - topleft_norm[0]) / wsize",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "ndarray": {
                    "value": "map_src[0, i]",
                    "possible_values": []
                }
            },
            "unsqueeze_285": {
                "input": {
                    "value": "grid",
                    "possible_values": [
                        [
                            "torch.meshgrid(torch.arange(topleft_norm[1], bottomright_norm[1], (bottomright_norm[1] - topleft_norm[1]) / hsize)[:hsize], torch.arange(topleft_norm[0], bottomright_norm[0], (bottomright_norm[0] - topleft_norm[0]) / wsize)[:wsize])",
                            "Call"
                        ],
                        [
                            "torch.stack(grid, dim=2).to(S.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "unsqueeze_292": {
                "input": {
                    "value": "grid",
                    "possible_values": [
                        [
                            "torch.meshgrid(torch.arange(topleft_norm[1], bottomright_norm[1], (bottomright_norm[1] - topleft_norm[1]) / hsize)[:hsize], torch.arange(topleft_norm[0], bottomright_norm[0], (bottomright_norm[0] - topleft_norm[0]) / wsize)[:wsize])",
                            "Call"
                        ],
                        [
                            "torch.stack(grid, dim=2).to(S.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "unsqueeze_299": {
                "input": {
                    "value": "grid",
                    "possible_values": [
                        [
                            "torch.meshgrid(torch.arange(topleft_norm[1], bottomright_norm[1], (bottomright_norm[1] - topleft_norm[1]) / hsize)[:hsize], torch.arange(topleft_norm[0], bottomright_norm[0], (bottomright_norm[0] - topleft_norm[0]) / wsize)[:wsize])",
                            "Call"
                        ],
                        [
                            "torch.stack(grid, dim=2).to(S.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "unsqueeze_306": {
                "input": {
                    "value": "grid",
                    "possible_values": [
                        [
                            "torch.meshgrid(torch.arange(topleft_norm[1], bottomright_norm[1], (bottomright_norm[1] - topleft_norm[1]) / hsize)[:hsize], torch.arange(topleft_norm[0], bottomright_norm[0], (bottomright_norm[0] - topleft_norm[0]) / wsize)[:wsize])",
                            "Call"
                        ],
                        [
                            "torch.stack(grid, dim=2).to(S.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "interpolate_387": {
                "input": {
                    "value": "I",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "argmax_387": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "projects/DensePose/densepose/vis/base.py": {
        "torch": {}
    },
    "projects/DensePose/densepose/vis/extractor.py": {
        "torch": {
            "zeros_130": {
                "variable": {
                    "value": "select_local",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(boxes_xywh)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes_xywh.device",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "len(scores)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "possible_values": []
                }
            }
        }
    },
    "projects/DensePose/query_db.py": {
        "torch": {
            "as_tensor_205": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "data": {
                    "value": "annotation['bbox']",
                    "possible_values": []
                }
            }
        }
    },
    "projects/PointRend/point_rend/coarse_mask_head.py": {
        "torch": {
            "CoarseMaskHead_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_70": {
                    "variable": {
                        "value": "self.prediction",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.fc_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "output_dim",
                        "possible_values": [
                            [
                                "self.num_classes * self.output_side_resolution * self.output_side_resolution",
                                "BinOp"
                            ]
                        ]
                    }
                }
            },
            "flatten_87": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(N, self.input_channels, self.input_h, self.input_w)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(layer(x))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "possible_values": [
                        [
                            "conv_dim * self.input_h * self.input_w",
                            "BinOp"
                        ],
                        [
                            "input_dim // 4",
                            "BinOp"
                        ],
                        [
                            "self.fc_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x)",
                    "possible_values": []
                }
            }
        }
    },
    "projects/PointRend/point_rend/point_features.py": {
        "torch": {
            "grid_sample_39": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "grid": {
                    "value": "2.0 * point_coords - 1.0",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "aff",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.5, 0, 0.5], [0, 0.5, 0.5]]]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "affine_grid_59": {
                "variable": {
                    "value": "r",
                    "possible_values": []
                },
                "theta": {
                    "value": "aff",
                    "possible_values": [
                        [
                            "torch.tensor([[[0.5, 0, 0.5], [0, 0.5, 0.5]]], device=device)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((1, 1, side_size, side_size))",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "rand_90": {
                "variable": {
                    "value": "point_coords",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "possible_values": [
                        [
                            "coarse_logits.shape[0]",
                            "Subscript"
                        ],
                        [
                            "[len(b) for b in boxes]",
                            "ListComp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_sampled",
                    "possible_values": [
                        [
                            "int(num_points * oversample_ratio)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                },
                "device": {
                    "value": "coarse_logits.device",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "point_coords",
                    "possible_values": []
                },
                "*size": {
                    "value": "R",
                    "possible_values": []
                },
                "out": {
                    "value": "num_points",
                    "possible_values": [
                        [
                            "min(H * W, num_points)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                },
                "device": {
                    "value": "uncertainty_map.device",
                    "possible_values": []
                }
            },
            "split_169": {
                "variable": {
                    "value": "split_point_coords_wrt_image",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_coords_wrt_image",
                    "possible_values": [
                        [
                            "get_point_coords_wrt_image(cat_boxes.tensor, point_coords)",
                            "Call"
                        ],
                        [
                            "point_coords.clone()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "num_boxes",
                    "possible_values": [
                        [
                            "coarse_logits.shape[0]",
                            "Subscript"
                        ],
                        [
                            "[len(b) for b in boxes]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "topk_102": {
                "input": {
                    "value": "point_uncertainties[:, 0, :]",
                    "possible_values": []
                },
                "k": {
                    "value": "num_uncertain_points",
                    "possible_values": [
                        [
                            "int(importance_sample_ratio * num_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_103": {
                "start": {
                    "value": "num_boxes",
                    "possible_values": [
                        [
                            "coarse_logits.shape[0]",
                            "Subscript"
                        ],
                        [
                            "[len(b) for b in boxes]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "coarse_logits.device",
                    "possible_values": []
                }
            },
            "topk_139": {
                "input": {
                    "value": "uncertainty_map.view(R, H * W)",
                    "possible_values": []
                },
                "k": {
                    "value": "num_points",
                    "possible_values": [
                        [
                            "min(H * W, num_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_112": {
                "*size": {
                    "value": "num_boxes",
                    "possible_values": [
                        [
                            "coarse_logits.shape[0]",
                            "Subscript"
                        ],
                        [
                            "[len(b) for b in boxes]",
                            "ListComp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_random_points",
                    "possible_values": [
                        [
                            "num_points - num_uncertain_points",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                },
                "device": {
                    "value": "coarse_logits.device",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "[w, h]",
                    "possible_values": []
                },
                "device": {
                    "value": "feature_map.device",
                    "possible_values": []
                }
            }
        }
    },
    "projects/PointRend/point_rend/point_head.py": {
        "torch": {
            "StandardPointHead_97": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv1d_131": {
                    "variable": {
                        "value": "self.predictor",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "fc_dim_in",
                        "possible_values": [
                            [
                                "input_channels + num_classes",
                                "BinOp"
                            ],
                            [
                                "fc_dim",
                                "Name"
                            ],
                            [
                                "fc_dim_in + (num_classes if self.coarse_pred_each_layer else 0)",
                                "BinOp"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "num_mask_classes",
                        "possible_values": [
                            [
                                "1 if cls_agnostic_mask else num_classes",
                                "IfExp"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "0",
                        "possible_values": []
                    }
                }
            },
            "binary_cross_entropy_with_logits_90": {
                "variable": {
                    "value": "point_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_logits",
                    "possible_values": [
                        [
                            "mask_logits[:, 0]",
                            "Subscript"
                        ],
                        [
                            "mask_logits[indices, gt_classes]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_mask_logits.to(dtype=torch.float32)",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            },
            "arange_81": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "start": {
                    "value": "total_num_masks",
                    "possible_values": [
                        [
                            "mask_logits.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_141": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fine_grained_features, coarse_features)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "data": {
                    "value": "[w, h]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_bit_masks.device",
                    "possible_values": []
                }
            },
            "Conv1d_124": {
                "variable": {
                    "value": "fc",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim_in",
                    "possible_values": [
                        [
                            "input_channels + num_classes",
                            "BinOp"
                        ],
                        [
                            "fc_dim",
                            "Name"
                        ],
                        [
                            "fc_dim_in + (num_classes if self.coarse_pred_each_layer else 0)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fc_dim",
                    "possible_values": [
                        [
                            "cfg.MODEL.POINT_HEAD.FC_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x)",
                    "possible_values": []
                }
            }
        }
    },
    "projects/PointRend/point_rend/roi_heads.py": {
        "torch": {
            "abs_47": {
                "input": {
                    "value": "gt_class_logits",
                    "possible_values": [
                        [
                            "logits.clone()",
                            "Call"
                        ],
                        [
                            "logits[torch.arange(logits.shape[0], device=logits.device), classes].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "arange_45": {
                "start": {
                    "value": "logits.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "logits.device",
                    "possible_values": []
                }
            }
        }
    },
    "projects/PointRend/train_net.py": {
        "torch": {
            "device_count_53": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "projects/TensorMask/setup.py": {
        "torch": {
            "split_10": {
                "tensor": {
                    "value": ".",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "projects/TensorMask/tensormask/arch.py": {
        "torch": {
            "TensorMask_285": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "device_296": {
                    "variable": {
                        "value": "self.device",
                        "possible_values": []
                    },
                    "type": {
                        "value": "cfg.MODEL.DEVICE",
                        "possible_values": []
                    }
                },
                "tensor_314": {
                    "variable": {
                        "value": "self.mask_pos_weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "cfg.MODEL.TENSOR_MASK.POSITIVE_WEIGHT",
                        "possible_values": []
                    },
                    "dtype": {
                        "value": "torch.float32",
                        "possible_values": []
                    },
                    "device": {
                        "value": "self.device",
                        "possible_values": []
                    }
                },
                "Tensor_339": {
                    "variable": {
                        "value": "pixel_mean",
                        "possible_values": []
                    }
                },
                "Tensor_340": {
                    "variable": {
                        "value": "pixel_std",
                        "possible_values": []
                    }
                }
            },
            "TensorMaskHead_745": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.mask_sizes": {
                    "value": "mask_sizes",
                    "possible_values": [
                        [
                            "torch.tensor([m.shape[-1] for m in masks])",
                            "Call"
                        ]
                    ]
                },
                "cur_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "input_shape[0].channels",
                            "Attribute"
                        ]
                    ]
                },
                "Sequential_777": {
                    "variable": {
                        "value": "self.cls_subnet",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*cls_subnet",
                        "possible_values": []
                    }
                },
                "Conv2d_778": {
                    "variable": {
                        "value": "self.cls_score",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "cur_channels",
                        "possible_values": [
                            [
                                "in_channels",
                                "Name"
                            ],
                            [
                                "cls_channels",
                                "Name"
                            ],
                            [
                                "in_channels",
                                "Name"
                            ],
                            [
                                "bbox_channels",
                                "Name"
                            ],
                            [
                                "in_channels",
                                "Name"
                            ],
                            [
                                "mask_channels",
                                "Name"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "num_anchors * num_classes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Sequential_793": {
                    "variable": {
                        "value": "self.bbox_subnet",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*bbox_subnet",
                        "possible_values": []
                    }
                },
                "Conv2d_794": {
                    "variable": {
                        "value": "self.bbox_pred",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "cur_channels",
                        "possible_values": [
                            [
                                "in_channels",
                                "Name"
                            ],
                            [
                                "cls_channels",
                                "Name"
                            ],
                            [
                                "in_channels",
                                "Name"
                            ],
                            [
                                "bbox_channels",
                                "Name"
                            ],
                            [
                                "in_channels",
                                "Name"
                            ],
                            [
                                "mask_channels",
                                "Name"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "num_anchors * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "min_71": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_boxes[:, None, :2]",
                    "possible_values": []
                }
            },
            "max_72": {
                "variable": {
                    "value": "rb",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_boxes[:, None, 2:]",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "dummy_gt_boxes",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_boxes",
                    "possible_values": []
                }
            },
            "all_78": {
                "variable": {
                    "value": "contain_matrix",
                    "possible_values": []
                },
                "input": {
                    "value": "union == anchor",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "mask_sizes",
                    "possible_values": []
                },
                "data": {
                    "value": "[m.shape[-1] for m in masks]",
                    "possible_values": []
                }
            },
            "unique_150": {
                "variable": {
                    "value": "unique_sizes",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_sizes",
                    "possible_values": [
                        [
                            "torch.tensor([m.shape[-1] for m in masks])",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_162": {
                "variable": {
                    "value": "img_masks_out",
                    "possible_values": []
                },
                "input": {
                    "value": "img_masks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat(img_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_432": {
                "variable": {
                    "value": "loss_normalizer",
                    "possible_values": []
                },
                "data": {
                    "value": "max(1, num_fg)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "zeros_608": {
                "variable": {
                    "value": "gt_classes_target",
                    "possible_values": []
                },
                "*size": {
                    "value": "(gt_classes.shape[0], self.num_classes)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "no_grad_493": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_81": {
                "input": {
                    "value": "gt_boxes[:, 2:] - gt_boxes[:, :2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_99": {
                "input": {
                    "value": "offset_center * offset_center",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "empty_144": {
                "*size": {
                    "value": "(0, 1) + image_shape",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "arange_230": {
                "variable": {
                    "value": "shifts_x",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_width * stride",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_233": {
                "variable": {
                    "value": "shifts_y",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_height * stride",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_236": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_height * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_width * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_237": {
                "variable": {
                    "value": "shifts",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, shift_x, shift_y)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "full_245": {
                "variable": {
                    "value": "shifts_l",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "lvl",
                    "possible_values": [
                        [
                            "range(self.num_levels)",
                            "Call"
                        ],
                        [
                            "range(self.num_levels)",
                            "Call"
                        ],
                        [
                            "range(num_levels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_246": {
                "variable": {
                    "value": "shifts_i",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_247": {
                "variable": {
                    "value": "shifts_h",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_height",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_248": {
                "variable": {
                    "value": "shifts_w",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_width",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_249": {
                "variable": {
                    "value": "shifts_a",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "base_anchors.shape[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_250": {
                "variable": {
                    "value": "grids",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_l",
                    "possible_values": [
                        [
                            "torch.full((1,), lvl, dtype=torch.int64, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_i",
                    "possible_values": [
                        [
                            "torch.zeros((1,), dtype=torch.int64, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_548": {
                "variable": {
                    "value": "gt_classes_i",
                    "possible_values": []
                },
                "input": {
                    "value": "unit_lengths_im",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.num_classes",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "Sequential_810": {
                "variable": {
                    "value": "self.mask_subnet",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mask_subnet",
                    "possible_values": []
                }
            },
            "max_87": {
                "input": {
                    "value": "anchor_boxes[:, 2:] - anchor_boxes[:, :2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "where_152": {
                "condition": {
                    "value": "mask_sizes == msize",
                    "possible_values": []
                }
            },
            "where_691": {
                "condition": {
                    "value": "pred_logits > self.score_threshold",
                    "possible_values": []
                }
            },
            "full_242": {
                "size": {
                    "value": "(cur_anchor.shape[0],)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "stride",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_252": {
                "tensors": {
                    "value": "grids",
                    "possible_values": [
                        [
                            "torch.meshgrid(shifts_l, shifts_i, shifts_h, shifts_w, shifts_a)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "Conv2d_772": {
                "in_channels": {
                    "value": "cur_channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "cls_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "bbox_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "mask_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cls_channels",
                    "possible_values": [
                        [
                            "cfg.MODEL.TENSOR_MASK.CLS_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_775": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_788": {
                "in_channels": {
                    "value": "cur_channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "cls_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "bbox_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "mask_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bbox_channels",
                    "possible_values": [
                        [
                            "cfg.MODEL.TENSOR_MASK.BBOX_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_791": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_832": {
                "variable": {
                    "value": "self.mask_fuse",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mask_fuse",
                    "possible_values": []
                }
            },
            "tensor_470": {
                "variable": {
                    "value": "cur_size_divider",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mask_loss_weight / cur_mask_size ** 2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "sigmoid_730": {
                "input": {
                    "value": "pred_masks[lvl][anc][:, h, w].view(1, cur_size, cur_size)",
                    "possible_values": []
                }
            },
            "Conv2d_805": {
                "in_channels": {
                    "value": "cur_channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "cls_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "bbox_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "mask_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mask_channels",
                    "possible_values": [
                        [
                            "cfg.MODEL.TENSOR_MASK.MASK_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_808": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_816": {
                "in_channels": {
                    "value": "cur_channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "cls_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "bbox_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "mask_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mask_size * mask_size",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "interpolate_882": {
                "variable": {
                    "value": "mask_feat_up",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_feat",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "lambda_val",
                    "possible_values": [
                        [
                            "2 ** lvl",
                            "BinOp"
                        ],
                        [
                            "2.0 ** lvl",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_483": {
                "input": {
                    "value": "cur_pred_masks.view(-1, cur_mask_size, cur_mask_size)",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_masks[lvl][anc].to(dtype=torch.float32)",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                },
                "weight": {
                    "value": "cur_size_divider",
                    "possible_values": [
                        [
                            "torch.tensor(self.mask_loss_weight / cur_mask_size ** 2, dtype=torch.float32, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "self.mask_pos_weight",
                    "possible_values": []
                }
            },
            "any_584": {
                "input": {
                    "value": "ids_lvl",
                    "possible_values": [
                        [
                            "matched_indexes[:, 0] == lvl",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_829": {
                "in_channels": {
                    "value": "cur_channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "cls_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "bbox_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "mask_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cur_channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "cls_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "bbox_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "mask_channels",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_830": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "any_588": {
                "input": {
                    "value": "ids_lvl_anchor",
                    "possible_values": [
                        [
                            "ids_lvl & (matched_indexes[:, 4] == anc)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "projects/TensorMask/tensormask/layers/swap_align2nat.py": {
        "torch": {
            "_SwapAlign2Nat_9": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "SwapAlign2Nat_32": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.lambda_val": {
                    "value": "lambda_val",
                    "possible_values": [
                        [
                            "ctx.lambda_val",
                            "Attribute"
                        ]
                    ]
                },
                "self.pad_val": {
                    "value": "pad_val",
                    "possible_values": [
                        [
                            "-6.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "projects/TensorMask/tests/test_swap_align2nat.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "rand_15": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "10",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tensor[None, :, :, :].astype('float32')",
                    "possible_values": []
                }
            },
            "gradcheck_17": {
                "func": {
                    "value": "m",
                    "possible_values": [
                        [
                            "SwapAlign2Nat(2).to(dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.rand(2, 4, 10, 10, dtype=dtype, device=device, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "projects/TridentNet/tridentnet/trident_backbone.py": {
        "torch": {
            "cat_115": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "possible_values": [
                        [
                            "[self.conv1(b) for b in x]",
                            "ListComp"
                        ],
                        [
                            "[F.relu_(b) for b in out]",
                            "ListComp"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "[F.relu_(b) for b in out]",
                            "ListComp"
                        ],
                        [
                            "[self.conv3(b) for b in out]",
                            "ListComp"
                        ],
                        [
                            "[out_b + shortcut_b for (out_b, shortcut_b) in zip(out, shortcut)]",
                            "ListComp"
                        ],
                        [
                            "[F.relu_(b) for b in out]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__100": {
                "input": {
                    "value": "b",
                    "possible_values": []
                }
            },
            "relu__103": {
                "input": {
                    "value": "b",
                    "possible_values": []
                }
            },
            "relu__113": {
                "input": {
                    "value": "b",
                    "possible_values": []
                }
            }
        }
    },
    "projects/TridentNet/tridentnet/trident_conv.py": {
        "torch": {
            "TridentConv_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.num_branch": {
                    "value": "num_branch",
                    "possible_values": [
                        [
                            "self.num_branch if self.training or self.test_branch_idx == -1 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.with_bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.test_branch_idx": {
                    "value": "test_branch_idx",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm": {
                    "value": "norm",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_46": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                        "possible_values": []
                    }
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "possible_values": []
                }
            },
            "conv2d_74": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "conv2d_79": {
                "input": {
                    "value": "inputs[0]",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.paddings[self.test_branch_idx]",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilations[self.test_branch_idx]",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            }
        }
    },
    "projects/TridentNet/tridentnet/trident_rpn.py": {
        "torch": {
            "cat_28": {
                "tensors": {
                    "value": "[images.tensor] * num_branch",
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {
            "split_13": {
                "tensor": {
                    "value": ".",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_anchor_generator.py": {
        "torch": {
            "tensor_25": {
                "variable": {
                    "value": "expected_anchor_tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-32.0, -8.0, 32.0, 8.0], [-16.0, -16.0, 16.0, 16.0], [-8.0, -32.0, 8.0, 32.0], [-64.0, -16.0, 64.0, 16.0], [-32.0, -32.0, 32.0, 32.0], [-16.0, -64.0, 16.0, 64.0], [-28.0, -8.0, 36.0, 8.0], [-12.0, -16.0, 20.0, 16.0], [-4.0, -32.0, 12.0, 32.0], [-60.0, -16.0, 68.0, 16.0], [-28.0, -32.0, 36.0, 32.0], [-12.0, -64.0, 20.0, 64.0]]",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "expected_anchor_tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-30.0, -6.0, 34.0, 10.0], [-14.0, -14.0, 18.0, 18.0], [-6.0, -30.0, 10.0, 34.0], [-62.0, -14.0, 66.0, 18.0], [-30.0, -30.0, 34.0, 34.0], [-14.0, -62.0, 18.0, 66.0], [-26.0, -6.0, 38.0, 10.0], [-10.0, -14.0, 22.0, 18.0], [-2.0, -30.0, 14.0, 34.0], [-58.0, -14.0, 70.0, 18.0], [-26.0, -30.0, 38.0, 34.0], [-10.0, -62.0, 22.0, 66.0]]",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "expected_anchor_tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 64.0, 16.0, 0.0], [0.0, 0.0, 64.0, 16.0, 45.0], [0.0, 0.0, 32.0, 32.0, 0.0], [0.0, 0.0, 32.0, 32.0, 45.0], [0.0, 0.0, 16.0, 64.0, 0.0], [0.0, 0.0, 16.0, 64.0, 45.0], [0.0, 0.0, 128.0, 32.0, 0.0], [0.0, 0.0, 128.0, 32.0, 45.0], [0.0, 0.0, 64.0, 64.0, 0.0], [0.0, 0.0, 64.0, 64.0, 45.0], [0.0, 0.0, 32.0, 128.0, 0.0], [0.0, 0.0, 32.0, 128.0, 45.0], [4.0, 0.0, 64.0, 16.0, 0.0], [4.0, 0.0, 64.0, 16.0, 45.0], [4.0, 0.0, 32.0, 32.0, 0.0], [4.0, 0.0, 32.0, 32.0, 45.0], [4.0, 0.0, 16.0, 64.0, 0.0], [4.0, 0.0, 16.0, 64.0, 45.0], [4.0, 0.0, 128.0, 32.0, 0.0], [4.0, 0.0, 128.0, 32.0, 45.0], [4.0, 0.0, 64.0, 64.0, 0.0], [4.0, 0.0, 64.0, 64.0, 45.0], [4.0, 0.0, 32.0, 128.0, 0.0], [4.0, 0.0, 32.0, 128.0, 45.0]]",
                    "possible_values": []
                }
            },
            "rand_23": {
                "*size": {
                    "value": "num_images",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "96",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "allclose_43": {
                "input": {
                    "value": "anchors[i][0].tensor",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_anchor_tensor",
                    "possible_values": [
                        [
                            "torch.tensor([[-32.0, -8.0, 32.0, 8.0], [-16.0, -16.0, 16.0, 16.0], [-8.0, -32.0, 8.0, 32.0], [-64.0, -16.0, 64.0, 16.0], [-32.0, -32.0, 32.0, 32.0], [-16.0, -64.0, 16.0, 64.0], [-28.0, -8.0, 36.0, 8.0], [-12.0, -16.0, 20.0, 16.0], [-4.0, -32.0, 12.0, 32.0], [-60.0, -16.0, 68.0, 16.0], [-28.0, -32.0, 36.0, 32.0], [-12.0, -64.0, 20.0, 64.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-30.0, -6.0, 34.0, 10.0], [-14.0, -14.0, 18.0, 18.0], [-6.0, -30.0, 10.0, 34.0], [-62.0, -14.0, 66.0, 18.0], [-30.0, -30.0, 34.0, 34.0], [-14.0, -62.0, 18.0, 66.0], [-26.0, -6.0, 38.0, 10.0], [-10.0, -14.0, 22.0, 18.0], [-2.0, -30.0, 14.0, 34.0], [-58.0, -14.0, 70.0, 18.0], [-26.0, -30.0, 38.0, 34.0], [-10.0, -62.0, 22.0, 66.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.0, 0.0, 64.0, 16.0, 0.0], [0.0, 0.0, 64.0, 16.0, 45.0], [0.0, 0.0, 32.0, 32.0, 0.0], [0.0, 0.0, 32.0, 32.0, 45.0], [0.0, 0.0, 16.0, 64.0, 0.0], [0.0, 0.0, 16.0, 64.0, 45.0], [0.0, 0.0, 128.0, 32.0, 0.0], [0.0, 0.0, 128.0, 32.0, 45.0], [0.0, 0.0, 64.0, 64.0, 0.0], [0.0, 0.0, 64.0, 64.0, 45.0], [0.0, 0.0, 32.0, 128.0, 0.0], [0.0, 0.0, 32.0, 128.0, 45.0], [4.0, 0.0, 64.0, 16.0, 0.0], [4.0, 0.0, 64.0, 16.0, 45.0], [4.0, 0.0, 32.0, 32.0, 0.0], [4.0, 0.0, 32.0, 32.0, 45.0], [4.0, 0.0, 16.0, 64.0, 0.0], [4.0, 0.0, 16.0, 64.0, 45.0], [4.0, 0.0, 128.0, 32.0, 0.0], [4.0, 0.0, 128.0, 32.0, 45.0], [4.0, 0.0, 64.0, 64.0, 0.0], [4.0, 0.0, 64.0, 64.0, 45.0], [4.0, 0.0, 32.0, 128.0, 0.0], [4.0, 0.0, 32.0, 128.0, 45.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_55": {
                "*size": {
                    "value": "num_images",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "96",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "allclose_75": {
                "input": {
                    "value": "anchors[i][0].tensor",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_anchor_tensor",
                    "possible_values": [
                        [
                            "torch.tensor([[-32.0, -8.0, 32.0, 8.0], [-16.0, -16.0, 16.0, 16.0], [-8.0, -32.0, 8.0, 32.0], [-64.0, -16.0, 64.0, 16.0], [-32.0, -32.0, 32.0, 32.0], [-16.0, -64.0, 16.0, 64.0], [-28.0, -8.0, 36.0, 8.0], [-12.0, -16.0, 20.0, 16.0], [-4.0, -32.0, 12.0, 32.0], [-60.0, -16.0, 68.0, 16.0], [-28.0, -32.0, 36.0, 32.0], [-12.0, -64.0, 20.0, 64.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-30.0, -6.0, 34.0, 10.0], [-14.0, -14.0, 18.0, 18.0], [-6.0, -30.0, 10.0, 34.0], [-62.0, -14.0, 66.0, 18.0], [-30.0, -30.0, 34.0, 34.0], [-14.0, -62.0, 18.0, 66.0], [-26.0, -6.0, 38.0, 10.0], [-10.0, -14.0, 22.0, 18.0], [-2.0, -30.0, 14.0, 34.0], [-58.0, -14.0, 70.0, 18.0], [-26.0, -30.0, 38.0, 34.0], [-10.0, -62.0, 22.0, 66.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.0, 0.0, 64.0, 16.0, 0.0], [0.0, 0.0, 64.0, 16.0, 45.0], [0.0, 0.0, 32.0, 32.0, 0.0], [0.0, 0.0, 32.0, 32.0, 45.0], [0.0, 0.0, 16.0, 64.0, 0.0], [0.0, 0.0, 16.0, 64.0, 45.0], [0.0, 0.0, 128.0, 32.0, 0.0], [0.0, 0.0, 128.0, 32.0, 45.0], [0.0, 0.0, 64.0, 64.0, 0.0], [0.0, 0.0, 64.0, 64.0, 45.0], [0.0, 0.0, 32.0, 128.0, 0.0], [0.0, 0.0, 32.0, 128.0, 45.0], [4.0, 0.0, 64.0, 16.0, 0.0], [4.0, 0.0, 64.0, 16.0, 45.0], [4.0, 0.0, 32.0, 32.0, 0.0], [4.0, 0.0, 32.0, 32.0, 45.0], [4.0, 0.0, 16.0, 64.0, 0.0], [4.0, 0.0, 16.0, 64.0, 45.0], [4.0, 0.0, 128.0, 32.0, 0.0], [4.0, 0.0, 128.0, 32.0, 45.0], [4.0, 0.0, 64.0, 64.0, 0.0], [4.0, 0.0, 64.0, 64.0, 45.0], [4.0, 0.0, 32.0, 128.0, 0.0], [4.0, 0.0, 32.0, 128.0, 45.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_86": {
                "*size": {
                    "value": "num_images",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "96",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "allclose_118": {
                "input": {
                    "value": "anchors[i][0].tensor",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_anchor_tensor",
                    "possible_values": [
                        [
                            "torch.tensor([[-32.0, -8.0, 32.0, 8.0], [-16.0, -16.0, 16.0, 16.0], [-8.0, -32.0, 8.0, 32.0], [-64.0, -16.0, 64.0, 16.0], [-32.0, -32.0, 32.0, 32.0], [-16.0, -64.0, 16.0, 64.0], [-28.0, -8.0, 36.0, 8.0], [-12.0, -16.0, 20.0, 16.0], [-4.0, -32.0, 12.0, 32.0], [-60.0, -16.0, 68.0, 16.0], [-28.0, -32.0, 36.0, 32.0], [-12.0, -64.0, 20.0, 64.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-30.0, -6.0, 34.0, 10.0], [-14.0, -14.0, 18.0, 18.0], [-6.0, -30.0, 10.0, 34.0], [-62.0, -14.0, 66.0, 18.0], [-30.0, -30.0, 34.0, 34.0], [-14.0, -62.0, 18.0, 66.0], [-26.0, -6.0, 38.0, 10.0], [-10.0, -14.0, 22.0, 18.0], [-2.0, -30.0, 14.0, 34.0], [-58.0, -14.0, 70.0, 18.0], [-26.0, -30.0, 38.0, 34.0], [-10.0, -62.0, 22.0, 66.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.0, 0.0, 64.0, 16.0, 0.0], [0.0, 0.0, 64.0, 16.0, 45.0], [0.0, 0.0, 32.0, 32.0, 0.0], [0.0, 0.0, 32.0, 32.0, 45.0], [0.0, 0.0, 16.0, 64.0, 0.0], [0.0, 0.0, 16.0, 64.0, 45.0], [0.0, 0.0, 128.0, 32.0, 0.0], [0.0, 0.0, 128.0, 32.0, 45.0], [0.0, 0.0, 64.0, 64.0, 0.0], [0.0, 0.0, 64.0, 64.0, 45.0], [0.0, 0.0, 32.0, 128.0, 0.0], [0.0, 0.0, 32.0, 128.0, 45.0], [4.0, 0.0, 64.0, 16.0, 0.0], [4.0, 0.0, 64.0, 16.0, 45.0], [4.0, 0.0, 32.0, 32.0, 0.0], [4.0, 0.0, 32.0, 32.0, 45.0], [4.0, 0.0, 16.0, 64.0, 0.0], [4.0, 0.0, 16.0, 64.0, 45.0], [4.0, 0.0, 128.0, 32.0, 0.0], [4.0, 0.0, 128.0, 32.0, 45.0], [4.0, 0.0, 64.0, 64.0, 0.0], [4.0, 0.0, 64.0, 64.0, 45.0], [4.0, 0.0, 32.0, 128.0, 0.0], [4.0, 0.0, 32.0, 128.0, 45.0]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_box2box_transform.py": {
        "torch": {
            "tensor_12": {
                "data": {
                    "value": "mean_box",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "[torch.rand(N, 4) * std_length, torch.rand(N, 1) * std_angle]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "mean_box",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_12": {
                "*size": {
                    "value": "N",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "device_22": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "allclose_30": {
                "input": {
                    "value": "dst_boxes",
                    "possible_values": [
                        [
                            "random_boxes([10, 10, 20, 20], 1, 10)",
                            "Call"
                        ],
                        [
                            "dst_boxes.to(device=device)",
                            "Call"
                        ],
                        [
                            "random_rotated_boxes([10, 10, 20, 20, -30], 5, 60.0, 10)",
                            "Call"
                        ],
                        [
                            "dst_boxes.to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dst_boxes_reconstructed",
                    "possible_values": [
                        [
                            "b2b_tfm.apply_deltas(deltas, src_boxes)",
                            "Call"
                        ],
                        [
                            "b2b_transform.apply_deltas(deltas, src_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_46": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "allclose_54": {
                "input": {
                    "value": "dst_boxes[:, :4]",
                    "possible_values": []
                },
                "other": {
                    "value": "dst_boxes_reconstructed[:, :4]",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "possible_values": []
                }
            },
            "allclose_56": {
                "input": {
                    "value": "(dst_boxes[:, 4] - dst_boxes_reconstructed[:, 4] + 180.0) % 360.0 - 180.0",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(dst_boxes[:, 4])",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "possible_values": []
                }
            },
            "device_24": {
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "device_48": {
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "zeros_like_58": {
                "input": {
                    "value": "dst_boxes[:, 4]",
                    "possible_values": []
                }
            },
            "rand_35": {
                "*size": {
                    "value": "N",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_boxes.py": {
        "torch": {
            "tensor_40": {
                "variable": {
                    "value": "box",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10, 10], [1, 1, 2, 3]]",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "box",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10, 10], [1, 1, 2, 3]]",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 1.0, 1.0]]",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.5, 1.0], [0.0, 0.0, 1.0, 0.5], [0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 1.0, 1.0], [0.5, 0.5, 1.5, 1.5]]",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]]",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "box",
                    "possible_values": []
                },
                "data": {
                    "value": "[[50, 50, 30, 20, 0], [50, 50, 30, 20, 90], [1, 1, math.sqrt(2), math.sqrt(2), -45]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ],
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "expected",
                    "possible_values": []
                },
                "data": {
                    "value": "[[35, 40, 65, 60], [40, 35, 60, 65], [0, 0, 2, 2]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ],
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "box",
                    "possible_values": []
                },
                "data": {
                    "value": "[[30, 40, 70, 60], [30, 40, 60, 70], [-1, -1, 2, 2]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ],
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "expected",
                    "possible_values": []
                },
                "data": {
                    "value": "[[65, 70, 70, 60, 0], [60, 75, 60, 70, 0], [0, 0, 2, 2, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ],
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_171": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou(Boxes(boxes1), Boxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_98": {
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "output.numpy()",
                            "Call"
                        ],
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "output.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self._convert_xywha_to_xyxy(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywha_to_xyxy(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywha_to_xyxy(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywh_to_xywha(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywh_to_xywha(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywh_to_xywha(box)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "possible_values": [
                        [
                            "np.asarray([[35, 40, 65, 60], [40, 35, 60, 65], [0, 0, 2, 2]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[35, 40, 65, 60], [40, 35, 60, 65], [0, 0, 2, 2]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "np.asarray([[65, 70, 70, 60, 0], [60, 75, 60, 70, 0], [0, 0, 2, 2, 0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[65, 70, 70, 60, 0], [60, 75, 60, 70, 0], [0, 0, 2, 2, 0]], dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-06",
                    "possible_values": []
                }
            },
            "allclose_129": {
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "output.numpy()",
                            "Call"
                        ],
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "output.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self._convert_xywha_to_xyxy(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywha_to_xyxy(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywha_to_xyxy(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywh_to_xywha(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywh_to_xywha(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywh_to_xywha(box)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "possible_values": [
                        [
                            "np.asarray([[35, 40, 65, 60], [40, 35, 60, 65], [0, 0, 2, 2]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[35, 40, 65, 60], [40, 35, 60, 65], [0, 0, 2, 2]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "np.asarray([[65, 70, 70, 60, 0], [60, 75, 60, 70, 0], [0, 0, 2, 2, 0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[65, 70, 70, 60, 0], [60, 75, 60, 70, 0], [0, 0, 2, 2, 0]], dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-06",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_checkpoint.py": {
        "torch": {
            "Module_16": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Module_17": {
                "variable": {
                    "value": "m.block1",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "m.block1.layer1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "m.layer2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Module_20": {
                "variable": {
                    "value": "m.res",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "m.res.layer2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "rand_24": {
                "variable": {
                    "value": "state_dict[layer1.weight]",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "rand_25": {
                "variable": {
                    "value": "state_dict[layer1.bias]",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "state_dict[layer2.weight]",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "rand_27": {
                "variable": {
                    "value": "state_dict[layer2.bias]",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "state_dict[res.layer2.weight]",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "state_dict[res.layer2.bias]",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "DataParallel_36": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_fast_rcnn.py": {
        "torch": {
            "rand_30": {
                "variable": {
                    "value": "feature_pooled",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "box_head_output_size",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "proposal_boxes",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.8, 1.1, 3.2, 2.8], [2.3, 2.5, 7, 8]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "gt_boxes",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 3, 3], [2, 2, 6, 6]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "result.gt_classes",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "rand_69": {
                "variable": {
                    "value": "feature_pooled",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "box_head_output_size",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "proposal_boxes",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 1.95, 2.4, 1.7, 0], [4.65, 5.25, 4.7, 5.5, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "gt_boxes",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 2, 2, 2, 0], [4, 4, 4, 4, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "result.gt_classes",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "132",
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "132",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "1.7951188087",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "4.0357131958",
                    "possible_values": []
                }
            },
            "allclose_54": {
                "input": {
                    "value": "losses[name]",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_losses[name]",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "1.7920907736",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "4.0410838127",
                    "possible_values": []
                }
            },
            "allclose_99": {
                "input": {
                    "value": "losses[name]",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_losses[name]",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_mask_ops.py": {
        "torch": {
            "meshgrid_46": {
                "variable": {
                    "value": "(gy, gx)",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(mask_y)",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.from_numpy(mask_x)",
                    "possible_values": []
                }
            },
            "stack_47": {
                "variable": {
                    "value": "ind",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gx, gy]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "full_image_bit_mask",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "full_image_bit_mask",
                    "possible_values": [
                        [
                            "torch.from_numpy(full_image_bit_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_50": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "full_image_bit_mask[None, None, :, :].to(dtype=torch.float32)",
                    "possible_values": []
                },
                "grid": {
                    "value": "ind[None, :, :, :]",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "rand_160": {
                "variable": {
                    "value": "masks",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "28",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "possible_values": []
                }
            },
            "clamp_163": {
                "variable": {
                    "value": "wh",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(N, 2) * 40 + 200",
                    "possible_values": []
                },
                "min": {
                    "value": "50",
                    "possible_values": []
                }
            },
            "clamp_164": {
                "variable": {
                    "value": "x0y0",
                    "possible_values": []
                },
                "input": {
                    "value": "center - wh * 0.5",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "clamp_165": {
                "variable": {
                    "value": "x1y1",
                    "possible_values": []
                },
                "input": {
                    "value": "center + wh * 0.5",
                    "possible_values": []
                },
                "max": {
                    "value": "S",
                    "possible_values": [
                        [
                            "800",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "torch_gt_bbox",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_bbox[None, :]",
                    "possible_values": []
                }
            },
            "manual_seed_159": {
                "seed": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "mask_x",
                    "possible_values": [
                        [
                            "np.arange(0.0, mask_size) + 0.5",
                            "BinOp"
                        ],
                        [
                            "mask_x / mask_size * (x1 - x0) + x0",
                            "BinOp"
                        ],
                        [
                            "(mask_x - 0.5) / (img_w - 1) * 2 + -1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_166": {
                "tensors": {
                    "value": "[x0y0, x1y1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_162": {
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "device_180": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "randn_163": {
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "synchronize_176": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_182": {
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "ndarray": {
                    "value": "gt_bit_mask[None, :, :]",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_model_analysis.py": {
        "torch": {
            "is_available_20": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_31": {
                "*size": {
                    "value": "3",
                    "possible_values": []
                },
                "out": {
                    "value": "800",
                    "possible_values": []
                },
                "dtype": {
                    "value": "800",
                    "possible_values": []
                }
            },
            "rand_47": {
                "*size": {
                    "value": "3",
                    "possible_values": []
                },
                "out": {
                    "value": "800",
                    "possible_values": []
                },
                "dtype": {
                    "value": "800",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_model_e2e.py": {
        "torch": {
            "tensor_36": {
                "variable": {
                    "value": "inst.gt_classes",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "inst.gt_classes",
                    "possible_values": []
                },
                "data": {
                    "value": "[3, 4, 5]",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_35": {
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "rand_37": {
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "h",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "rand_43": {
                "*size": {
                    "value": "3",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "*size": {
                    "value": "*shape",
                    "possible_values": []
                },
                "device": {
                    "value": "self.model.device",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "props[0].objectness_logits",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "props[0].objectness_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_46": {
                "*size": {
                    "value": "3",
                    "possible_values": []
                },
                "out": {
                    "value": "h",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "*shape",
                    "possible_values": []
                },
                "device": {
                    "value": "self.model.device",
                    "possible_values": []
                }
            },
            "rand_55": {
                "*size": {
                    "value": "3",
                    "possible_values": []
                },
                "out": {
                    "value": "s[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s[1]",
                    "possible_values": []
                }
            },
            "rand_62": {
                "*size": {
                    "value": "3",
                    "possible_values": []
                },
                "out": {
                    "value": "s[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s[1]",
                    "possible_values": []
                }
            },
            "isfinite_149": {
                "input": {
                    "value": "det[0].pred_boxes.tensor",
                    "possible_values": []
                }
            },
            "sum_149": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_nms_rotated.py": {
        "torch": {
            "rand_42": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "randint_50": {
                "variable": {
                    "value": "idxs",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(N,)",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "rotated_boxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "randint_74": {
                "variable": {
                    "value": "idxs",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(N,)",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "rotated_boxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "rotated_boxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "rotated_boxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "rotated_boxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "rotated_boxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "as_tensor_33": {
                "data": {
                    "value": "picked",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "rand_36": {
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "allclose_60": {
                "input": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "torch.rand(N, 4) * 100",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "backup",
                    "possible_values": [
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ],
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_63": {
                "input": {
                    "value": "rotated_boxes",
                    "possible_values": [
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "backup",
                    "possible_values": [
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ],
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_66": {
                "input": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "batched_nms_rotated(rotated_boxes, scores, idxs, iou)",
                            "Call"
                        ],
                        [
                            "batched_nms_rotated(rotated_boxes.cuda(), scores.cuda(), idxs, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "keep_ref",
                    "possible_values": [
                        [
                            "batched_nms(boxes, scores, idxs, iou)",
                            "Call"
                        ],
                        [
                            "batched_nms(boxes.cuda(), scores.cuda(), idxs, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_84": {
                "input": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "torch.rand(N, 4) * 100",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "backup",
                    "possible_values": [
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ],
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_87": {
                "input": {
                    "value": "rotated_boxes",
                    "possible_values": [
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "backup",
                    "possible_values": [
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ],
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_90": {
                "input": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "batched_nms_rotated(rotated_boxes, scores, idxs, iou)",
                            "Call"
                        ],
                        [
                            "batched_nms_rotated(rotated_boxes.cuda(), scores.cuda(), idxs, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "keep_ref",
                    "possible_values": [
                        [
                            "batched_nms(boxes, scores, idxs, iou)",
                            "Call"
                        ],
                        [
                            "batched_nms(boxes.cuda(), scores.cuda(), idxs, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "equal_104": {
                "input": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "batched_nms_rotated(rotated_boxes, scores, idxs, iou)",
                            "Call"
                        ],
                        [
                            "batched_nms_rotated(rotated_boxes.cuda(), scores.cuda(), idxs, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "keep_ref",
                    "possible_values": [
                        [
                            "batched_nms(boxes, scores, idxs, iou)",
                            "Call"
                        ],
                        [
                            "batched_nms(boxes.cuda(), scores.cuda(), idxs, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_118": {
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "equal_123": {
                "input": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "batched_nms_rotated(rotated_boxes, scores, idxs, iou)",
                            "Call"
                        ],
                        [
                            "batched_nms_rotated(rotated_boxes.cuda(), scores.cuda(), idxs, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "keep_ref",
                    "possible_values": [
                        [
                            "batched_nms(boxes, scores, idxs, iou)",
                            "Call"
                        ],
                        [
                            "batched_nms(boxes.cuda(), scores.cuda(), idxs, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_133": {
                "*size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "equal_138": {
                "input": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "batched_nms_rotated(rotated_boxes, scores, idxs, iou)",
                            "Call"
                        ],
                        [
                            "batched_nms_rotated(rotated_boxes.cuda(), scores.cuda(), idxs, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "keep_ref",
                    "possible_values": [
                        [
                            "batched_nms(boxes, scores, idxs, iou)",
                            "Call"
                        ],
                        [
                            "batched_nms(boxes.cuda(), scores.cuda(), idxs, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ],
                        [
                            "self.reference_horizontal_nms(boxes, scores, iou)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_155": {
                "input": {
                    "value": "r_cpu",
                    "possible_values": [
                        [
                            "nms_rotated(rotated_boxes, scores, iou)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "r_cuda.cpu()",
                    "possible_values": []
                }
            },
            "is_available_140": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_roi_align.py": {
        "torch": {
            "from_numpy_69": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img[None, None, :, :].astype('float32')",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(rois)[None, :].astype('float32')",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img[None, None, :, :].astype('float32')",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(rois)[None, :].astype('float32')",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "rand_123": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(boxes, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([batch_idx, boxes], axis=1)",
                            "Call"
                        ],
                        [
                            "boxes.cuda()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "batch_idx",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_idx",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_idx, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_idx, boxes]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_150": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_101": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "mean_box",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "synchronize_141": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_76": {
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self._simple_roialign(input, [1, 1, 3, 3], (4, 4), aligned=False)",
                            "Call"
                        ],
                        [
                            "self._simple_roialign(input, box, (5, 5), aligned=True)",
                            "Call"
                        ],
                        [
                            "op.forward(input, rois)",
                            "Call"
                        ],
                        [
                            "op.forward(input, rois)",
                            "Call"
                        ],
                        [
                            "op.forward(input, rois)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_cuda",
                    "possible_values": [
                        [
                            "op.forward(input.cuda(), rois.cuda()).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_102": {
                "type": {
                    "value": "dev",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "allclose_104": {
                "input": {
                    "value": "input.grad",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(input)",
                    "possible_values": []
                }
            },
            "rand_118": {
                "*size": {
                    "value": "N",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "zeros_like_104": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "torch.rand(N, C, H, W)",
                            "Call"
                        ],
                        [
                            "input.cuda()",
                            "Call"
                        ],
                        [
                            "np.arange(25).reshape(5, 5).astype('float32')",
                            "Call"
                        ],
                        [
                            "np.random.rand(H, W).astype('float32') * 100",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img[None, None, :, :].astype('float32'))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img[None, None, :, :].astype('float32'))",
                            "Call"
                        ],
                        [
                            "input.to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 3, 10, 10, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "*size": {
                    "value": "nboxes_per_img",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_roi_align_rotated.py": {
        "torch": {
            "from_numpy_81": {
                "variable": {
                    "value": "input2x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input2x",
                    "possible_values": [
                        [
                            "cv2.resize(input.numpy(), (W // 2, H // 2), interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input2x)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_103": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "device_109": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "rand_113": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "10",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 4.5, 4.5, 9, 9, 0], [0, 2, 7, 4, 4, 0], [0, 7, 7, 4, 4, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_135": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "rand_146": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "10",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "rois_rotated",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 4.5, 4.5, 9, 9, 0], [0, 2, 7, 4, 4, 0], [0, 7, 7, 4, 4, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 9, 9], [0, 0, 5, 4, 9], [0, 5, 5, 9, 9]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_33": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "start": {
                    "value": "25",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "input": {
                    "value": "5",
                    "possible_values": []
                },
                "shape": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "result_expected",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4.5, 5.0, 5.5, 6.0], [7.0, 7.5, 8.0, 8.5], [9.5, 10.0, 10.5, 11.0], [12.0, 12.5, 13.0, 13.5]]",
                    "possible_values": []
                }
            },
            "allclose_85": {
                "input": {
                    "value": "output2x",
                    "possible_values": [
                        [
                            "self._simple_roi_align_rotated(img=input2x, box=rotated_box2x, resolution=(5, 5))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self._simple_roi_align_rotated(img=input, box=rotated_box, resolution=(5, 5))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "gradcheck_124": {
                "func": {
                    "value": "func",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(x,)",
                    "possible_values": []
                }
            },
            "gradcheck_125": {
                "func": {
                    "value": "func",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(x.transpose(2, 3),)",
                    "possible_values": []
                }
            },
            "allclose_170": {
                "input": {
                    "value": "x.grad",
                    "possible_values": []
                },
                "other": {
                    "value": "x_rotated.grad",
                    "possible_values": []
                }
            },
            "allclose_71": {
                "input": {
                    "value": "result",
                    "possible_values": [
                        [
                            "self._simple_roi_align_rotated(img=img, box=rotated_box, resolution=(4, 4))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "result_expected",
                    "possible_values": [
                        [
                            "torch.tensor([[4.5, 5.0, 5.5, 6.0], [7.0, 7.5, 8.0, 8.5], [9.5, 10.0, 10.5, 11.0], [12.0, 12.5, 13.0, 13.5]])",
                            "Call"
                        ],
                        [
                            "self._rot90(result_expected, -i)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_75": {
                "*size": {
                    "value": "H",
                    "possible_values": []
                },
                "out": {
                    "value": "W",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "rois",
                    "possible_values": [
                        [
                            "[0] + list(box)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(rois, dtype=torch.float32)[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor([[0, 4.5, 4.5, 9, 9, 0], [0, 2, 7, 4, 4, 0], [0, 7, 7, 4, 4, 0]], dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 0, 0, 9, 9], [0, 0, 5, 4, 9], [0, 5, 5, 9, 9]], dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "allclose_99": {
                "input": {
                    "value": "result_cpu",
                    "possible_values": [
                        [
                            "op.forward(input, rois)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "result_cuda.cpu()",
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_roi_heads.py": {
        "torch": {
            "rand_27": {
                "variable": {
                    "value": "images_tensor",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_images",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "possible_values": []
                },
                "dtype": {
                    "value": "30",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "gt_boxes0",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 3, 3], [2, 2, 6, 6]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "gt_instance0.gt_classes",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 1]",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "gt_boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 5, 2, 8], [7, 3, 10, 5]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "gt_instance1.gt_classes",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "rand_72": {
                "variable": {
                    "value": "images_tensor",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_images",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "possible_values": []
                },
                "dtype": {
                    "value": "30",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "gt_boxes0",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 2, 2, 2, 30], [4, 4, 4, 4, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "gt_instance0.gt_classes",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 1]",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "gt_boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.5, 5.5, 1, 3, 0], [8.5, 4, 3, 2, -50]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "gt_instance1.gt_classes",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "121",
                    "possible_values": []
                }
            },
            "manual_seed_59": {
                "seed": {
                    "value": "121",
                    "possible_values": []
                }
            },
            "rand_31": {
                "*size": {
                    "value": "num_images",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_channels",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "4.4236516953",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "0.0091214813",
                    "possible_values": []
                }
            },
            "rand_76": {
                "*size": {
                    "value": "num_images",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_channels",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "4.381443977355957",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "0.0011560433777049184",
                    "possible_values": []
                }
            },
            "allclose_56": {
                "input": {
                    "value": "detector_losses[name]",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_losses[name]",
                    "possible_values": []
                }
            },
            "allclose_104": {
                "input": {
                    "value": "detector_losses[name]",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_losses[name]",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_roi_pooler.py": {
        "torch": {
            "rand_14": {
                "variable": {
                    "value": "coords",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "min_20": {
                "variable": {
                    "value": "boxes[:, 0]",
                    "possible_values": []
                },
                "input": {
                    "value": "coords[:, 0]",
                    "possible_values": []
                }
            },
            "min_21": {
                "variable": {
                    "value": "boxes[:, 1]",
                    "possible_values": []
                },
                "input": {
                    "value": "coords[:, 1]",
                    "possible_values": []
                }
            },
            "max_22": {
                "variable": {
                    "value": "boxes[:, 2]",
                    "possible_values": []
                },
                "input": {
                    "value": "coords[:, 0]",
                    "possible_values": []
                }
            },
            "max_23": {
                "variable": {
                    "value": "boxes[:, 3]",
                    "possible_values": []
                },
                "input": {
                    "value": "coords[:, 1]",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "rotated_boxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_rois",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "allclose_74": {
                "input": {
                    "value": "roialignv2_out",
                    "possible_values": [
                        [
                            "roialignv2_pooler(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "roialignrotated_out",
                    "possible_values": [
                        [
                            "roialignrotated_pooler(features, rois_rotated)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_37": {
                "*size": {
                    "value": "N",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_rotated_boxes.py": {
        "torch": {
            "stack_553": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 10, 0], dtype=torch.float32) for i in range(num_boxes1)]",
                    "possible_values": []
                }
            },
            "stack_559": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0], dtype=torch.float32) for i in range(num_boxes2)]",
                    "possible_values": []
                }
            },
            "rand_19": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "rand_20": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "rand_25": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "rand_33": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "rand_34": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.25, 0.5, 0.5, 1.0, 0.0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.25, 0.5, 0.5, 1.0, 0.0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0], [0.5, 0.5, 1.0, 1.0, 0.0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0], [0.25, 0.5, 0.5, 1.0, 0.0], [0.5, 0.25, 1.0, 0.5, 0.0], [0.25, 0.25, 0.5, 0.5, 0.0], [0.75, 0.75, 0.5, 0.5, 0.0], [1.0, 1.0, 1.0, 1.0, 0.0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0], [0.5, 0.5, 1.0, 1.0, 0.0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0], [0.25, 0.5, 0.5, 1.0, 0.0], [0.5, 0.25, 1.0, 0.5, 0.0], [0.25, 0.25, 0.5, 0.5, 0.0], [0.75, 0.75, 0.5, 0.5, 0.0], [1.0, 1.0, 1.0, 1.0, 0.0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, math.sqrt(2), math.sqrt(2), 45], [1, 1, 2 * math.sqrt(2), 2 * math.sqrt(2), -45]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 2, 2, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5], [0.5]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, math.sqrt(2), math.sqrt(2), 45], [1, 1, 2 * math.sqrt(2), 2 * math.sqrt(2), -45]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 2, 2, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5], [0.5]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10.0, 6, 55]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10.0, 6, -35]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10.0, 6, 55]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10.0, 6, -35]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[299.5, 417.370422, 600.0, 364.259186, 27.1828]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[299.5, 417.370422, 600.0, 364.259155, 27.1828]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[299.5, 417.370422, 600.0, 364.259186, 27.1828]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[299.5, 417.370422, 600.0, 364.259155, 27.1828]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[565, 565, 10, 10, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[565, 565, 10, 8.3, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[565, 565, 10, 10, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[565, 565, 10, 8.3, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "stack_200": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 10, 0], dtype=torch.float32) for i in range(num_boxes1)]",
                    "possible_values": []
                }
            },
            "stack_206": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0], dtype=torch.float32) for i in range(num_boxes2)]",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes1",
                    "possible_values": [
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_boxes2",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "stack_224": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 10, 0], dtype=torch.float32) for i in range(num_boxes1)]",
                    "possible_values": []
                }
            },
            "stack_230": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0], dtype=torch.float32) for i in range(num_boxes2)]",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes1",
                    "possible_values": [
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_boxes2",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "*size": {
                    "value": "s1",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "zeros_248": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "*size": {
                    "value": "s2",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "variable": {
                    "value": "boxes_5d",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "device_347": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "tensor_348": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0], [0.5, 0.5, 1.0, 1.0, 0.0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_353": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0], [0.25, 0.5, 0.5, 1.0, 0.0], [0.5, 0.25, 1.0, 0.5, 0.0], [0.25, 0.25, 0.5, 0.5, 0.0], [0.75, 0.75, 0.5, 0.5, 0.0], [1.0, 1.0, 1.0, 1.0, 0.0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_365": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_378": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "tensor_379": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0], [0.5, 0.5, 1.0, 1.0, 0.0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_384": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0], [0.25, 0.5, 0.5, 1.0, 0.0], [0.5, 0.25, 1.0, 0.5, 0.0], [0.25, 0.25, 0.5, 0.5, 0.0], [0.75, 0.75, 0.5, 0.5, 0.0], [1.0, 1.0, 1.0, 1.0, 0.0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_396": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_408": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "tensor_409": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, math.sqrt(2), math.sqrt(2), 45], [1, 1, 2 * math.sqrt(2), 2 * math.sqrt(2), -45]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_417": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 2, 2, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_418": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5], [0.5]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_424": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "tensor_425": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, math.sqrt(2), math.sqrt(2), 45], [1, 1, 2 * math.sqrt(2), 2 * math.sqrt(2), -45]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_433": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 2, 2, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_434": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5], [0.5]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_439": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "tensor_440": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10, 6, 55]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_441": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10, 6, -35]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_443": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_449": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "tensor_450": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10, 6, 55]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_451": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10, 6, -35]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_453": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_458": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "tensor_459": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[299.5, 417.370422, 600.0, 364.259186, 27.1828]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_464": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[299.5, 417.370422, 600.0, 364.259155, 27.1828]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_470": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_476": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "tensor_477": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[299.5, 417.370422, 600.0, 364.259186, 27.1828]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_482": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "data": {
                    "value": "[[299.5, 417.370422, 600.0, 364.259155, 27.1828]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_488": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_493": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "stack_496": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 10, 0], dtype=torch.float32, device=device) for i in range(num_boxes1)]",
                    "possible_values": []
                }
            },
            "stack_504": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0], dtype=torch.float32, device=device) for i in range(num_boxes2)]",
                    "possible_values": []
                }
            },
            "zeros_514": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes1",
                    "possible_values": [
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_boxes2",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_522": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "stack_525": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 10, 0], dtype=torch.float32, device=device) for i in range(num_boxes1)]",
                    "possible_values": []
                }
            },
            "stack_533": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0], dtype=torch.float32, device=device) for i in range(num_boxes2)]",
                    "possible_values": []
                }
            },
            "zeros_543": {
                "variable": {
                    "value": "expected_ious",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes1",
                    "possible_values": [
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_boxes2",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_582": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_122": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_178": {
                "input": {
                    "value": "ious_cuda.cpu()",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_257": {
                "variable": {
                    "value": "boxes_5d",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "zeros_263": {
                "variable": {
                    "value": "boxes_4d",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "zeros_315": {
                "variable": {
                    "value": "boxes_5d",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "allclose_23": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_29": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_37": {
                "input": {
                    "value": "ious_cuda.cpu()",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_43": {
                "input": {
                    "value": "ious_cuda.cpu()",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_50": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_58": {
                "input": {
                    "value": "ious_cuda.cpu()",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_83": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_109": {
                "input": {
                    "value": "ious_cuda.cpu()",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_136": {
                "input": {
                    "value": "ious_cuda.cpu()",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_144": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_153": {
                "input": {
                    "value": "ious_cuda.cpu()",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_146": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_165": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_167": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_186": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_195": {
                "input": {
                    "value": "ious_cuda.cpu()",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_188": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_218": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_242": {
                "input": {
                    "value": "ious_cuda.cpu()",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_220": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_244": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "all_302": {
                "input": {
                    "value": "areas_diff <= 0",
                    "possible_values": []
                }
            },
            "all_308": {
                "input": {
                    "value": "torch.abs(boxes_5d[:, 4][torch.where(areas_diff < 0)]) < clip_angle_threshold",
                    "possible_values": []
                }
            },
            "allclose_374": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_405": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_376": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_420": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_436": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_422": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_445": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_455": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_447": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_472": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_490": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_474": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "allclose_518": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_547": {
                "input": {
                    "value": "ious",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_520": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_555": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 10, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_561": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "device_581": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 10, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_208": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 10, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "allclose_275": {
                "input": {
                    "value": "areas_4d",
                    "possible_values": [
                        [
                            "test_boxes_4d.area()",
                            "Call"
                        ],
                        [
                            "test_boxes_4d.area()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "areas_5d",
                    "possible_values": [
                        [
                            "test_boxes_5d.area()",
                            "Call"
                        ],
                        [
                            "test_boxes_5d.area()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.1",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-05",
                    "possible_values": []
                }
            },
            "allclose_281": {
                "input": {
                    "value": "areas_4d",
                    "possible_values": [
                        [
                            "test_boxes_4d.area()",
                            "Call"
                        ],
                        [
                            "test_boxes_4d.area()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "areas_5d",
                    "possible_values": [
                        [
                            "test_boxes_5d.area()",
                            "Call"
                        ],
                        [
                            "test_boxes_5d.area()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.1",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-05",
                    "possible_values": []
                }
            },
            "all_324": {
                "input": {
                    "value": "normalized_boxes.tensor[:, 4] >= -180",
                    "possible_values": []
                }
            },
            "all_325": {
                "input": {
                    "value": "normalized_boxes.tensor[:, 4] < 180",
                    "possible_values": []
                }
            },
            "allclose_327": {
                "input": {
                    "value": "boxes_5d[:, :4]",
                    "possible_values": []
                },
                "other": {
                    "value": "normalized_boxes.tensor[:, :4]",
                    "possible_values": []
                }
            },
            "allclose_331": {
                "input": {
                    "value": "torch.cos(boxes_5d[:, 4] * math.pi / 180)",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.cos(normalized_boxes.tensor[:, 4] * math.pi / 180)",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "possible_values": []
                }
            },
            "allclose_339": {
                "input": {
                    "value": "torch.sin(boxes_5d[:, 4] * math.pi / 180)",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sin(normalized_boxes.tensor[:, 4] * math.pi / 180)",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "possible_values": []
                }
            },
            "tensor_498": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 10, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_506": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_527": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 10, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_535": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_576": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_583": {
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "abs_308": {
                "input": {
                    "value": "boxes_5d[:, 4][torch.where(areas_diff < 0)]",
                    "possible_values": []
                }
            },
            "cos_332": {
                "input": {
                    "value": "boxes_5d[:, 4] * math.pi / 180",
                    "possible_values": []
                }
            },
            "cos_333": {
                "input": {
                    "value": "normalized_boxes.tensor[:, 4] * math.pi / 180",
                    "possible_values": []
                }
            },
            "sin_340": {
                "input": {
                    "value": "boxes_5d[:, 4] * math.pi / 180",
                    "possible_values": []
                }
            },
            "sin_341": {
                "input": {
                    "value": "normalized_boxes.tensor[:, 4] * math.pi / 180",
                    "possible_values": []
                }
            },
            "where_308": {
                "condition": {
                    "value": "areas_diff < 0",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_rpn.py": {
        "torch": {
            "rand_25": {
                "variable": {
                    "value": "images_tensor",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_images",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "possible_values": []
                },
                "dtype": {
                    "value": "30",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "gt_boxes",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 3, 3], [2, 2, 6, 6]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "rand_89": {
                "variable": {
                    "value": "images_tensor",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_images",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "possible_values": []
                },
                "dtype": {
                    "value": "30",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "gt_boxes",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 2, 2, 2, 0], [4, 4, 4, 4, 0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "121",
                    "possible_values": []
                }
            },
            "manual_seed_77": {
                "seed": {
                    "value": "121",
                    "possible_values": []
                }
            },
            "set_printoptions_188": {
                "precision": {
                    "value": "8",
                    "possible_values": []
                },
                "sci_mode": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "rand_30": {
                "*size": {
                    "value": "num_images",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_channels",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "0.0804563984",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "0.0990132466",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "data": {
                    "value": "[0.1225359365, -0.0133192837]",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "[0.1415634006, 0.0989848152, 0.0565387346, -0.0072308783, -0.0428492837]",
                    "possible_values": []
                }
            },
            "rand_94": {
                "*size": {
                    "value": "num_images",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_channels",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "0.0432923734",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "0.1552739739",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "[0.10111768, 0.09112845, 0.08466332, 0.07589971, 0.06650183, 0.06350251, 0.04299347, 0.01864817, 0.00986163, 0.00078543, -0.0457363, -0.0479923]",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "[0.11373727, 0.09377633, 0.05281663, 0.05143715, 0.04040275, 0.03250912, 0.01307789, 0.01177734, 0.00038105, -0.00540255, -0.01194804, -0.01461012, -0.03061717, -0.03599222]",
                    "possible_values": []
                }
            },
            "allclose_44": {
                "input": {
                    "value": "proposal_losses[name]",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_losses[name]",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[[0, 0, 10, 10], [7.3365392685, 0, 10, 10]]",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "[[0, 0, 30, 20], [0, 0, 16.786277771, 13.1362524033], [0, 0, 30, 13.3173446655], [0, 0, 10.8602609634, 20], [7.7165775299, 0, 27.3875980377, 20]]",
                    "possible_values": []
                }
            },
            "allclose_72": {
                "input": {
                    "value": "proposal.proposal_boxes.tensor",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_proposal_box.tensor",
                    "possible_values": []
                }
            },
            "allclose_74": {
                "input": {
                    "value": "proposal.objectness_logits",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_objectness_logit",
                    "possible_values": []
                }
            },
            "allclose_108": {
                "input": {
                    "value": "proposal_losses[name]",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_losses[name]",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "[[0.60189795, 1.24095452, 61.98131943, 18.03621292, -4.07244873], [15.64940453, 1.69624567, 59.59749603, 16.34339333, 2.62692475], [-3.02982378, -2.69752932, 67.90952301, 59.6245575, 59.9701004], [16.71863365, 1.98309708, 35.61507797, 32.81484985, 62.92267227], [0.49432933, -7.92979717, 67.77606201, 62.9309845, -1.85656738], [8.00880814, 1.36017394, 121.81007385, 32.74150467, 50.44297409], [16.44299889, -4.82221127, 63.39775848, 61.22503662, 54.12270737], [5.0, 5.0, 10.0, 10.0, -0.7694397], [17.64130402, -0.98095351, 61.40377808, 16.28918839, 55.53118134], [0.13016054, 4.60568953, 35.80157471, 32.30180359, 62.52872086], [-4.26460743, 0.39604485, 124.30079651, 31.8461132, -1.58203125], [7.52815342, -0.91636634, 62.39784622, 15.45565224, 60.79549789]]",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "[[0.07734215, 0.81635046, 65.3351059, 17.34688377, -1.51821899], [-3.41833067, -3.11320257, 64.17595673, 60.55617905, 58.27033234], [20.67383385, -6.16561556, 63.60531998, 62.52315903, 54.85546494], [15.0, 10.0, 30.0, 20.0, -0.18218994], [9.22646523, -6.84775209, 62.09895706, 65.46472931, -2.74307251], [15.0, 4.93451595, 30.0, 9.86903191, -0.60272217], [8.88342094, 2.65560246, 120.95362854, 32.45022202, 55.75970078], [16.39088631, 2.33887148, 34.78761292, 35.6149292, 60.81977463], [9.78298569, 10.0, 19.56597137, 20.0, -0.86660767], [1.2857666, 5.49873352, 34.93610382, 33.22600174, 60.51599884], [17.58912468, -1.63270092, 62.96052551, 16.45713997, 52.9124527], [5.64749718, -1.9042846, 62.37649155, 16.19474792, 61.09543991], [0.82255805, 2.34931135, 118.83985901, 32.83671188, 56.50753784], [-5.33874989, 1.64404404, 125.28501892, 33.35424042, -2.80731201]]",
                    "possible_values": []
                }
            },
            "allclose_203": {
                "input": {
                    "value": "proposal.proposal_boxes.tensor",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_proposal_box.tensor",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "possible_values": []
                }
            },
            "allclose_213": {
                "input": {
                    "value": "proposal.objectness_logits",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_objectness_logit",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sampler.py": {
        "torch": {
            "SequentialSampler_10": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "list(range(100))",
                    "possible_values": []
                }
            },
            "SequentialSampler_18": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "list(range(100))",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_visualizer.py": {
        "torch": {
            "randint_90": {
                "variable": {
                    "value": "inst.pred_classes",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "80",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_inst,)",
                    "possible_values": []
                }
            },
            "rand_91": {
                "variable": {
                    "value": "inst.scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_inst",
                    "possible_values": [
                        [
                            "len(boxes)",
                            "Call"
                        ],
                        [
                            "len(boxes)",
                            "Call"
                        ],
                        [
                            "len(boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "inst.pred_boxes",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "np.concatenate((boxxy, boxxy + H // 2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "inst.pred_masks",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(masks)",
                    "possible_values": []
                }
            },
            "randint_102": {
                "variable": {
                    "value": "inst.pred_classes",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "80",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_inst,)",
                    "possible_values": []
                }
            },
            "rand_103": {
                "variable": {
                    "value": "inst.scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_inst",
                    "possible_values": [
                        [
                            "len(boxes)",
                            "Call"
                        ],
                        [
                            "len(boxes)",
                            "Call"
                        ],
                        [
                            "len(boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "inst.pred_boxes",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "np.concatenate((boxxy, boxxy + H // 2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "inst.pred_masks",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros_like(np.asarray(masks))",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "boxes_5d",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "randint_137": {
                "variable": {
                    "value": "inst.pred_classes",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "80",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_inst,)",
                    "possible_values": []
                }
            },
            "rand_138": {
                "variable": {
                    "value": "inst.scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_inst",
                    "possible_values": [
                        [
                            "len(boxes)",
                            "Call"
                        ],
                        [
                            "len(boxes)",
                            "Call"
                        ],
                        [
                            "len(boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "inst.pred_boxes",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "np.concatenate((boxxy, boxxy + H // 2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "inst.pred_masks",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(masks)",
                    "possible_values": []
                }
            }
        }
    },
    "tools/benchmark.py": {
        "torch": {
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_89": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[comm.get_local_rank()]",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "tools/plain_train_net.py": {
        "torch": {
            "DistributedDataParallel_212": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[comm.get_local_rank()]",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "device_count_86": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "isfinite_157": {
                "input": {
                    "value": "losses",
                    "possible_values": [
                        [
                            "sum(loss_dict.values())",
                            "Call"
                        ]
                    ]
                }
            },
            "all_157": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_net.py": {
        "torch": {
            "device_count_78": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}