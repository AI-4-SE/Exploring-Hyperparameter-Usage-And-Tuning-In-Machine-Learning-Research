{
    "open_intent_detection/methods/ADB/manager.py": {
        "sklearn": {
            "confusion_matrix_258": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', pre_train=True)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', pre_train=True)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_261": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', pre_train=True)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', pre_train=True)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_88": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', pre_train=True)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', pre_train=True)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_160": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', pre_train=True)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', pre_train=True)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "softplus_125": {
                "variable": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "criterion_boundary.delta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "criterion_boundary.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_boundary",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_205": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_206": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_208": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_209": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, data.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "variable": {
                    "value": "(probs, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_247": {
                "variable": {
                    "value": "(probs, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_248": {
                "variable": {
                    "value": "euc_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features - self.centroids[preds]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_290": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_305": {
                "data": {
                    "value": "self.class_count(total_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_305": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, label_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_features, pooled_output)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_234": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_292": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, label_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_grad_enabled_215": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_preds, preds)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_grad_enabled_74": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_142": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_detection/methods/DOC/manager.py": {
        "sklearn": {
            "confusion_matrix_110": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', mu_stds=mu_stds)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test', mu_stds=self.best_mu_stds)",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', mu_stds=mu_stds)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test', mu_stds=self.best_mu_stds)",
                            "Call"
                        ],
                        [
                            "self.classify_doc(data, args, y_prob, mu_stds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "accuracy_score_113": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', mu_stds=mu_stds)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test', mu_stds=self.best_mu_stds)",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', mu_stds=mu_stds)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test', mu_stds=self.best_mu_stds)",
                            "Call"
                        ],
                        [
                            "self.classify_doc(data, args, y_prob, mu_stds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "accuracy_score_74": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', mu_stds=mu_stds)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test', mu_stds=self.best_mu_stds)",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', mu_stds=mu_stds)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test', mu_stds=self.best_mu_stds)",
                            "Call"
                        ],
                        [
                            "self.classify_doc(data, args, y_prob, mu_stds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "empty_143": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_144": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, data.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_145": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, label_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_features, pooled_output)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_grad_enabled_151": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_56": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_detection/methods/DeepUnk/manager.py": {
        "sklearn": {
            "LocalOutlierFactor_111": {
                "variable": {
                    "value": "lof",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "args.n_neighbors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contamination": {
                    "value": "args.contamination",
                    "type": "Attribute",
                    "possible_values": []
                },
                "novelty": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "confusion_matrix_166": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', train_feats=train_feats)",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test', train_feats=self.best_feats)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', train_feats=train_feats)",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.classify_lof(args, data, y_pred, train_feats, feats)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test', train_feats=self.best_feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_169": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', train_feats=train_feats)",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test', train_feats=self.best_feats)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', train_feats=train_feats)",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.classify_lof(args, data, y_pred, train_feats, feats)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test', train_feats=self.best_feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_75": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', train_feats=train_feats)",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test', train_feats=self.best_feats)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval', train_feats=train_feats)",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.classify_lof(args, data, y_pred, train_feats, feats)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test', train_feats=self.best_feats)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "empty_129": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_130": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, data.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_131": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, label_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_features, pooled_output)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_grad_enabled_137": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_58": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_detection/methods/MSP/manager.py": {
        "sklearn": {
            "confusion_matrix_154": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_157": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_67": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "empty_110": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_111": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, data.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_112": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_132": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, label_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_features, pooled_output)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_grad_enabled_118": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_51": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_detection/methods/OpenMax/libMR/estimate_wscores.py": {
        "sklearn": {},
        "torch": {}
    },
    "open_intent_detection/methods/OpenMax/manager.py": {
        "sklearn": {
            "confusion_matrix_187": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.classify_openmax(args, data, len(y_true), y_probs, y_logit)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_190": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.classify_openmax(args, data, len(y_true), y_probs, y_logit)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_75": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, data, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.classify_openmax(args, data, len(y_true), y_probs, y_logit)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, data, mode='test')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "empty_120": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_121": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, data.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_122": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "data.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_149": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, label_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_features, pooled_output)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_grad_enabled_130": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "data": {
                    "value": "self.class_count(y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_164": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_60": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_detection/utils/frontend_analysis.py": {
        "sklearn": {
            "TSNE_107": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_detection/utils/utils.py": {
        "sklearn": {
            "TSNE_115": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_discovery/dataloaders/unsup_loader.py": {
        "sklearn": {
            "TfidfVectorizer_53": {
                "variable": {
                    "value": "vec_tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "max_features": {
                    "value": "args.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LabelEncoder_17": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_discovery/methods/semi_supervised/CDACPlus/manager.py": {
        "sklearn": {
            "KMeans_45": {
                "variable": {
                    "value": "km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "data.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "confusion_matrix_256": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, mode='test')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_50": {
                "variable": {
                    "value": "self.model.cluster_layer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "km.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_217": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_218": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_220": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_221": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "kl_div_178": {
                "variable": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.log()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.Tensor(p_target[step * args.train_batch_size:(step + 1) * args.train_batch_size]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, label_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_features, pooled_output)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_grad_enabled_228": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_discovery/methods/semi_supervised/DTC_BERT/manager.py": {
        "sklearn": {
            "KMeans_69": {
                "variable": {
                    "value": "km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "confusion_matrix_229": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, mode='test')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_72": {
                "variable": {
                    "value": "self.model.cluster_layer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "km.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_122": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_123": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_125": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_126": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ntrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(data.dataloader.train_unlabeled_examples)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "z_ema",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ntrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(data.dataloader.train_unlabeled_examples)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "variable": {
                    "value": "z_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ntrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(data.dataloader.train_unlabeled_examples)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_186": {
                "variable": {
                    "value": "z_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.get_outputs(args, mode='train', get_probs=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_89": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.log()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.Tensor(p_target[step * args.train_batch_size:(step + 1) * args.train_batch_size]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, label_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_features, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_probs, probs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "kl_div_176": {
                "variable": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.log()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor(self.p_target[step * args.train_batch_size:(step + 1) * args.train_batch_size]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_133": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "self.p_target[step * args.train_batch_size:(step + 1) * args.train_batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_discovery/methods/semi_supervised/DTC_BERT/pretrain.py": {
        "sklearn": {
            "accuracy_score_63": {
                "variable": {
                    "value": "eval_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "eval_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, mode='eval')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "eval_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, mode='eval')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "empty_99": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_100": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_102": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_103": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, label_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_features, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_grad_enabled_109": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_47": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_discovery/methods/semi_supervised/DeepAligned/manager.py": {
        "sklearn": {
            "KMeans_130": {
                "variable": {
                    "value": "km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "confusion_matrix_135": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, mode='test', model=self.model)",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "km.labels_",
                            "Attribute"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "km.labels_",
                            "Attribute"
                        ]
                    ]
                }
            },
            "KMeans_199": {
                "variable": {
                    "value": "km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "data.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KMeans_74": {
                "variable": {
                    "value": "km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "silhouette_score_75": {
                "variable": {
                    "value": "eval_score",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, mode='train', model=self.model, get_feats=True)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, mode='test', model=self.model, get_feats=True)",
                            "Call"
                        ],
                        [
                            "total_features.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, mode='train', model=self.pretrained_model, get_feats=True)",
                            "Call"
                        ],
                        [
                            "feats.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "empty_162": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_163": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_165": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_166": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, self.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "variable": {
                    "value": "pseudo_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pseudo_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alignment(km, args)",
                            "Call"
                        ],
                        [
                            "km.labels_",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(pseudo_labels, dtype=torch.long).to(self.device)",
                            "Call"
                        ],
                        [
                            "np.array([pseudo2label[label] for label in km.labels_])",
                            "Call"
                        ],
                        [
                            "pseudo_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_257": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "self.train_input_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_258": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(self.train_input_ids, self.train_input_mask, self.train_segment_ids, pseudo_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_259": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(self.train_input_ids, self.train_input_mask, self.train_segment_ids, pseudo_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_184": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "variable": {
                    "value": "new_centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "new_centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "km.cluster_centers_",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(new_centroids).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_238": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "km.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, label_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_features, pooled_output)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_grad_enabled_172": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_discovery/methods/semi_supervised/DeepAligned/pretrain.py": {
        "sklearn": {
            "accuracy_score_63": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "empty_103": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_104": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_106": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_107": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_125": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, label_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_features, pooled_output)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_grad_enabled_113": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_48": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_discovery/methods/semi_supervised/KCL_BERT/manager.py": {
        "sklearn": {
            "confusion_matrix_170": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, mode='test')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "empty_120": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_121": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_122": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_123": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(input_ids, segment_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "model(input_ids, segment_ids, input_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_159": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_144": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, label_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_features, features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_grad_enabled_130": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_discovery/methods/semi_supervised/KCL_BERT/pretrain.py": {
        "sklearn": {
            "accuracy_score_82": {
                "y_true": {
                    "value": "eval_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, mode='eval')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "eval_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, mode='eval')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "empty_118": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_119": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_120": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, target)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_grad_enabled_128": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_discovery/methods/semi_supervised/MCL_BERT/manager.py": {
        "sklearn": {
            "confusion_matrix_136": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(args, mode='eval')",
                            "Call"
                        ],
                        [
                            "total_preds.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.get_outputs(args, mode='test')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "empty_99": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_100": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_101": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, args.feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_102": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, label_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "total_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "total_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_features, features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_grad_enabled_108": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_discovery/methods/unsupervised/AG/manager.py": {
        "sklearn": {
            "AgglomerativeClustering_22": {
                "variable": {
                    "value": "ag",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "confusion_matrix_28": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.test_y",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ag.fit_predict(self.emb_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_discovery/methods/unsupervised/DCN/manager.py": {
        "sklearn": {
            "KMeans_59": {
                "variable": {
                    "value": "km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_init": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "confusion_matrix_116": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.test_y",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "km.fit_predict(sae_emb_train)",
                            "Call"
                        ],
                        [
                            "q.argmax(1)",
                            "Call"
                        ],
                        [
                            "q.argmax(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_discovery/methods/unsupervised/DEC/manager.py": {
        "sklearn": {
            "KMeans_60": {
                "variable": {
                    "value": "km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_init": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "confusion_matrix_117": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.test_y",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "km.fit_predict(sae_emb_train)",
                            "Call"
                        ],
                        [
                            "q.argmax(1)",
                            "Call"
                        ],
                        [
                            "q.argmax(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_discovery/methods/unsupervised/KM/manager.py": {
        "sklearn": {
            "KMeans_22": {
                "variable": {
                    "value": "km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "confusion_matrix_29": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.test_y",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "km.predict(self.emb_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_discovery/methods/unsupervised/SAE/manager.py": {
        "sklearn": {
            "KMeans_45": {
                "variable": {
                    "value": "km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "confusion_matrix_52": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.test_y",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "km.predict(sae_emb_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_discovery/utils/frontend_analysis.py": {
        "sklearn": {
            "TSNE_205": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_discovery/utils/metrics.py": {
        "sklearn": {
            "adjusted_rand_score_21": {
                "labels_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalized_mutual_info_score_22": {
                "labels_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pipeline/utils/functions.py": {
        "sklearn": {
            "KMeans_140": {
                "variable": {
                    "value": "km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "open_k_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discovery_data['num_labels'] - discovery_data['n_known_cls']",
                            "BinOp"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "confusion_matrix_158": {
                "variable": {
                    "value": "known_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "known_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discovery_results['y_true'][test_known_ids]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "known_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discovery_results['y_pred'][test_known_ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "accuracy_score_164": {
                "variable": {
                    "value": "known_intent_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "known_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discovery_results['y_true'][test_known_ids]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "known_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discovery_results['y_pred'][test_known_ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "confusion_matrix_172": {
                "variable": {
                    "value": "open_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "open_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discovery_results['y_true'][test_open_ids]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "open_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discovery_results['y_pred'][test_open_ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normalized_mutual_info_score_178": {
                "variable": {
                    "value": "open_intent_nmi",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "open_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discovery_results['y_true'][test_open_ids]",
                            "Subscript"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "open_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discovery_results['y_pred'][test_open_ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "adjusted_rand_score_179": {
                "variable": {
                    "value": "open_intent_ari",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "open_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discovery_results['y_true'][test_open_ids]",
                            "Subscript"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "open_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discovery_results['y_pred'][test_open_ids]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_discovery/backbones/utils.py": {
        "tensorflow": {
            "ConfigProto_23": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_26": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_session_27": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "norm_6": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_7": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_discovery/dataloaders/base.py": {
        "tensorflow": {
            "set_seed_14": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_detection/backbones/base.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % int(args.gpu_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_detection/backbones/bert.py": {
        "torch": {
            "ReLU_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_56": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(config.hidden_size, args.num_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_detection/backbones/utils.py": {
        "torch": {
            "norm_4": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_5": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_detection/dataloaders/base.py": {
        "torch": {
            "manual_seed_14": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_detection/dataloaders/bert_loader.py": {
        "torch": {
            "tensor_76": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_83": {
                "variable": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1 for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_87": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(input_ids, input_mask, segment_ids, label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(input_ids, input_mask, segment_ids, label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(datatensor)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(datatensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(args.train_batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SequentialSampler_92": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(input_ids, input_mask, segment_ids, label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(input_ids, input_mask, segment_ids, label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(datatensor)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(datatensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(args.train_batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(input_ids, input_mask, segment_ids, label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(datatensor)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(datatensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(args.eval_batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(input_ids, input_mask, segment_ids, label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(datatensor)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(datatensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(args.test_batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_detection/losses/CosineFaceLoss.py": {
        "torch": {
            "zeros_like_22": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_theta",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_24": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(cos_theta, dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "phi_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_theta - self.m",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_26": {
                "input": {
                    "value": "self.s * output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_detection/losses/__init__.py": {
        "torch": {
            "CrossEntropyLoss_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_detection/methods/ADB/boundary.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_labels).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_19": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_24": {
                "variable": {
                    "value": "euc_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_14": {
                "*size": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_detection/utils/functions.py": {
        "torch": {
            "save_22": {
                "obj": {
                    "value": "save_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_28": {
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_discovery/backbones/base.py": {
        "torch": {
            "device_47": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % int(args.gpu_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_discovery/backbones/bert.py": {
        "torch": {
            "ReLU_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.cluster_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(args.num_labels, args.num_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_124": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_130": {
                "variable": {
                    "value": "self.cluster_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(args.num_labels, args.num_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_161": {
                "variable": {
                    "value": "self.normalization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "config.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "feature_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat1, feat2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_194": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_234": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_236": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_237": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_211": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_253": {
                "variable": {
                    "value": "simi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "probs.transpose(0, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_77": {
                "variable": {
                    "value": "logits_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "variable": {
                    "value": "sim_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(logits, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "logits_norm.transpose(0, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_87": {
                "input": {
                    "value": "torch.clamp(sim_mat, eps, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_88": {
                "input": {
                    "value": "torch.clamp(1 - sim_mat, eps, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_102": {
                "input": {
                    "value": "torch.clamp(sim_mat, eps, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_103": {
                "input": {
                    "value": "torch.clamp(1 - sim_mat, eps, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "torch.pow(logits.unsqueeze(1) - self.cluster_layer, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_111": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + torch.sum(torch.pow(logits.unsqueeze(1) - self.cluster_layer, 2), 2) / self.alpha)",
                            "BinOp"
                        ],
                        [
                            "q.pow((self.alpha + 1.0) / 2.0)",
                            "Call"
                        ],
                        [
                            "(q.t() / torch.sum(q, 1)).t()",
                            "Call"
                        ],
                        [
                            "1.0 / (1.0 + torch.sum(torch.pow(logits.unsqueeze(1) - self.cluster_layer, 2), 2) / self.alpha)",
                            "BinOp"
                        ],
                        [
                            "q.pow((self.alpha + 1.0) / 2.0)",
                            "Call"
                        ],
                        [
                            "(q.t() / torch.sum(q, 1)).t()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_148": {
                "input": {
                    "value": "torch.pow(logits.unsqueeze(1) - self.cluster_layer, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_150": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + torch.sum(torch.pow(logits.unsqueeze(1) - self.cluster_layer, 2), 2) / self.alpha)",
                            "BinOp"
                        ],
                        [
                            "q.pow((self.alpha + 1.0) / 2.0)",
                            "Call"
                        ],
                        [
                            "(q.t() / torch.sum(q, 1)).t()",
                            "Call"
                        ],
                        [
                            "1.0 / (1.0 + torch.sum(torch.pow(logits.unsqueeze(1) - self.cluster_layer, 2), 2) / self.alpha)",
                            "BinOp"
                        ],
                        [
                            "q.pow((self.alpha + 1.0) / 2.0)",
                            "Call"
                        ],
                        [
                            "(q.t() / torch.sum(q, 1)).t()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_87": {
                "input": {
                    "value": "sim_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(logits_norm, logits_norm.transpose(0, -1))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "float"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_88": {
                "input": {
                    "value": "1 - sim_mat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "float"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_102": {
                "input": {
                    "value": "sim_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(logits_norm, logits_norm.transpose(0, -1))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "float"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_103": {
                "input": {
                    "value": "1 - sim_mat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "float"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_109": {
                "input": {
                    "value": "logits.unsqueeze(1) - self.cluster_layer",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_148": {
                "input": {
                    "value": "logits.unsqueeze(1) - self.cluster_layer",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_discovery/dataloaders/bert_loader.py": {
        "torch": {
            "tensor_81": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_90": {
                "variable": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "labeled_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in labeled_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "labeled_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in labeled_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "labeled_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in labeled_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "labeled_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in labeled_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "unlabeled_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in unlabeled_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "unlabeled_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in unlabeled_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "unlabeled_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in unlabeled_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "unlabeled_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1 for f in unlabeled_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "semi_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labeled_input_ids, unlabeled_input_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "semi_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labeled_input_mask, unlabeled_input_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "semi_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labeled_segment_ids, unlabeled_segment_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "semi_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labeled_label_ids, unlabeled_label_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorDataset_131": {
                "variable": {
                    "value": "semi_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "semi_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_132": {
                "variable": {
                    "value": "semi_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "semi_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(semi_input_ids, semi_input_mask, semi_segment_ids, semi_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "semi_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "semi_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(semi_input_ids, semi_input_mask, semi_segment_ids, semi_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "semi_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(semi_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1 for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_93": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(input_ids, input_mask, segment_ids, label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(input_ids, input_mask, segment_ids, label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(datatensor)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(datatensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_97": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(input_ids, input_mask, segment_ids, label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(input_ids, input_mask, segment_ids, label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(datatensor)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(datatensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(input_ids, input_mask, segment_ids, label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(datatensor)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(datatensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(input_ids, input_mask, segment_ids, label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(datatensor)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(datatensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_discovery/losses/KCL.py": {
        "torch": {
            "HingeEmbeddingLoss_26": {
                "variable": {
                    "value": "self.hingeloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "open_intent_discovery/losses/MCL.py": {
        "torch": {}
    },
    "open_intent_discovery/losses/__init__.py": {
        "torch": {
            "CrossEntropyLoss_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "open_intent_discovery/utils/functions.py": {
        "torch": {
            "save_22": {
                "obj": {
                    "value": "save_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_28": {
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}