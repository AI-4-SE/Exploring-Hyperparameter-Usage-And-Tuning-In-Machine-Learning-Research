{
    "GraphReshape/utils.py": {
        "sklearn": {
            "train_test_split_121": {
                "variable": {
                    "value": "(idx_train_and_val, idx_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "train_size": {
                    "value": "train_size + val_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "stratify",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stratify[idx_train_and_val]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_128": {
                "variable": {
                    "value": "(idx_train, idx_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx_train_and_val",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "train_size": {
                    "value": "train_size / (train_size + val_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "test_size": {
                    "value": "val_size / (train_size + val_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stratify": {
                    "value": "stratify",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stratify[idx_train_and_val]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TSNE_201": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_13": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_15": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_191": {
                "variable": {
                    "value": "args_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_142": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_143": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_188": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loader.get('labels')",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(_Z_obs)",
                            "Call"
                        ],
                        [
                            "torch.max(labels, dim=1)[1]",
                            "Subscript"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "GraphReshape/models.py": {
        "torch": {
            "is_available_6": {
                "variable": {
                    "value": "args_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dim",
                            "Method Argument"
                        ],
                        [
                            "x_dim",
                            "Method Argument"
                        ],
                        [
                            "x_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.h2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "y_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_32": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h1(torch.spmm(adj, x))",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.h1(torch.spmm(adj, x))",
                            "Call"
                        ],
                        [
                            "self.h1(x)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.softmax(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dim",
                            "Method Argument"
                        ],
                        [
                            "x_dim",
                            "Method Argument"
                        ],
                        [
                            "x_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_46": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h1(torch.spmm(adj, x))",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.h1(torch.spmm(adj, x))",
                            "Call"
                        ],
                        [
                            "self.h1(x)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.softmax(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_28": {
                "variable": {
                    "value": "degree_mat_inv_sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rowsum.pow(-0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_24": {
                "n": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_26": {
                "n": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "GraphReshape/train.py": {
        "torch": {
            "is_available_11": {
                "variable": {
                    "value": "args_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_118": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5e-06",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cosine_similarity_130": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "h_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(features, adj)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "h_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(features, adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_32": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x, adj)[0][num_train]",
                            "Subscript"
                        ],
                        [
                            "y_pred.view(-1, labels.max() + 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[num_train]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_entropy_165": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "GCN_model(features, adj)[0][normal_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[normal_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_74": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(torch.cosine_similarity(p_node, p_graph)).mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_76": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(torch.cosine_similarity(p_node, p_graph)).mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_74": {
                "input": {
                    "value": "torch.cosine_similarity(p_node, p_graph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_76": {
                "input": {
                    "value": "torch.cosine_similarity(p_node, p_graph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_76": {},
            "max_82": {
                "input": {
                    "value": "torch.abs(torch.cosine_similarity(p_node[idx], p_graph)).mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_84": {
                "input": {
                    "value": "torch.abs(torch.cosine_similarity(p_node[idx], p_graph)).mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_82": {
                "input": {
                    "value": "torch.cosine_similarity(p_node[idx], p_graph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_82": {},
            "abs_84": {
                "input": {
                    "value": "torch.cosine_similarity(p_node[idx], p_graph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_84": {},
            "cosine_similarity_74": {
                "x1": {
                    "value": "p_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x, adj)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "p_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x, adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_76": {
                "x1": {
                    "value": "p_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x, adj)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "p_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x, adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_82": {
                "x1": {
                    "value": "p_node[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "p_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x, adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_84": {
                "x1": {
                    "value": "p_node[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "p_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x, adj)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}