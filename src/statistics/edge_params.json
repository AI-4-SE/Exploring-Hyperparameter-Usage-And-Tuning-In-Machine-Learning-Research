{
    "edge/model/inference/inference.py": {
        "sklearn": {
            "KDTree_560": {
                "variable": {
                    "value": "kdtree",
                    "possible_values": []
                },
                "X": {
                    "value": "self.train_x.cpu().numpy()",
                    "possible_values": []
                },
                "leaf_size": {
                    "value": "40",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "empty_213": {
                "variable": {
                    "value": "empty_x",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, self.train_x.shape[1])",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "empty_214": {
                "variable": {
                    "value": "empty_y",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs_shape",
                    "possible_values": [
                        [
                            "(0,) if len(self.train_y.shape) == 1 else (0, self.train_y.shape[1])",
                            "IfExp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "load_292": {
                "variable": {
                    "value": "save_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "possible_values": [
                        [
                            "str(load_path)",
                            "Call"
                        ],
                        [
                            "str(load_path)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "cat_385": {
                "variable": {
                    "value": "self.train_x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.train_x, atleast_2d(append_x))",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_386": {
                "variable": {
                    "value": "self.train_y",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.train_y, append_y)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "load_412": {
                "variable": {
                    "value": "save_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "possible_values": [
                        [
                            "str(load_path)",
                            "Call"
                        ],
                        [
                            "str(load_path)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "ones_501": {
                "variable": {
                    "value": "self.forgettable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.train_x.shape[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "ones_534": {
                "variable": {
                    "value": "keeping_filter",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.train_x.shape[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "cat_539": {
                "variable": {
                    "value": "self.train_x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_x_without_neighbors, append_x)",
                    "possible_values": []
                }
            },
            "cat_542": {
                "variable": {
                    "value": "self.train_y",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_y_without_neighbors, append_y)",
                    "possible_values": []
                }
            },
            "cat_554": {
                "variable": {
                    "value": "self.forgettable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(forgettable_without_neighbors, forgettable)",
                    "possible_values": []
                }
            },
            "logical_or_612": {
                "variable": {
                    "value": "append_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "append_mask",
                    "possible_values": [
                        [
                            "ensure_tensor([(i + self.__append_attempts + 1) % self.append_every == 0 for i in range(append_x.shape[0])], dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "torch.logical_or(append_mask, unskippable)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "unskippable",
                    "possible_values": [
                        [
                            "kwargs.pop('unskippable', None)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(append_y, dtype=bool, device=device)",
                            "Call"
                        ],
                        [
                            "ensure_tensor(unskippable, torch.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_271": {
                "obj": {
                    "value": "save_dict",
                    "possible_values": [
                        [
                            "{'state_dict': self.state_dict(), 'structure_dict': self.structure_dict, 'classname': type(self).__name__}",
                            "Dict"
                        ],
                        [
                            "torch.load(load_path, map_location=device)",
                            "Call"
                        ],
                        [
                            "torch.load(load_path, map_location=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "str(save_path)",
                            "Call"
                        ],
                        [
                            "save_path + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_388": {
                "variable": {
                    "value": "self.is_terminal",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.is_terminal, self._get_is_terminal(kwargs, append_y.shape[0]))",
                    "possible_values": []
                }
            },
            "save_407": {
                "obj": {
                    "value": "self.state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "str(save_path)",
                            "Call"
                        ],
                        [
                            "save_path + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_507": {
                "variable": {
                    "value": "forgettable",
                    "possible_values": []
                },
                "*size": {
                    "value": "append_x.shape[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "tensor_510": {
                "variable": {
                    "value": "forgettable",
                    "possible_values": []
                },
                "data": {
                    "value": "forgettable",
                    "possible_values": [
                        [
                            "kwargs.get('forgettable')",
                            "Call"
                        ],
                        [
                            "torch.ones(append_x.shape[0], dtype=bool, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(forgettable, dtype=bool, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "ones_513": {
                "variable": {
                    "value": "make_forget",
                    "possible_values": []
                },
                "*size": {
                    "value": "append_x.shape[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "tensor_516": {
                "variable": {
                    "value": "make_forget",
                    "possible_values": []
                },
                "data": {
                    "value": "make_forget",
                    "possible_values": [
                        [
                            "kwargs.get('make_forget')",
                            "Call"
                        ],
                        [
                            "torch.ones(append_x.shape[0], dtype=bool, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(make_forget, dtype=bool, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "cat_527": {
                "variable": {
                    "value": "indices_to_forget",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lists_indices_to_forget",
                    "possible_values": [
                        [
                            "self._kdtree.query_radius(append_x[make_forget].cpu().numpy(), r=self.radius)",
                            "Call"
                        ],
                        [
                            "[ensure_tensor(indices_to_forget, torch.long) for indices_to_forget in lists_indices_to_forget]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_549": {
                "variable": {
                    "value": "self.is_terminal",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(is_terminal_without_neighbors, append_is_terminal)",
                    "possible_values": []
                }
            },
            "zeros_like_604": {
                "variable": {
                    "value": "unskippable",
                    "possible_values": []
                },
                "input": {
                    "value": "append_y",
                    "possible_values": [
                        [
                            "append_y[append_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_617": {
                "data": {
                    "value": "arg",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            }
        }
    },
    "edge/model/inference/kernels/custom_kernels.py": {
        "torch": {
            "zeros_46": {
                "*size": {
                    "value": "total_dims",
                    "possible_values": [
                        [
                            "sum(n_dims)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            }
        }
    },
    "edge/model/inference/kernels/lazy/bidiagonal_lazy_tensor.py": {
        "torch": {
            "tensor_110": {
                "variable": {
                    "value": "pseudoinverse",
                    "possible_values": []
                },
                "data": {
                    "value": "pseudoinverse",
                    "possible_values": [
                        [
                            "upper_bidiagonal_pseudoinverse(self._off_diag, self.square)",
                            "Call"
                        ],
                        [
                            "torch.tensor(pseudoinverse, dtype=self.dtype, device=rhs.device)",
                            "Call"
                        ],
                        [
                            "pseudoinverse.transpose(-1, -2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "rhs.device",
                    "possible_values": []
                }
            },
            "ones_126": {
                "variable": {
                    "value": "diag_res",
                    "possible_values": []
                },
                "*size": {
                    "value": "*batch_lens",
                    "possible_values": []
                },
                "out": {
                    "value": "*target_shape",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "off_diag",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(n, 1, dtype=self.dtype, device=self.device), torch.diag(self._off_diag))",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "diag",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * p",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "diag_173": {
                "variable": {
                    "value": "diag",
                    "possible_values": []
                },
                "input": {
                    "value": "diag",
                    "possible_values": [
                        [
                            "torch.tensor([1] * p, dtype=self.dtype, device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.diag(diag)",
                            "Call"
                        ],
                        [
                            "torch.cat((diag, torch.zeros(n, 1, dtype=self.dtype, device=self.device)), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "zero_row",
                    "possible_values": []
                },
                "*size": {
                    "value": "*batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rhs.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "rhs.device",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "off_diag_res",
                    "possible_values": []
                },
                "tensors": {
                    "value": "to_cat",
                    "possible_values": [
                        [
                            "(off_diag_res, zero_row) if self.upper else (zero_row, off_diag_res)",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "diag",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(diag, torch.zeros(n, 1, dtype=self.dtype, device=self.device))",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "zero_row",
                    "possible_values": []
                },
                "*size": {
                    "value": "*batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rhs.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "rhs.device",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "diag_res",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rhs, zero_row)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "eq_140": {
                "input": {
                    "value": "row_index",
                    "possible_values": []
                },
                "other": {
                    "value": "col_index",
                    "possible_values": []
                }
            },
            "eq_143": {
                "input": {
                    "value": "row_index + sign",
                    "possible_values": []
                },
                "other": {
                    "value": "col_index",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "*size": {
                    "value": "n",
                    "possible_values": [
                        [
                            "self._off_diag.size(-1) + 1",
                            "BinOp"
                        ],
                        [
                            "self._off_diag.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "diag_166": {
                "input": {
                    "value": "self._off_diag",
                    "possible_values": []
                }
            },
            "zeros_176": {
                "*size": {
                    "value": "n",
                    "possible_values": [
                        [
                            "self._off_diag.size(-1) + 1",
                            "BinOp"
                        ],
                        [
                            "self._off_diag.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            }
        }
    },
    "edge/model/inference/kernels/value_structure_kernel.py": {
        "torch": {
            "tensor_18": {
                "variable": {
                    "value": "superdiag",
                    "possible_values": []
                },
                "data": {
                    "value": "[-discount_factor if not is_terminal[i] else 0 for i in range(tm1)]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            }
        }
    },
    "edge/model/inference/matern.py": {
        "torch": {
            "diag_75": {
                "input": {
                    "value": "ensure_tensor(covars)",
                    "possible_values": []
                }
            }
        }
    },
    "edge/model/inference/tensorwrap.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.tensor(x, device=device).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "default_device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_19": {
                "obj": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.tensor(x, device=device).type(dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "edge/utils/device.py": {
        "torch": {
            "is_available_3": {
                "variable": {
                    "value": "cuda_available",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_5": {
                "variable": {
                    "value": "cpu",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_6": {
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/on_policy_hovership/on_policy_hovership.py": {
        "torch": {
            "memory_summary_254": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_288": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_299": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "test/gp_test.py": {
        "torch": {
            "is_tensor_112": {
                "obj": {
                    "value": "gp.train_x",
                    "possible_values": []
                }
            },
            "is_tensor_113": {
                "obj": {
                    "value": "gp.train_y",
                    "possible_values": []
                }
            },
            "all_139": {
                "input": {
                    "value": "torch.eq(model.train_x, loaded.train_x)",
                    "possible_values": []
                }
            },
            "is_tensor_24": {
                "obj": {
                    "value": "a",
                    "possible_values": [
                        [
                            "args",
                            "Name"
                        ]
                    ]
                }
            },
            "is_tensor_26": {
                "obj": {
                    "value": "a",
                    "possible_values": [
                        [
                            "args",
                            "Name"
                        ]
                    ]
                }
            },
            "is_tensor_36": {
                "obj": {
                    "value": "y",
                    "possible_values": [
                        [
                            "np.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "np.arange(6)",
                            "Call"
                        ],
                        [
                            "np.sin(2 * np.pi * x) + np.random.randn(len(x)) * 0.2",
                            "BinOp"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "self._matern_52(x, lengthscale=lengthscale, outputscale=outputscale).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.cos(x * np.pi / period_length).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x @ x.T).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.sin(x).squeeze()",
                            "Call"
                        ],
                        [
                            "ensure_tensor(y)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-lin ** 2)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_41": {
                "obj": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.arange(18).reshape((6, 3))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 11)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 101).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.linspace(-1, 1, 501).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 4, 500).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 101).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100, dtype=np.float32).reshape((-1, 2))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100, dtype=np.float32).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 10).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "ensure_tensor(x)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100, dtype=np.float32).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100, dtype=np.float32).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100, dtype=np.float32).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "lin.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "x + x.T",
                            "BinOp"
                        ],
                        [
                            "np.linspace(0, 1, 9000, dtype=np.float32).reshape((-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_139": {
                "input": {
                    "value": "model.train_x",
                    "possible_values": []
                },
                "other": {
                    "value": "loaded.train_x",
                    "possible_values": []
                }
            },
            "is_tensor_57": {
                "obj": {
                    "value": "self",
                    "possible_values": []
                }
            },
            "is_tensor_63": {
                "obj": {
                    "value": "self",
                    "possible_values": []
                }
            },
            "is_tensor_64": {
                "obj": {
                    "value": "y",
                    "possible_values": [
                        [
                            "np.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "np.arange(6)",
                            "Call"
                        ],
                        [
                            "np.sin(2 * np.pi * x) + np.random.randn(len(x)) * 0.2",
                            "BinOp"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "self._matern_52(x, lengthscale=lengthscale, outputscale=outputscale).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.cos(x * np.pi / period_length).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x @ x.T).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.sin(x).squeeze()",
                            "Call"
                        ],
                        [
                            "ensure_tensor(y)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-lin ** 2)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_69": {
                "obj": {
                    "value": "self",
                    "possible_values": []
                }
            },
            "is_tensor_70": {
                "obj": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.arange(18).reshape((6, 3))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 11)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 101).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.linspace(-1, 1, 501).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 4, 500).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 101).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100, dtype=np.float32).reshape((-1, 2))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100, dtype=np.float32).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 10).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "ensure_tensor(x)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100, dtype=np.float32).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100, dtype=np.float32).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100, dtype=np.float32).reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "lin.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "x + x.T",
                            "BinOp"
                        ],
                        [
                            "np.linspace(0, 1, 9000, dtype=np.float32).reshape((-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_76": {
                "obj": {
                    "value": "y",
                    "possible_values": [
                        [
                            "np.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "np.arange(6)",
                            "Call"
                        ],
                        [
                            "np.sin(2 * np.pi * x) + np.random.randn(len(x)) * 0.2",
                            "BinOp"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "self._matern_52(x, lengthscale=lengthscale, outputscale=outputscale).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.cos(x * np.pi / period_length).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x @ x.T).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.sin(x).squeeze()",
                            "Call"
                        ],
                        [
                            "ensure_tensor(y)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.exp(-lin ** 2)",
                            "Call"
                        ],
                        [
                            "np.exp(-x ** 2).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_80": {
                "obj": {
                    "value": "self",
                    "possible_values": []
                }
            }
        }
    }
}