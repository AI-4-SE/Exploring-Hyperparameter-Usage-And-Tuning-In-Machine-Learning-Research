{
    "brat_multitask/modules/bert_modeling.py": {
        "tensorflow": {
            "list_variables_65": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_70": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_114": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_251": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_252": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_253": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_258": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_262": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_288": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_289": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_292": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_309": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_330": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_340": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_342": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_366": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_381": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_383": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_410": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_426": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_427": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_441": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_462": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_466": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_487": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_498": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_993": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_994": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_1058": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1059": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1128": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1129": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_1204": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_128": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_265": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_612": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, WEIGHTS_NAME)",
                            "Call"
                        ],
                        [
                            "os.path.join(serialization_dir, TF_WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_720": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_722": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_812": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_875": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_937": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1003": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1072": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1138": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1225": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_124": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_236": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_237": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_315": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_466": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_236": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_237": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_243": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "brat_multitask/dataset_readers/span_field.py": {
        "torch": {}
    },
    "brat_multitask/metrics/conll_coref_scores.py": {
        "torch": {}
    },
    "brat_multitask/metrics/precision_recall_f1.py": {
        "torch": {}
    },
    "brat_multitask/metrics/semeval_2010.py": {
        "torch": {}
    },
    "brat_multitask/models/brat_multitask.py": {
        "torch": {
            "log_softmax_1462": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "span_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "span_emb_li",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1169": {
                "variable": {
                    "value": "parent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_spans)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "span_pair_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1171": {
                "variable": {
                    "value": "child_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_spans)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "span_pair_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1330": {
                "variable": {
                    "value": "span_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[span_ind.unsqueeze(2).repeat(1, 1, num_spans), span_ind.unsqueeze(1).repeat(1, num_spans, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1332": {
                "variable": {
                    "value": "span_pair_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[span_ind_mask.unsqueeze(2).repeat(1, 1, num_spans), span_ind_mask.unsqueeze(1).repeat(1, num_spans, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1348": {
                "variable": {
                    "value": "new_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_spans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spans.size(1)",
                            "Call"
                        ],
                        [
                            "span_pairs.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "span_ind.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_1348": {
                "variable": {
                    "value": "new_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_1398": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_output['span_logits']",
                            "Subscript"
                        ],
                        [
                            "task_output['span_logits']",
                            "Subscript"
                        ],
                        [
                            "logits[:, :, :, major_label]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([logits, logits.new_zeros(batch_size, num_spans1, 1)], -1)",
                            "Call"
                        ],
                        [
                            "logits + mask.log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_1425": {
                "variable": {
                    "value": "max_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.eq(major_label).float() * mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat([label, no_label.unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "label.eq(major_label).float() * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_1470": {
                "variable": {
                    "value": "one_hot_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self._lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "lexical_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_87": {
                "variable": {
                    "value": "self._span_label_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab.get_vocab_size('{}_span_labels'.format(span_label_as_emb[0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "span_label_as_emb[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "text_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[text_emb, span_label_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_431": {
                "variable": {
                    "value": "task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_468": {
                "variable": {
                    "value": "t_span_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_span_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_label_proj(span_layer(t_span_emb))",
                            "Call"
                        ],
                        [
                            "self.prob_mask(t_span_logits, t_span_mask, value=-1e+20)",
                            "Call"
                        ],
                        [
                            "span_label_proj(span_layer(t_span_emb))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_754": {
                "variable": {
                    "value": "t_span_pair_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_span_pair_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_pair_label_proj(span_pair_layer(t_span_emb, t_span_pairs))",
                            "Call"
                        ],
                        [
                            "span_pair_label_proj(span_pair_layer(t_span_emb_for_pair, t_span_pairs_internal))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_1227": {
                "variable": {
                    "value": "span_pair_prob_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_pair_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_pair_prob * span_pair_prob_neg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_1242": {
                "variable": {
                    "value": "span_pair_single_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_spans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spans.size(1)",
                            "Call"
                        ],
                        [
                            "span_pairs.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "span_pairs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_1242": {
                "variable": {
                    "value": "span_pair_single_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1284": {
                "variable": {
                    "value": "left_mask_ext",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "left_mask_num_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(left_mask_num.max().item(), 1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "span_ind.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_1284": {
                "variable": {
                    "value": "left_mask_ext",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1288": {
                "variable": {
                    "value": "left_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_mask, left_mask_ext]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1292": {
                "variable": {
                    "value": "span_ind_child",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[span_ind, span_ind.new_zeros((batch_size, left_mask_num_max))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1294": {
                "variable": {
                    "value": "span_ind_child_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[span_ind_mask, span_ind_mask.new_zeros((batch_size, left_mask_num_max))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1303": {
                "variable": {
                    "value": "span_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[span_ind.unsqueeze(2).repeat(1, 1, left_mask_num_max), span_ind_child]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1319": {
                "variable": {
                    "value": "span_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_span_ind.unsqueeze(2).repeat(1, 1, num_spans), span_ind.unsqueeze(1).repeat(1, num_spans2, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1321": {
                "variable": {
                    "value": "span_pair_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_span_ind_mask.unsqueeze(2).repeat(1, 1, num_spans), span_ind_mask.unsqueeze(1).repeat(1, num_spans2, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1389": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits, logits.new_zeros(batch_size, num_spans1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1390": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, mask.new_ones(batch_size, num_spans1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1392": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label, no_label.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_421": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_449": {
                "variable": {
                    "value": "t_span_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_span_emb, task_emb.expand(t_span_emb.size(0), t_span_emb.size(1), -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1271": {
                "variable": {
                    "value": "end_boundary",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_spans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spans.size(1)",
                            "Call"
                        ],
                        [
                            "span_pairs.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "span_ind.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_1479": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.view(-1, 1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_690": {
                "variable": {
                    "value": "pred_ind_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_num_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_pred.max().item())",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "pred_ind.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_690": {
                "variable": {
                    "value": "pred_ind_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_1216": {
                "variable": {
                    "value": "direction_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_pair_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((span_pairs[:, :, 0] >= 0) & (span_pairs[:, :, 0] < span_len.unsqueeze(-1)) & (span_pairs[:, :, 1] < span_len.unsqueeze(-1))).float()",
                            "Call"
                        ],
                        [
                            "task_output['span_pair_mask'].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "span_pair_mask * direction_mask",
                            "BinOp"
                        ],
                        [
                            "span_pair_mask * span_pair_single_mask",
                            "BinOp"
                        ],
                        [
                            "torch.stack([start_span_ind_mask.unsqueeze(2).repeat(1, 1, num_spans), span_ind_mask.unsqueeze(1).repeat(1, num_spans2, 1)], -1)",
                            "Call"
                        ],
                        [
                            "span_pair_mask.view(-1, num_spans2 * num_spans, 2).all(-1).float()",
                            "Call"
                        ],
                        [
                            "torch.stack([span_ind_mask.unsqueeze(2).repeat(1, 1, num_spans), span_ind_mask.unsqueeze(1).repeat(1, num_spans, 1)], -1)",
                            "Call"
                        ],
                        [
                            "span_pair_mask.view(-1, num_spans * num_spans, 2).all(-1).float()",
                            "Call"
                        ],
                        [
                            "torch.stack([span_ind_mask.unsqueeze(2).repeat(1, 1, left_mask_num_max), span_ind_child_mask], -1) > 0",
                            "Compare"
                        ],
                        [
                            "span_pair_mask.view(-1, num_spans * left_mask_num_max, 2).all(-1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1305": {
                "tensors": {
                    "value": "[span_ind_mask.unsqueeze(2).repeat(1, 1, left_mask_num_max), span_ind_child_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_251": {
                "in_features": {
                    "value": "span_layer[task_name].get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "span_num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, '{}_span_num_classes'.format(task_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_263": {
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "add_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_span_top, add_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_524": {
                "variable": {
                    "value": "add_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_524": {
                "variable": {
                    "value": "add_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_528": {
                "variable": {
                    "value": "spans_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(spans.float() * span_mask.unsqueeze(-1)).long()",
                            "Call"
                        ],
                        [
                            "task_output['spans'].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "task_output['spans'].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "spans.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, max_t_span_top_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_536": {
                "variable": {
                    "value": "mid_emb_span",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ep_span_emb, mid_emb_span]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_539": {
                "variable": {
                    "value": "new_t_span_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(t_span_emb.size(0), t_span_emb.size(1) + max_t_span_top_len, t_span_emb.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_573": {
                "variable": {
                    "value": "t_span_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_span_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_label_proj(span_layer(t_span_emb))",
                            "Call"
                        ],
                        [
                            "self.prob_mask(t_span_logits, t_span_mask, value=-1e+20)",
                            "Call"
                        ],
                        [
                            "span_label_proj(span_layer(t_span_emb))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "in_features": {
                    "value": "attn_inp_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context_layer.get_output_dim()",
                            "Call"
                        ],
                        [
                            "text_field_embedder.get_output_dim()",
                            "Call"
                        ],
                        [
                            "attentive_dim_reduction",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "attentive_dim_reduction",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_791": {
                "variable": {
                    "value": "t_span_pair_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_span_pair_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_pair_label_proj(span_pair_layer(t_span_emb, t_span_pairs))",
                            "Call"
                        ],
                        [
                            "span_pair_label_proj(span_pair_layer(t_span_emb_for_pair, t_span_pairs_internal))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_448": {
                "data": {
                    "value": "task_ind",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_593": {
                "input": {
                    "value": "-uw",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_810": {
                "input": {
                    "value": "-uw",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_521": {
                "start": {
                    "value": "max_t_span_top_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_span_top_len.max().item()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "brat_multitask/modules/basic_text_field_embedder.py": {
        "torch": {}
    },
    "brat_multitask/modules/bert_token_embedder.py": {
        "torch": {
            "softmax_27": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([weight['{}.{}'.format(param_name, i)] for i in range(num_layers)])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_183": {
                "variable": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(all_encoder_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_168": {
                "variable": {
                    "value": "split_input_ids[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "split_input_ids[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, padding_amount]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "split_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(input_ids.split(self.max_pieces, dim=-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_174": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(split_input_ids, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_187": {
                "variable": {
                    "value": "unpacked_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(all_encoder_layers)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "unpacked_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unpacked_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(all_encoder_layers, batch_size, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(unpacked_embeddings, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "[weight['{}.{}'.format(param_name, i)] for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "brat_multitask/modules/constituency_parsing.py": {
        "torch": {
            "max_55": {
                "variable": {
                    "value": "(label_prob, label_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "brat_multitask/modules/head_self_attn_span.py": {
        "torch": {
            "ModuleList_15": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for layer in layers]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self._span_token_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "span_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_span_indices.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "span_head_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[span_head_emb, span_token_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_145": {
                "input": {
                    "value": "span_head_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_head_weights.topk(top_num_heads, -1)[1]",
                            "Subscript"
                        ],
                        [
                            "torch.sort(span_head_ind, -1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ConstantPad1d_170": {
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "brat_multitask/modules/high_order_layer.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.gate_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "span_pair_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_pair_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_pair_label_proj(span_pair_layer(span_repr, span_pair_ind.view(bs, -1, 2)))",
                            "Call"
                        ],
                        [
                            "span_pair_logits.view(bs, ns1, ns2, -1)",
                            "Call"
                        ],
                        [
                            "span_pair_logits[:, :, :, majorlabel]",
                            "Subscript"
                        ],
                        [
                            "span_pair_logits + span_pair_mask.log()",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.zeros_like(span_pair_logits[:, :, :1]), span_pair_logits], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "span_pair_prob_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bs, ns1, ns1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "span_repr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "span_repr_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_pair_prob_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((bs, ns1, ns1), device=span_repr.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "span_repr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_repr_sum * gate + span_repr * (1 - gate)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate_linear(torch.cat([span_repr, span_repr_sum], -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "span_pair_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(span_pair_logits[:, :, :1]), span_pair_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "[span_repr, span_repr_sum]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_51": {
                "input": {
                    "value": "span_pair_logits[:, :, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "brat_multitask/modules/scalar_mix.py": {
        "torch": {
            "Dropout_25": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ParameterList_34": {
                "variable": {
                    "value": "self.scalar_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[Parameter(torch.FloatTensor([initial_scalar_parameters[i]]), requires_grad=trainable) for i in range(mixture_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([parameter for parameter in self.scalar_parameters])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_66": {
                "variable": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(torch.cat([parameter for parameter in self.scalar_parameters]), dim=0)",
                            "Call"
                        ],
                        [
                            "self.dropout(normed_weights)",
                            "Call"
                        ],
                        [
                            "torch.split(normed_weights, split_size_or_sections=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "[parameter for parameter in self.scalar_parameters]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "data": {
                    "value": "torch.FloatTensor([initial_scalar_parameters[i]])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "tensor_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor * broadcast_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_60": {
                "input": {
                    "value": "((tensor_masked - mean) * broadcast_mask) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_61": {
                "input": {
                    "value": "variance + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_78": {
                "input": {
                    "value": "mask_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "brat_multitask/modules/span_pair_layer.py": {
        "torch": {
            "cat_64": {
                "variable": {
                    "value": "span_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[span1.unsqueeze(2).repeat(1, 1, num_span2, 1), span2.unsqueeze(1).repeat(1, num_span1, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "span_pair_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[span_pair_p_emb, span_pair_c_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "span_pair_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[span_pair_p_emb, span_pair_c_emb, span_pair_p_emb * span_pair_c_emb, distance_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "in_features": {
                    "value": "inp_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "label_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Bilinear_185": {
                "variable": {
                    "value": "self.bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "inp_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "inp_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "label_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "in_features": {
                    "value": "inp_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "label_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/ana.py": {
        "torch": {
            "load_51": {
                "variable": {
                    "value": "from_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "from_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_52": {
                "variable": {
                    "value": "to_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "to_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_62": {
                "obj": {
                    "value": "to_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(to_path, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}