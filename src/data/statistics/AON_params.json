{
    "data/create_tfrecord.py": {
        "tensorflow": {
            "TFRecordWriter_17": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "FLAGS.output_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_54": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "FLAGS.output_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Example_33": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={fields.TfExampleFields.image_encoded: dataset_util.bytes_feature(image_bin), fields.TfExampleFields.height: dataset_util.int64_feature(height), fields.TfExampleFields.width: dataset_util.int64_feature(width), fields.TfExampleFields.filename: dataset_util.bytes_feature(filename.encode()), fields.TfExampleFields.transcript: dataset_util.bytes_feature(groundtruth_text.encode())})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_67": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={fields.TfExampleFields.image_encoded: dataset_util.bytes_feature(image_bin), fields.TfExampleFields.height: dataset_util.int_feature(height), fields.TfExampleFields.width: dataset_util.int_feature(width), fields.TfExampleFields.transcript: dataset_util.bytes_feature(str(label).encode()), fields.TfExampleFields.filename: dataset_util.bytes_feature(str(i).encode())})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_33": {
                "feature": {
                    "value": "{fields.TfExampleFields.image_encoded: dataset_util.bytes_feature(image_bin), fields.TfExampleFields.height: dataset_util.int64_feature(height), fields.TfExampleFields.width: dataset_util.int64_feature(width), fields.TfExampleFields.filename: dataset_util.bytes_feature(filename.encode()), fields.TfExampleFields.transcript: dataset_util.bytes_feature(groundtruth_text.encode())}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_67": {
                "feature": {
                    "value": "{fields.TfExampleFields.image_encoded: dataset_util.bytes_feature(image_bin), fields.TfExampleFields.height: dataset_util.int_feature(height), fields.TfExampleFields.width: dataset_util.int_feature(width), fields.TfExampleFields.transcript: dataset_util.bytes_feature(str(label).encode()), fields.TfExampleFields.filename: dataset_util.bytes_feature(str(i).encode())}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset_util.py": {
        "tensorflow": {
            "Feature_22": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_26": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_30": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_34": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_38": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_54": {
                "name": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Int64List_22": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_26": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BytesList_30": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_34": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "FloatList_38": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "tensorflow": {
            "argmax_10": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model_aon.base_cnn(images)",
                            "Call"
                        ],
                        [
                            "model_aon._fc('classfier_fc', x, 10)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "images_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 100, 100, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "labels_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_23": {
                "variable": {
                    "value": "loss_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.sparse_softmax_cross_entropy(logits=logits_tensor, labels=labels_placeholder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_29": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_33": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_35": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_40": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_41": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_24": {
                "logits": {
                    "value": "logits_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_placeholder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[None], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OutOfRangeError_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "tensorflow": {
            "latest_checkpoint_61": {
                "variable": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.exp_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "import_meta_graph_64": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "meta_file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_path + '.meta'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_66": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_71": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_114": {
                "variable": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.exp_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "input_data.py": {
        "tensorflow": {
            "tf_record_iterator_10": {
                "variable": {
                    "value": "example_iter",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "filename",
                    "type": "Call",
                    "possible_values": [
                        [
                            "example.features.feature['image/filename'].bytes_list.value[0].decode()",
                            "Call"
                        ],
                        [
                            "tf.cast(example_features['image/filename'], tf.string)",
                            "Call"
                        ]
                    ]
                }
            },
            "string_input_producer_36": {
                "variable": {
                    "value": "filequeue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordReader_37": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_41": {
                "variable": {
                    "value": "example_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image/transcript': tf.FixedLenFeature([], dtype=tf.string), 'image/height': tf.FixedLenFeature([], dtype=tf.int64), 'image/width': tf.FixedLenFeature([], dtype=tf.int64), 'image/encoded': tf.FixedLenFeature([], dtype=tf.string), 'image/filename': tf.FixedLenFeature([], dtype=tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example_features['image/height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example_features['image/width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_54": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "example_features['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Image.open(buf)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(example_features['image/encoded'], channels=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [100, 100]) / 128.0 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_58": {
                "variable": {
                    "value": "groundtruth_text",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example_features['image/transcript']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_59": {
                "variable": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example_features['image/filename']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_batch_63": {
                "variable": {
                    "value": "(image_batch, groundtruth_text_batch, filename_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, groundtruth_text, filename]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_after_dequeue",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min_after_dequeue + 3 * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_83": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_84": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_86": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_87": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_13": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OutOfRangeError_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_44": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_45": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_46": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_47": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_48": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "label_map.py": {
        "tensorflow": {
            "group_105": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_109": {
                "variable": {
                    "value": "test_string_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['test', 'value', 'discombobulated', 'Chronographs', 'Chronographs']",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_111": {
                "variable": {
                    "value": "max_num_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label_length_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_112": {
                "variable": {
                    "value": "label_length_mask_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sequence_mask(label_length_tensor, max_num_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_115": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "HashTable_32": {
                "variable": {
                    "value": "char_to_label_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "key_dtype": {
                    "value": "tf.contrib.lookup.KeyValueTensorInitializer(chars, labels, key_dtype=tf.string, value_dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "default_value": {
                    "value": "self._unk_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "HashTable_37": {
                "variable": {
                    "value": "label_to_char_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "key_dtype": {
                    "value": "tf.contrib.lookup.KeyValueTensorInitializer(labels, chars, key_dtype=tf.int64, value_dtype=tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "string_split_59": {
                "variable": {
                    "value": "chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "source": {
                    "value": "text",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_join(chars, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "delimiter": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SparseTensor_61": {
                "variable": {
                    "value": "labels_sp",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "chars.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self._char_to_label_table.lookup(chars.values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "chars.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_join_98": {
                "variable": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "chars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._character_set",
                            "Attribute"
                        ],
                        [
                            "tf.string_split(text, delimiter='')",
                            "Call"
                        ],
                        [
                            "self._label_to_char_table.lookup(labels)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_reduce_sum_73": {
                "variable": {
                    "value": "text_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "tf.SparseTensor(chars.indices, tf.fill([tf.shape(chars.indices)[0]], 1), chars.dense_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_94": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(range(self._label_offset, self._label_offset + self.num_classes))",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(labels_sp, default_value=pad_value)",
                            "Call"
                        ],
                        [
                            "labels_sp",
                            "Name"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sequence_mask_112": {
                "lengths": {
                    "value": "label_length_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_num_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(label_length_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "KeyValueTensorInitializer_33": {
                "keys": {
                    "value": "chars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._character_set",
                            "Attribute"
                        ],
                        [
                            "tf.string_split(text, delimiter='')",
                            "Call"
                        ],
                        [
                            "self._label_to_char_table.lookup(labels)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(range(self._label_offset, self._label_offset + self.num_classes))",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(labels_sp, default_value=pad_value)",
                            "Call"
                        ],
                        [
                            "labels_sp",
                            "Name"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "key_dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value_dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KeyValueTensorInitializer_38": {
                "keys": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(range(self._label_offset, self._label_offset + self.num_classes))",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(labels_sp, default_value=pad_value)",
                            "Call"
                        ],
                        [
                            "labels_sp",
                            "Name"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "chars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._character_set",
                            "Attribute"
                        ],
                        [
                            "tf.string_split(text, delimiter='')",
                            "Call"
                        ],
                        [
                            "self._label_to_char_table.lookup(labels)",
                            "Call"
                        ]
                    ]
                },
                "key_dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value_dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "text",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_join(chars, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseTensor_74": {
                "indices": {
                    "value": "chars.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.fill([tf.shape(chars.indices)[0]], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "chars.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_76": {
                "dims": {
                    "value": "[tf.shape(chars.indices)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_76": {
                "input": {
                    "value": "chars.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_aon.py": {
        "tensorflow": {
            "shape_16": {
                "variable": {
                    "value": "dynamic_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'weights'",
                            "MethodArgument"
                        ],
                        [
                            "'biases'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "combined_static_and_dynamic_shape(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'weights'",
                            "MethodArgument"
                        ],
                        [
                            "'biases'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "combined_static_and_dynamic_shape(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdadeltaOptimizer_320": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_326": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_336": {
                "variable": {
                    "value": "groundtruth_text",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['this', 'company']",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_37": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "flat_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "flat_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, shape=shape, dtype=tf.float32, initializer=initializer, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "_weight(shape=[size, out_nodes])",
                            "Call"
                        ],
                        [
                            "_weight(shape=[kernel_size[0], kernel_size[1], in_channels, out_channels], trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "matmul",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, shape=shape, dtype=tf.float32, initializer=initializer, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "_bias(shape=[out_nodes])",
                            "Call"
                        ],
                        [
                            "_bias(shape=[out_channels], trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "bias_add",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_83": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "paddings",
                    "type": "List",
                    "possible_values": [
                        [
                            "[[0, 0], [p_h, p_h], [p_w, p_w], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [p_h, p_h], [p_w, p_w], [0, 0]]",
                            "List"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_84": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, shape=shape, dtype=tf.float32, initializer=initializer, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "_weight(shape=[size, out_nodes])",
                            "Call"
                        ],
                        [
                            "_weight(shape=[kernel_size[0], kernel_size[1], in_channels, out_channels], trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, strides[0], strides[1], 1]",
                            "List"
                        ],
                        [
                            "[1, strides[0], strides[1], 1]",
                            "List"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, shape=shape, dtype=tf.float32, initializer=initializer, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "_bias(shape=[out_nodes])",
                            "Call"
                        ],
                        [
                            "_bias(shape=[out_channels], trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "bias_add",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "paddings",
                    "type": "List",
                    "possible_values": [
                        [
                            "[[0, 0], [p_h, p_h], [p_w, p_w], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [p_h, p_h], [p_w, p_w], [0, 0]]",
                            "List"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool_99": {
                "variable": {
                    "value": "max_pool_",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, ksize[0], ksize[1], 1]",
                            "List"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, strides[0], strides[1], 1]",
                            "List"
                        ],
                        [
                            "[1, strides[0], strides[1], 1]",
                            "List"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "max_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_105": {
                "variable": {
                    "value": "fw_lstm_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTMCell_106": {
                "variable": {
                    "value": "bw_lstm_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_107": {
                "variable": {
                    "value": "((output_fw, output_bw), (output_state_fw, output_state_bw))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_lstm_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_lstm_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_110": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(output_fw, output_bw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "output_state_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(output_state_fw.c, output_state_bw.c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "output_state_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(output_state_fw.h, output_state_bw.h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_113": {
                "variable": {
                    "value": "output_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "c": {
                    "value": "output_state_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "h": {
                    "value": "output_state_bw",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reverse_172": {
                "variable": {
                    "value": "feature_seq_1_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feature_seq_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "aon_core_output_dict['feature_seq_1']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_176": {
                "variable": {
                    "value": "feature_seq_2_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feature_seq_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "aon_core_output_dict['feature_seq_2']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_209": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A + B + C + D",
                            "BinOp"
                        ],
                        [
                            "tf.tanh(res)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_247": {
                "variable": {
                    "value": "start_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(GO_TOKEN, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_248": {
                "variable": {
                    "value": "end_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(END_TOKEN, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_265": {
                "variable": {
                    "value": "max_num_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_input_lengths",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "text_lengths + 2",
                            "BinOp"
                        ],
                        [
                            "text_lengths + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_272": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sequence_mask(train_input_lengths, max_num_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_277": {
                "variable": {
                    "value": "train_probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax(train_logits, name='probabilities')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_122": {
                "name": {
                    "value": "BCNN",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 64, 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 512, 23]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 23, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, w, name='matmul')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input=x, filter=w, strides=strides, padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=x, out_channels=64)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=128)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=256)",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 2], paddings=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 64, 512])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_1', inputs=x, out_nodes=23)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 512, 23])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "_fc('fc_2', inputs=x, out_nodes=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 23, 4])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(x, axis=2, name='softmax')",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_1', inputs=inputs, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_1', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_2', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_2', inputs=x, strides=[2, 1], paddings=[0, 1])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_3', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_3', inputs=x, strides=[2, 1], paddings=[1, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_4', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_4', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "_conv(layer_name='conv_5', inputs=x, out_channels=512)",
                            "Call"
                        ],
                        [
                            "_max_pool(layer_name='max_pool_5', inputs=x, strides=[2, 1], paddings=[0, 0])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=1, name='squeeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "squeeze",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_169": {
                "name": {
                    "value": "AON_core",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_203": {
                "name": {
                    "value": "FG",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRUCell_223": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_242": {
                "name": {
                    "value": "attention_decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_257": {
                "variable": {
                    "value": "train_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[start_tokens, start_tokens, text_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_258": {
                "variable": {
                    "value": "train_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[start_tokens, text_labels, end_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_261": {
                "variable": {
                    "value": "train_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[start_tokens, text_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_262": {
                "variable": {
                    "value": "train_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[text_labels, end_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_288": {
                "name": {
                    "value": "train_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "train_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.seq2seq.sequence_loss(logits=train_outputs.rnn_output, targets=train_target, weights=weights, name='train_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "local_variables_initializer_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "placement_cluse",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "shared_stack_conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tile_204": {
                "input": {
                    "value": "tf.reshape(character_placement_cluse[:, :, 0], [-1, 23, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_205": {
                "input": {
                    "value": "tf.reshape(character_placement_cluse[:, :, 1], [-1, 23, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_206": {
                "input": {
                    "value": "tf.reshape(character_placement_cluse[:, :, 2], [-1, 23, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_207": {
                "input": {
                    "value": "tf.reshape(character_placement_cluse[:, :, 3], [-1, 23, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_247": {
                "value": {
                    "value": "GO_TOKEN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_248": {
                "value": {
                    "value": "END_TOKEN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_267": {
                "x": {
                    "value": "train_input_lengths",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "text_lengths + 2",
                            "BinOp"
                        ],
                        [
                            "text_lengths + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sequence_mask_272": {
                "lengths": {
                    "value": "train_input_lengths",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "text_lengths + 2",
                            "BinOp"
                        ],
                        [
                            "text_lengths + 1",
                            "BinOp"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_num_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(train_input_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_278": {
                "logits": {
                    "value": "train_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_outputs.rnn_output",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "probabilities",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rot90_174": {
                "image": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "tensor": {
                    "value": "character_placement_cluse[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 23, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "tensor": {
                    "value": "character_placement_cluse[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 23, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "tensor": {
                    "value": "character_placement_cluse[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 23, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "tensor": {
                    "value": "character_placement_cluse[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 23, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_292": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "GO_TOKEN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "sync_attention_wrapper.py": {
        "tensorflow": {
            "concat_64": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_attentions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "tensorflow": {
            "latest_checkpoint_21": {
                "variable": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.exp_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "import_meta_graph_24": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "meta_file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_path + '.meta'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_26": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_30": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "Variable_22": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_graph_44": {
                "variable": {
                    "value": "decoder_inputs_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_45": {
                "variable": {
                    "value": "decoder_targets_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_47": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_48": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_log_write_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.exp_dir, 'log/train')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_49": {
                "variable": {
                    "value": "summary_merge_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_54": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_62": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_63": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "image_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 100, 100, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "groundtruth_text_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_57": {
                "variable": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.exp_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_23": {
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_26": {
                "name": {
                    "value": "input_image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "image_placeholder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[None, 100, 100, 3], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "OutOfRangeError_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}