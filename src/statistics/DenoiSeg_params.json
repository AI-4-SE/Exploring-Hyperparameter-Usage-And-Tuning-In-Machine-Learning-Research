{
    "denoiseg/utils/misc_utils.py": {
        "sklearn": {
            "extract_patches_2d_25": {
                "variable": {
                    "value": "patchesimages",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "possible_values": []
                },
                "patch_size": {
                    "value": "(size, size)",
                    "possible_values": []
                },
                "max_patches": {
                    "value": "10",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "extract_patches_2d_26": {
                "variable": {
                    "value": "patchesmasks",
                    "possible_values": []
                },
                "image": {
                    "value": "masks",
                    "possible_values": []
                },
                "patch_size": {
                    "value": "(size, size)",
                    "possible_values": []
                },
                "max_patches": {
                    "value": "10",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "denoiseg/internals/DenoiSeg_DataWrapper.py": {
        "tensorflow": {
            "DenoiSeg_DataWrapper_5": {
                "base_class_0": {
                    "value": "tensorflow.keras.utils.Sequence",
                    "possible_values": []
                },
                "self.batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "self.shape": {
                    "value": "shape",
                    "possible_values": []
                },
                "self.value_manipulation": {
                    "value": "value_manipulation",
                    "possible_values": []
                }
            }
        }
    },
    "denoiseg/internals/losses.py": {
        "tensorflow": {
            "constant_14": {
                "variable": {
                    "value": "class_weights",
                    "possible_values": []
                },
                "value": {
                    "value": "[relative_weights]",
                    "possible_values": []
                }
            },
            "constant_50": {
                "variable": {
                    "value": "class_weights",
                    "possible_values": []
                },
                "value": {
                    "value": "[relative_weights]",
                    "possible_values": []
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "onehot_labels",
                    "possible_values": []
                },
                "tensor": {
                    "value": "class_targets",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3]",
                    "possible_values": []
                }
            },
            "reduce_sum_18": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "class_weights * onehot_labels",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_20": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "onehot_labels",
                    "possible_values": [
                        [
                            "tf.reshape(class_targets, [-1, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_54": {
                "variable": {
                    "value": "(target, mask, bg, fg, b)",
                    "possible_values": []
                },
                "value": {
                    "value": "y_true",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "5",
                    "possible_values": []
                },
                "axis": {
                    "value": "channel_axis",
                    "possible_values": [
                        [
                            "len(y_true.shape) - 1",
                            "BinOp"
                        ],
                        [
                            "len(y_true.shape) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_55": {
                "variable": {
                    "value": "(denoised, pred_bg, pred_fg, pred_b)",
                    "possible_values": []
                },
                "value": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(y_pred.shape) - 1",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "onehot_gt",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([bg, fg, b], axis=3)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3]",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "variable": {
                    "value": "weighted_gt",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "class_weights * onehot_gt",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "onehot_pred",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([pred_bg, pred_fg, pred_b], axis=channel_axis)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3]",
                    "possible_values": []
                }
            },
            "mean_62": {
                "variable": {
                    "value": "segmentation_loss",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reduce_sum(onehot_gt, axis=-1) * (cross_entropy(logits=onehot_pred, labels=onehot_gt) * weighted_gt)",
                    "possible_values": []
                }
            },
            "split_76": {
                "variable": {
                    "value": "(target, mask, bg, fg, b)",
                    "possible_values": []
                },
                "value": {
                    "value": "y_true",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "5",
                    "possible_values": []
                },
                "axis": {
                    "value": "channel_axis",
                    "possible_values": [
                        [
                            "len(y_true.shape) - 1",
                            "BinOp"
                        ],
                        [
                            "len(y_true.shape) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_77": {
                "variable": {
                    "value": "(denoised, pred_bg, pred_fg, pred_b)",
                    "possible_values": []
                },
                "value": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(y_pred.shape) - 1",
                    "possible_values": []
                }
            },
            "mean_26": {
                "a": {
                    "value": "a * weighted_loss",
                    "possible_values": []
                }
            },
            "stack_57": {
                "values": {
                    "value": "[bg, fg, b]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "stack_60": {
                "values": {
                    "value": "[pred_bg, pred_fg, pred_b]",
                    "possible_values": []
                },
                "axis": {
                    "value": "channel_axis",
                    "possible_values": [
                        [
                            "len(y_true.shape) - 1",
                            "BinOp"
                        ],
                        [
                            "len(y_true.shape) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_22": {
                "tensor": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3]",
                    "possible_values": []
                }
            },
            "reduce_sum_63": {
                "input_tensor": {
                    "value": "onehot_gt",
                    "possible_values": [
                        [
                            "tf.reshape(tf.stack([bg, fg, b], axis=3), [-1, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_79": {
                "values": {
                    "value": "[target, mask]",
                    "possible_values": []
                },
                "axis": {
                    "value": "channel_axis",
                    "possible_values": [
                        [
                            "len(y_true.shape) - 1",
                            "BinOp"
                        ],
                        [
                            "len(y_true.shape) - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "denoiseg/models/denoiseg_config.py": {
        "tensorflow": {}
    },
    "denoiseg/models/denoiseg_standard.py": {
        "tensorflow": {
            "Adam_246": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config.train_learning_rate",
                    "possible_values": []
                }
            },
            "TerminateOnNaN_517": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_256": {
                "filepath": {
                    "value": "str(self.logdir / self.config.train_checkpoint)",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_259": {
                "filepath": {
                    "value": "str(self.logdir / 'weights_now.h5')",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "False",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "TensorBoard_264": {
                "log_dir": {
                    "value": "str(self.logdir / 'logs')",
                    "possible_values": []
                },
                "write_graph": {
                    "value": "False",
                    "possible_values": []
                },
                "profile_batch": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    }
}