{
    "demo/register.py": {
        "torch": {
            "is_available_17": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_217": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_218": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/DiverseView/evalRT.py": {
        "torch": {
            "is_available_23": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "extractMatch.py": {
        "torch": {
            "is_available_173": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_174": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "input_image[np.newaxis, :, :, :].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if use_cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/dataloaders/datasetPhotoTourism_combined.py": {
        "torch": {
            "DataLoader_75": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PhotoTourismCombined('/scratch/udit/phototourism/', 'caffe', 256)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/dataloaders/datasetPhotoTourism_ipr.py": {
        "torch": {
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "ndarray": {
                    "value": "img1.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_155": {
                "ndarray": {
                    "value": "img2.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "ndarray": {
                    "value": "pos1.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "ndarray": {
                    "value": "pos2.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/dataloaders/datasetPhotoTourism_real.py": {
        "torch": {
            "from_numpy_248": {
                "ndarray": {
                    "value": "image1.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_249": {
                "ndarray": {
                    "value": "depth1.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "ndarray": {
                    "value": "intrinsics1.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_251": {
                "ndarray": {
                    "value": "pose1.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "ndarray": {
                    "value": "bbox1.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_253": {
                "ndarray": {
                    "value": "image2.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_254": {
                "ndarray": {
                    "value": "depth2.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_255": {
                "ndarray": {
                    "value": "intrinsics2.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_256": {
                "ndarray": {
                    "value": "pose2.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_257": {
                "ndarray": {
                    "value": "bbox2.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extractMatchTop.py": {
        "torch": {
            "from_numpy_221": {
                "variable": {
                    "value": "igp1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "preprocess_image(img1, preprocessing=preprocessing).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_227": {
                "variable": {
                    "value": "(val1, nn12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "descriptors_a @ descriptors_b.t()",
                            "BinOp"
                        ],
                        [
                            "descriptors_a @ descriptors_b.t()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_228": {
                "variable": {
                    "value": "(val2, nn21)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "descriptors_a @ descriptors_b.t()",
                            "BinOp"
                        ],
                        [
                            "descriptors_a @ descriptors_b.t()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_229": {
                "variable": {
                    "value": "ids1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "sim.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "descriptors_a.device",
                            "Attribute"
                        ],
                        [
                            "descriptors_a.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_231": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids1[mask], nn12[mask]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "t_231": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_240": {
                "variable": {
                    "value": "ids1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "sim.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "descriptors_a.device",
                            "Attribute"
                        ],
                        [
                            "descriptors_a.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_242": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids1[mask], nn12[mask]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "full_matches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[matches1, matches2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "full_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dist_1, dist_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "ndarray": {
                    "value": "des1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "ndarray": {
                    "value": "des2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_178": {
                "ndarray": {
                    "value": "feat1['descriptors']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "ndarray": {
                    "value": "feat2['descriptors']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_238": {
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "descriptors_a @ descriptors_b.t()",
                            "BinOp"
                        ],
                        [
                            "descriptors_a @ descriptors_b.t()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_239": {
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "descriptors_a @ descriptors_b.t()",
                            "BinOp"
                        ],
                        [
                            "descriptors_a @ descriptors_b.t()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_292": {
                "ndarray": {
                    "value": "descriptors_a1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_293": {
                "ndarray": {
                    "value": "descriptors_b1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_297": {
                "ndarray": {
                    "value": "descriptors_a2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_298": {
                "ndarray": {
                    "value": "descriptors_b2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "topk_309": {
                "input": {
                    "value": "full_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([dist_1, dist_2])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(full_dist) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_320": {
                "data": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "descriptors_a.device",
                            "Attribute"
                        ],
                        [
                            "descriptors_a.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_321": {
                "data": {
                    "value": "second",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "descriptors_a.device",
                            "Attribute"
                        ],
                        [
                            "descriptors_a.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "lib/loss.py": {
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array([0], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos.device",
                            "Attribute"
                        ],
                        [
                            "pos1.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_196": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "pos.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos.device",
                            "Attribute"
                        ],
                        [
                            "pos1.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "floor_204": {
                "variable": {
                    "value": "i_top_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[0, :]",
                            "Subscript"
                        ],
                        [
                            "i[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "floor_205": {
                "variable": {
                    "value": "j_top_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[1, :]",
                            "Subscript"
                        ],
                        [
                            "j[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_206": {
                "variable": {
                    "value": "valid_top_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_top_left >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "floor_208": {
                "variable": {
                    "value": "i_top_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[0, :]",
                            "Subscript"
                        ],
                        [
                            "i[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ceil_209": {
                "variable": {
                    "value": "j_top_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[1, :]",
                            "Subscript"
                        ],
                        [
                            "j[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_210": {
                "variable": {
                    "value": "valid_top_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_top_right >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ceil_212": {
                "variable": {
                    "value": "i_bottom_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[0, :]",
                            "Subscript"
                        ],
                        [
                            "i[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "floor_213": {
                "variable": {
                    "value": "j_bottom_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[1, :]",
                            "Subscript"
                        ],
                        [
                            "j[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_214": {
                "variable": {
                    "value": "valid_bottom_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_bottom_left < h",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ceil_216": {
                "variable": {
                    "value": "i_bottom_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[0, :]",
                            "Subscript"
                        ],
                        [
                            "i[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ceil_217": {
                "variable": {
                    "value": "j_bottom_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[1, :]",
                            "Subscript"
                        ],
                        [
                            "j[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_218": {
                "variable": {
                    "value": "valid_bottom_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_bottom_right < h",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "min_220": {
                "variable": {
                    "value": "valid_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(valid_top_left, valid_top_right)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_242": {
                "variable": {
                    "value": "valid_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(depth[i_top_left, j_top_left] > 0, depth[i_top_right, j_top_right] > 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i.view(1, -1), j.view(1, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "XYZ1_hom",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X1.view(1, -1), Y1.view(1, -1), Z1.view(1, -1), torch.ones(1, Z1.size(0), device=device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chain_matmul_317": {
                "variable": {
                    "value": "XYZ2_hom",
                    "type": "variable",
                    "possible_values": []
                },
                "*matrices": {
                    "value": "pose2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['pose2'][idx_in_batch].view(4, 4).to(device)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "torch.inverse(pose1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_320": {
                "variable": {
                    "value": "uv2_hom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intrinsics2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['intrinsics2'][idx_in_batch].to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "XYZ2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XYZ2_hom[:-1, :] / XYZ2_hom[-1, :].view(1, -1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_325": {
                "variable": {
                    "value": "uv2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[u2.view(1, -1), v2.view(1, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_54": {
                "variable": {
                    "value": "all_descriptors1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense_features1.view(c, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_57": {
                "variable": {
                    "value": "all_descriptors2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense_features2.view(c, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_79": {
                "variable": {
                    "value": "fmap_pos2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "downscale_positions(pos2, scaling_steps=scaling_steps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_82": {
                "variable": {
                    "value": "descriptors2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense_features2[:, fmap_pos2[0, :], fmap_pos2[1, :]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_292": {
                "tensors": {
                    "value": "[uv[1, :].view(1, -1), uv[0, :].view(1, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_221": {
                "input": {
                    "value": "valid_top_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(i_top_left >= 0, j_top_left >= 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_222": {
                "input": {
                    "value": "valid_bottom_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(i_bottom_left < h, j_bottom_left >= 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_243": {
                "input": {
                    "value": "depth[i_top_left, j_top_left] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "min_247": {
                "input": {
                    "value": "depth[i_bottom_left, j_bottom_left] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "inverse_317": {
                "input": {
                    "value": "pose1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['pose1'][idx_in_batch].view(4, 4).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_333": {
                "input": {
                    "value": "estimated_depth - annotated_depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_91": {
                "input": {
                    "value": "torch.abs(fmap_pos2.unsqueeze(2).float() - all_fmap_pos2.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_100": {
                "input": {
                    "value": "distance_matrix + (1 - is_out_of_safe_radius.float()) * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_106": {
                "input": {
                    "value": "torch.abs(fmap_pos1.unsqueeze(2).float() - all_fmap_pos1.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_115": {
                "input": {
                    "value": "distance_matrix + (1 - is_out_of_safe_radius.float()) * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_120": {
                "input": {
                    "value": "negative_distance1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(distance_matrix + (1 - is_out_of_safe_radius.float()) * 10.0, dim=1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_315": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "Z1.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos.device",
                            "Attribute"
                        ],
                        [
                            "pos1.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "abs_92": {
                "input": {
                    "value": "fmap_pos2.unsqueeze(2).float() - all_fmap_pos2.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_107": {
                "input": {
                    "value": "fmap_pos1.unsqueeze(2).float() - all_fmap_pos1.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "scores1 * scores2 * F.relu(margin + diff)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "scores1 * scores2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_127": {
                "input": {
                    "value": "margin + diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/losses/lossPhotoTourism.py": {
        "torch": {
            "tensor_32": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array([0], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "round_150": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_46": {
                "variable": {
                    "value": "all_descriptors1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense_features1.view(c, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_49": {
                "variable": {
                    "value": "all_descriptors2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense_features2.view(c, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_67": {
                "variable": {
                    "value": "fmap_pos2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "downscale_positions(pos2, scaling_steps=scaling_steps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_71": {
                "variable": {
                    "value": "descriptors2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense_features2[:, fmap_pos2[0, :], fmap_pos2[1, :]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_80": {
                "input": {
                    "value": "torch.abs(fmap_pos2.unsqueeze(2).float() - all_fmap_pos2.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_91": {
                "input": {
                    "value": "distance_matrix + (1 - is_out_of_safe_radius.float()) * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_97": {
                "input": {
                    "value": "torch.abs(fmap_pos1.unsqueeze(2).float() - all_fmap_pos1.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_108": {
                "input": {
                    "value": "distance_matrix + (1 - is_out_of_safe_radius.float()) * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_113": {
                "input": {
                    "value": "negative_distance1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(distance_matrix + (1 - is_out_of_safe_radius.float()) * 10.0, dim=1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_81": {
                "input": {
                    "value": "fmap_pos2.unsqueeze(2).float() - all_fmap_pos2.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_98": {
                "input": {
                    "value": "fmap_pos1.unsqueeze(2).float() - all_fmap_pos1.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "scores1 * scores2 * F.relu(margin + diff)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_121": {
                "input": {
                    "value": "scores1 * scores2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_120": {
                "input": {
                    "value": "margin + diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.features.children())[:conv4_3_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_63": {
                "variable": {
                    "value": "exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch / max_per_sample.view(b, 1, 1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_62": {
                "input": {
                    "value": "batch.view(b, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_66": {
                "input": {
                    "value": "F.pad(exp, [self.pad] * 4, mode='constant', value=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.soft_local_max_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_73": {
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_77": {
                "input": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_max_score * depth_wise_max_score",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "score.view(b, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "[batch['image1'], batch['image2']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_67": {
                "input": {
                    "value": "exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(batch / max_per_sample.view(b, 1, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[self.pad] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_97": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_99": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model_test.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "self.dii_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1.0, 0], [0, -2.0, 0], [0, 1.0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "self.djj_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0], [1.0, -2.0, 1.0], [0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_105": {
                "variable": {
                    "value": "local_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_109": {
                "variable": {
                    "value": "dii",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.view(-1, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.dii_filter.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_112": {
                "variable": {
                    "value": "dij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.view(-1, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.dij_filter.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_115": {
                "variable": {
                    "value": "djj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.view(-1, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.djj_filter.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_124": {
                "variable": {
                    "value": "is_not_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tr * tr / det <= threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "min_126": {
                "variable": {
                    "value": "detected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_depth_wise_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch == depth_wise_max",
                            "Compare"
                        ]
                    ]
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "self.di_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, -0.5, 0], [0, 0, 0], [0, 0.5, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "self.dj_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0], [-0.5, 0, 0.5], [0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "self.dii_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1.0, 0], [0, -2.0, 0], [0, 1.0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "self.djj_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0], [1.0, -2.0, 1.0], [0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_160": {
                "variable": {
                    "value": "dii",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.view(-1, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.dii_filter.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_163": {
                "variable": {
                    "value": "dij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.view(-1, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.dij_filter.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_166": {
                "variable": {
                    "value": "djj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.view(-1, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.djj_filter.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_176": {
                "variable": {
                    "value": "di",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.view(-1, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.di_filter.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_179": {
                "variable": {
                    "value": "dj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.view(-1, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.dj_filter.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(batch)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_187": {
                "tensors": {
                    "value": "[step_i, step_j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_20": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_27": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "[[1.0, 0, -1.0], [0, 0.0, 0], [-1.0, 0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_101": {
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_128": {
                "input": {
                    "value": "is_local_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch == local_max",
                            "Compare"
                        ]
                    ]
                }
            },
            "tensor_149": {
                "data": {
                    "value": "[[1.0, 0, -1.0], [0, 0.0, 0], [-1.0, 0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_64": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/pyramid.py": {
        "torch": {
            "zeros_14": {
                "variable": {
                    "value": "all_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "all_descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[model.dense_feature_extraction.num_channels, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_23": {
                "variable": {
                    "value": "current_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_52": {
                "variable": {
                    "value": "fmap_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "detections[0].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_52": {
                "variable": {
                    "value": "fmap_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_65": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(displacements_i) < 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_70": {
                "variable": {
                    "value": "valid_displacements",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[displacements_i[mask], displacements_j[mask]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_93": {
                "variable": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[keypoints, torch.ones([1, keypoints.size(1)]) * 1 / scale]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "all_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_keypoints, keypoints]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "all_descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_descriptors, descriptors]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_scores, scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_45": {
                "variable": {
                    "value": "banned",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "banned.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_46": {
                "variable": {
                    "value": "detections",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "detections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.detection(dense_features)",
                            "Call"
                        ],
                        [
                            "torch.min(detections, ~banned)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_47": {
                "variable": {
                    "value": "banned",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(detections, dim=1)[0].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_51": {
                "variable": {
                    "value": "banned",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_36": {
                "input": {
                    "value": "previous_dense_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dense_features",
                            "variable"
                        ]
                    ]
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_66": {
                "input": {
                    "value": "displacements_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "displacements[0, fmap_pos[0, :], fmap_pos[1, :], fmap_pos[2, :]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_67": {
                "input": {
                    "value": "displacements_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "displacements[1, fmap_pos[0, :], fmap_pos[1, :], fmap_pos[2, :]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_51": {
                "input": {
                    "value": "detections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.detection(dense_features)",
                            "Call"
                        ],
                        [
                            "torch.min(detections, ~banned)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_104": {
                "*size": {
                    "value": "[1, keypoints.size(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_48": {
                "input": {
                    "value": "detections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.detection(dense_features)",
                            "Call"
                        ],
                        [
                            "torch.min(detections, ~banned)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils.py": {
        "torch": {
            "arange_52": {
                "variable": {
                    "value": "lines",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_55": {
                "variable": {
                    "value": "columns",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_79": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "pos.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "floor_87": {
                "variable": {
                    "value": "i_top_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[0, :]",
                            "Subscript"
                        ],
                        [
                            "i[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "floor_88": {
                "variable": {
                    "value": "j_top_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[1, :]",
                            "Subscript"
                        ],
                        [
                            "j[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_89": {
                "variable": {
                    "value": "valid_top_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_top_left >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "floor_91": {
                "variable": {
                    "value": "i_top_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[0, :]",
                            "Subscript"
                        ],
                        [
                            "i[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ceil_92": {
                "variable": {
                    "value": "j_top_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[1, :]",
                            "Subscript"
                        ],
                        [
                            "j[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_93": {
                "variable": {
                    "value": "valid_top_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_top_right >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ceil_95": {
                "variable": {
                    "value": "i_bottom_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[0, :]",
                            "Subscript"
                        ],
                        [
                            "i[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "floor_96": {
                "variable": {
                    "value": "j_bottom_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[1, :]",
                            "Subscript"
                        ],
                        [
                            "j[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_97": {
                "variable": {
                    "value": "valid_bottom_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_bottom_left < h",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ceil_99": {
                "variable": {
                    "value": "i_bottom_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[0, :]",
                            "Subscript"
                        ],
                        [
                            "i[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ceil_100": {
                "variable": {
                    "value": "j_bottom_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[1, :]",
                            "Subscript"
                        ],
                        [
                            "j[ids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_101": {
                "variable": {
                    "value": "valid_bottom_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_bottom_right < h",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "min_103": {
                "variable": {
                    "value": "valid_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(valid_top_left, valid_top_right)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i.view(1, -1), j.view(1, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.stack([i_top_left, j_top_left], dim=0), torch.stack([i_top_right, j_top_right], dim=0), torch.stack([i_bottom_left, j_bottom_left], dim=0), torch.stack([i_bottom_right, j_bottom_right], dim=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_59": {
                "tensors": {
                    "value": "[lines, columns]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[lines.view(1, -1), columns.view(1, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_104": {
                "input": {
                    "value": "valid_top_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(i_top_left >= 0, j_top_left >= 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_105": {
                "input": {
                    "value": "valid_bottom_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(i_bottom_left < h, j_bottom_left >= 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_147": {
                "tensors": {
                    "value": "[i_top_left, j_top_left]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_148": {
                "tensors": {
                    "value": "[i_top_right, j_top_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_149": {
                "tensors": {
                    "value": "[i_bottom_left, j_bottom_left]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_150": {
                "tensors": {
                    "value": "[i_bottom_right, j_bottom_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "trainPT_ipr.py": {
        "torch": {
            "is_available_24": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_104": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "training_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PhotoTourismIPR(base_path=args.dataset_path, preprocessing=args.preprocessing)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_128": {
                "mode": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_222": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'args': args, 'epoch_idx': epoch_idx, 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'train_loss_history': train_loss_history}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_directory, '%02d.pth' % epoch_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trainers/trainPT_combined.py": {
        "torch": {
            "is_available_29": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_148": {
                "variable": {
                    "value": "training_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PhotoTourismCombined(base_path=args.dataset_path, preprocessing=args.preprocessing)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "validation_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PhotoTourismCombined(base_path=args.dataset_path, train=False, preprocessing=args.preprocessing, pairs_per_scene=25)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_163": {
                "mode": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_276": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'args': args, 'epoch_idx': epoch_idx, 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'train_loss_history': train_loss_history, 'validation_loss_history': validation_loss_history}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_directory, '%02d.pth' % epoch_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}