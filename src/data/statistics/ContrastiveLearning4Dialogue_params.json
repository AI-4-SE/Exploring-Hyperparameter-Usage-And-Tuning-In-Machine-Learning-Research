{
    "parlai/agents/contrastive_learning/common_things.py": {
        "torch": {
            "zeros_151": {
                "variable": {
                    "value": "EMPTY",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sub_283": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_log_p(self, target_scores, target_ys)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "log_p_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_log_p(self, ref_scores, ref_ys)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_284": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sub(log_p_m, log_p_n)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_664": {
                "variable": {
                    "value": "ones_score",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ],
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_359": {
                "input": {
                    "value": "2 * (scores + 0.5 - threshold) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_93": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "init_model",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                },
                "pickle_module": {
                    "value": "parlai.utils.pickle",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_292": {
                "input": {
                    "value": "torch.clamp(-matching_scores * (0.5 - h) + 0.5, 1e-20, 1e+20)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_600": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_633": {
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ],
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_650": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_669": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_292": {
                "input": {
                    "value": "-matching_scores * (0.5 - h) + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1e+20",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_297": {
                "input": {
                    "value": "batch_cl_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.log(torch.clamp(-matching_scores * (0.5 - h) + 0.5, 1e-20, 1e+20))",
                            "UnaryOp"
                        ],
                        [
                            "batch_cl_loss + batch_samp_r_cl_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_301": {
                "input": {
                    "value": "batch_cl_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.log(torch.clamp(-matching_scores * (0.5 - h) + 0.5, 1e-20, 1e+20))",
                            "UnaryOp"
                        ],
                        [
                            "batch_cl_loss + batch_samp_r_cl_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_772": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_780": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_792": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/dialog_wae/criterions.py": {
        "torch": {
            "KLDivLoss_12": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_33": {
                "variable": {
                    "value": "sum_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.criterion(x, Variable(target, requires_grad=False))",
                            "Call"
                        ],
                        [
                            "torch.sum(batch_loss, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_34": {
                "variable": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.criterion(x, Variable(target, requires_grad=False))",
                            "Call"
                        ],
                        [
                            "torch.sum(batch_loss, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_43": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/dialog_wae/dialog_wae.py": {
        "torch": {
            "RMSprop_214": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.model.post_net.parameters()) + list(self.model.post_generator.parameters()) + list(self.model.prior_net.parameters()) + list(self.model.prior_generator.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt['lr_gan_g']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "RMSprop_218": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt['lr_gan_d']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_574": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample_words",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_515": {
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_520": {
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_516": {
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/dialog_wae/helper.py": {
        "torch": {
            "from_numpy_100": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/dialog_wae/modules.py": {
        "torch": {
            "Sequential_61": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.context_to_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.context_to_logsigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_88": {
                "variable": {
                    "value": "logsigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logsigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.context_to_logsigma(context)",
                            "Call"
                        ],
                        [
                            "torch.clamp(logsigma, -20, 20)",
                            "Call"
                        ],
                        [
                            "torch.bmm(pi, logsigmas.view(batch_size, self.n_components, self.z_size))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-20",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_89": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logsigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.pi_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_size, z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.context_to_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_components * z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.context_to_logsigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_components * z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gumbel_softmax_137": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pi_net(context)",
                            "Call"
                        ],
                        [
                            "F.gumbel_softmax(pi, tau=self.gumbel_temp, hard=True, eps=1e-10)",
                            "Call"
                        ],
                        [
                            "pi.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "tau": {
                    "value": "self.gumbel_temp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_144": {
                "variable": {
                    "value": "logsigmas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logsigmas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.context_to_logsigma(context)",
                            "Call"
                        ],
                        [
                            "torch.clamp(logsigmas, -20, 20)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-20",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_146": {
                "variable": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logsigmas",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_151": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pi_net(context)",
                            "Call"
                        ],
                        [
                            "F.gumbel_softmax(pi, tau=self.gumbel_temp, hard=True, eps=1e-10)",
                            "Call"
                        ],
                        [
                            "pi.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "zi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(epsilons * stds + mus).view(batch_size, self.n_components, self.z_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_151": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_152": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pi_net(context)",
                            "Call"
                        ],
                        [
                            "F.gumbel_softmax(pi, tau=self.gumbel_temp, hard=True, eps=1e-10)",
                            "Call"
                        ],
                        [
                            "pi.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "mus.view(batch_size, self.n_components, self.z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_153": {
                "variable": {
                    "value": "logsigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pi_net(context)",
                            "Call"
                        ],
                        [
                            "F.gumbel_softmax(pi, tau=self.gumbel_temp, hard=True, eps=1e-10)",
                            "Call"
                        ],
                        [
                            "pi.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "logsigmas.view(batch_size, self.n_components, self.z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_170": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_197": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_253": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_287": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_294": {
                "variable": {
                    "value": "batch_max_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_context_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "utt_floor_encs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[utt_encs, floor_one_hot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_395": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_554": {
                "variable": {
                    "value": "self.embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_580": {
                "variable": {
                    "value": "self.post_generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config['z_size'], config['z_size'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_591": {
                "variable": {
                    "value": "self.prior_generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config['z_size'], config['z_size'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_642": {
                "variable": {
                    "value": "self.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear((config['hiddensize'] + config['z_size']) * config['numlayers'], config['hiddensize'] * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_715": {
                "variable": {
                    "value": "errG_post",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.discriminator(torch.cat((z_post, context_hidden.detach()), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_720": {
                "variable": {
                    "value": "errG_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.discriminator(torch.cat((prior_z, context_hidden.detach()), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_746": {
                "variable": {
                    "value": "errD_post",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.discriminator(torch.cat((post_z.detach(), context_hidden.detach()), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_750": {
                "variable": {
                    "value": "errD_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.discriminator(torch.cat((prior_z.detach(), context_hidden.detach()), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_757": {
                "variable": {
                    "value": "d_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(interpolates, context_hidden.detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_758": {
                "variable": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.discriminator(d_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_773": {
                "variable": {
                    "value": "errD_post",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.discriminator(torch.cat((post_z, c), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_774": {
                "variable": {
                    "value": "errD_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.discriminator(torch.cat((prior_z, c), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_177": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout if n_layers > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_259": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout if n_layers > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_264": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout if n_layers > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "context_encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, dim=1).to(inputs.device)",
                            "Call"
                        ],
                        [
                            "self.decoder(context_hidden, None, ys[:, :-1], res_lens - 1, context_encoder_states=context_encoder_states)",
                            "Call"
                        ],
                        [
                            "self.decoder(torch.cat((vhred_z, context_hidden), 1), None, ys[:, :-1], res_lens - 1)",
                            "Call"
                        ],
                        [
                            "self.decoder(c_z, None, ys[:, :-1], res_lens - 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_351": {
                "variable": {
                    "value": "utt_floor_encs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "utt_floor_encs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([utt_encs, floor_one_hot], 2)",
                            "Call"
                        ],
                        [
                            "self.dropout(utt_floor_encs)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(utt_floor_encs, context_lens, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "context_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_356": {
                "variable": {
                    "value": "(context_encoder_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "context_encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(output, dim=1).to(utt_floor_encs.device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "max_context_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_400": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout if n_layers > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_404": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout if n_layers > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_438": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs, repeated_context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_458": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, dim=1).to(inputs.device)",
                            "Call"
                        ],
                        [
                            "self.decoder(context_hidden, None, ys[:, :-1], res_lens - 1, context_encoder_states=context_encoder_states)",
                            "Call"
                        ],
                        [
                            "self.decoder(torch.cat((vhred_z, context_hidden), 1), None, ys[:, :-1], res_lens - 1)",
                            "Call"
                        ],
                        [
                            "self.decoder(c_z, None, ys[:, :-1], res_lens - 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_613": {
                "variable": {
                    "value": "self.vhred_bow_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear((config['hiddensize'] + config['z_size']) * config['numlayers'], config['hiddensize'] * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_674": {
                "variable": {
                    "value": "mean2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_678": {
                "variable": {
                    "value": "logvar2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_90": {
                "*size": {
                    "value": "[batch_size, self.z_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_116": {
                "in_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_148": {
                "*size": {
                    "value": "[batch_size, self.n_components * self.z_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTM_182": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout if n_layers > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_325": {
                "*size": {
                    "value": "floors.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_479": {
                "tensors": {
                    "value": "[decoder_input, context.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_581": {
                "in_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_582": {
                "num_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_584": {
                "in_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_585": {
                "num_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_586": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_587": {
                "in_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['z_size'] * config['numlayers']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_592": {
                "in_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_593": {
                "num_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_594": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_595": {
                "in_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_596": {
                "num_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_597": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_598": {
                "in_features": {
                    "value": "config['z_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['z_size'] * config['numlayers']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_643": {
                "in_features": {
                    "value": "(config['hiddensize'] + config['z_size']) * config['numlayers']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hiddensize'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_644": {
                "num_features": {
                    "value": "config['hiddensize'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_645": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_646": {
                "in_features": {
                    "value": "config['hiddensize'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hiddensize'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_647": {
                "num_features": {
                    "value": "config['hiddensize'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_648": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_649": {
                "in_features": {
                    "value": "config['hiddensize'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_663": {
                "tensors": {
                    "value": "(x, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_681": {
                "input": {
                    "value": "logvar2 - logvar1 + (torch.exp(logvar1) + (mean1 - mean2).pow(2)) / torch.exp(logvar2) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_681": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_681": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_697": {
                "input": {
                    "value": "bow_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.log_softmax(bow_logits, dim=1) * target_bow",
                            "BinOp"
                        ],
                        [
                            "torch.sum(bow_loss) / response.size(0)",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self._compute_bow_loss(bow_logits, ys)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_707": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_739": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_753": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_hidden.size(0)",
                            "Call"
                        ],
                        [
                            "context.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_759": {
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(self.discriminator(d_input))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * prior_z.data + (1 - alpha) * post_z.data",
                            "BinOp"
                        ],
                        [
                            "Variable(interpolates, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "gData(torch.ones(disc_interpolates.size()), self.use_cuda)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_787": {
                "variable": {
                    "value": "dec_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prior_z, context_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_791": {
                "variable": {
                    "value": "dec_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prior_z, context_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_829": {
                "variable": {
                    "value": "c_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, context_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_228": {
                "means": {
                    "value": "torch.zeros(enc.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "self.noise_radius",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_368": {
                "means": {
                    "value": "torch.zeros(enc.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "self.noise_radius",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_509": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_output[:, -1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_515": {
                "variable": {
                    "value": "hyp_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "logprobs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_521": {
                "tensors": {
                    "value": "[decoder_input, context.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_614": {
                "in_features": {
                    "value": "(config['hiddensize'] + config['z_size']) * config['numlayers']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hiddensize'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_615": {
                "num_features": {
                    "value": "config['hiddensize'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_616": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_617": {
                "in_features": {
                    "value": "config['hiddensize'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hiddensize'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_618": {
                "num_features": {
                    "value": "config['hiddensize'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_619": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_620": {
                "in_features": {
                    "value": "config['hiddensize'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_694": {
                "input": {
                    "value": "bow_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vhred_bow_project(torch.cat([context_hidden, vhred_priori_z], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_715": {
                "tensors": {
                    "value": "(z_post, context_hidden.detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_720": {
                "tensors": {
                    "value": "(prior_z, context_hidden.detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_746": {
                "tensors": {
                    "value": "(post_z.detach(), context_hidden.detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_750": {
                "tensors": {
                    "value": "(prior_z.detach(), context_hidden.detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_773": {
                "tensors": {
                    "value": "(post_z, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_774": {
                "tensors": {
                    "value": "(prior_z, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "layer_norm_793": {
                "variable": {
                    "value": "dec_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context_hidden",
                            "variable"
                        ],
                        [
                            "torch.cat((prior_z, context_hidden), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((prior_z, context_hidden), 1)",
                            "Call"
                        ],
                        [
                            "F.layer_norm(dec_input, [dec_input.size(-1)])",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "[dec_input.size(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "layer_norm_831": {
                "variable": {
                    "value": "c_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((z, context_hidden), 1)",
                            "Call"
                        ],
                        [
                            "F.layer_norm(c_z, [c_z.size(-1)])",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "[c_z.size(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_815": {
                "tensors": {
                    "value": "(x, context_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_820": {
                "tensors": {
                    "value": "(vhred_z, context_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_823": {
                "tensors": {
                    "value": "[context_hidden, vhred_priori_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "*size": {
                    "value": "enc.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_368": {
                "*size": {
                    "value": "enc.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_514": {
                "input": {
                    "value": "sprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_760": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_682": {
                "input": {
                    "value": "logvar1",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/hy_lib/common_modules.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(n_in, n_out, bias=bias) for (n_in, n_out) in zip(n_inputs, n_outputs)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/agents/hy_lib/common_utils.py": {
        "torch": {
            "unsqueeze_23": {
                "variable": {
                    "value": "labels_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_24": {
                "variable": {
                    "value": "label_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, -1)",
                            "Call"
                        ],
                        [
                            "scores",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "labels_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(labels, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_19": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "scores_no_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scores_no_padding, b_score[0:padding_stops[b_idx], :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "labels_no_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels_no_padding, labels[b_idx][0:padding_stops[b_idx]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "bows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Variable(torch.cat(bows, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/seq2seq/modules.py": {
        "torch": {
            "Dropout_258": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_363": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_368": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embeddingsize",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_503": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_507": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features).uniform_(-rng, rng)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_703": {
                "variable": {
                    "value": "attn_applied",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "enc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_out.index_select(0, indices)",
                            "Call"
                        ],
                        [
                            "enc_out.narrow(1, offset, self.max_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_705": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), attn_applied.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_707": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_combine(merged).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_32": {
                "obj": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_192": {
                "obj": {
                    "value": "incremental_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_268": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embeddingsize",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_320": {
                "variable": {
                    "value": "(encoder_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "xs.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "xes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_xes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_456": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, dim=1).to(xes.device)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.attn_combine(merged).unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_513": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features, embeddingsize).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_524": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_525": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "numsoftmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_526": {
                "variable": {
                    "value": "self.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "numsoftmax * embeddingsize",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_527": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_556": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "active.view(-1, self.esz)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_572": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.o2e(input))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_615": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hszXdirs + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddingsize",
                            "variable"
                        ],
                        [
                            "hsz",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_663": {
                "variable": {
                    "value": "h_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), last_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_664": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_700": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_v(active).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_t).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_t).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_171": {
                "obj": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(indices).to(hid.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_194": {
                "input": {
                    "value": "incremental_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_532": {
                "variable": {
                    "value": "self.o2e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embeddingsize",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_623": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attn_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_678": {
                "variable": {
                    "value": "h_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc_out, hid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_680": {
                "variable": {
                    "value": "active",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_626": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + hszXdirs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_627": {
                "variable": {
                    "value": "self.attn_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_688": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid.index_select(1, indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(bsz, seqlen, numlayersXnumdir)",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_688": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_630": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hszXdirs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hsz * (2 if bidirectional else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_686": {
                "variable": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hid, hid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_694": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid.index_select(1, indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(bsz, seqlen, numlayersXnumdir)",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_694": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/seq2seq/seq2seq.py": {
        "torch": {
            "load_241": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "NLLLoss_212": {
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_214": {
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/transformer/biencoder.py": {
        "torch": {
            "cat_64": {
                "variable": {
                    "value": "cand_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cand_vecs, label_vec_pad.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/transformer/crossencoder.py": {
        "torch": {
            "Embedding_95": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dict)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "null_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt['embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_30": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/transformer/modules.py": {
        "torch": {
            "Embedding_57": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dictionary)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_329": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, hdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_351": {
                "variable": {
                    "value": "self.additional_linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_432": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_461": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['n_positions']",
                            "Subscript"
                        ],
                        [
                            "max(opt.get('truncate') or 0, opt.get('text_truncate') or 0, opt.get('label_truncate') or 0)",
                            "Call"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "get_n_positions_from_options(opt)",
                            "Call"
                        ],
                        [
                            "opt['n_positions']",
                            "Subscript"
                        ],
                        [
                            "max(opt.get('truncate') or 0, opt.get('text_truncate') or 0, opt.get('label_truncate') or 0)",
                            "Call"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_481": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_585": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "LayerNorm_592": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_593": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_661": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_679": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['n_positions']",
                            "Subscript"
                        ],
                        [
                            "max(opt.get('truncate') or 0, opt.get('text_truncate') or 0, opt.get('label_truncate') or 0)",
                            "Call"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "get_n_positions_from_options(opt)",
                            "Call"
                        ],
                        [
                            "opt['n_positions']",
                            "Subscript"
                        ],
                        [
                            "max(opt.get('truncate') or 0, opt.get('text_truncate') or 0, opt.get('label_truncate') or 0)",
                            "Call"
                        ],
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_688": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_719": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(mask.cumsum(dim=1, dtype=torch.int64) - 1).clamp_(min=0)",
                            "Call"
                        ],
                        [
                            "input.new(seq_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(seq_len, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "positions[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_719": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_782": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_787": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "LayerNorm_792": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "LayerNorm_797": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "tril_855": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.new(time, time).fill_(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_932": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(enc, 0, indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(indices).to(enc.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_933": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input != self.padding_idx",
                            "Compare"
                        ],
                        [
                            "torch.tril(x.new(time, time).fill_(1))",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).expand(bsz, -1, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask, 0, indices)",
                            "Call"
                        ],
                        [
                            "incr_state['prev_mask']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([incr_state['prev_mask'], mask], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(indices).to(enc.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_957": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(input)",
                            "Call"
                        ],
                        [
                            "tensor * np.sqrt(self.dim)",
                            "BinOp"
                        ],
                        [
                            "tensor + position_embs",
                            "BinOp"
                        ],
                        [
                            "tensor + self.segment_embeddings(segments)",
                            "BinOp"
                        ],
                        [
                            "_normalize(tensor, self.norm_embeddings)",
                            "Call"
                        ],
                        [
                            "self.dropout(tensor)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).type_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layers[i](tensor, mask)",
                            "Call"
                        ],
                        [
                            "tensor + self.dropout(attended_tensor)",
                            "BinOp"
                        ],
                        [
                            "_normalize(tensor, self.norm1)",
                            "Call"
                        ],
                        [
                            "tensor + self.dropout(self.ffn(tensor))",
                            "BinOp"
                        ],
                        [
                            "_normalize(tensor, self.norm2)",
                            "Call"
                        ],
                        [
                            "self.embeddings(input)",
                            "Call"
                        ],
                        [
                            "tensor * np.sqrt(self.dim)",
                            "BinOp"
                        ],
                        [
                            "_normalize(tensor, self.norm_embeddings)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(tensor)",
                            "Call"
                        ],
                        [
                            "tensor.view(batch_size, tensor.size(1), n_heads, dim_per_head)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(1, 2).contiguous().view(batch_size * n_heads, seq_len, dim_per_head)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_968": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_1006": {
                "variable": {
                    "value": "lhs_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(l1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_1030": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1031": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1032": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1033": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1039": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_1162": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.div_(scale).bmm(k.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1197": {
                "variable": {
                    "value": "self.relu_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "relu_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1206": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_1207": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_455": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocabulary_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_471": {
                "variable": {
                    "value": "self.norm_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "Embedding_478": {
                "variable": {
                    "value": "self.segment_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_segments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_672": {
                "variable": {
                    "value": "self.norm_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "CosineSimilarity_970": {
                "variable": {
                    "value": "self.cosine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_995": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "ys.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "erf_133": {
                "input": {
                    "value": "tensor / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_330": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_332": {
                "in_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_527": {
                "variable": {
                    "value": "segments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input[:, -1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_tensor_930": {
                "obj": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(indices).to(enc.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1124": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1132": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_value, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1137": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[incr_state['prev_mask'], mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_1185": {
                "input": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/transformer/polyencoder.py": {
        "torch": {
            "CrossEntropyLoss_101": {
                "variable": {
                    "value": "self.rank_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_285": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dict)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "null_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_423": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctxt_final_rep * cand_embed",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_236": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_codes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['embedding_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_238": {
                "variable": {
                    "value": "self.codes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(self.n_codes, embed_dim)",
                            "Call"
                        ],
                        [
                            "torch.nn.init.uniform_(codes)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "ctxt_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctxt_out, extra_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_392": {
                "variable": {
                    "value": "ctxt_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctxt_pos, extra_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_394": {
                "variable": {
                    "value": "ctxt_rep_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctxt_mask, extra_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/agents/transformer/transformer.py": {
        "torch": {
            "DataParallel_213": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_217": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "cands.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_219": {
                "input": {
                    "value": "output.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "cands.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_219": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/build_data.py": {
        "torch": {}
    },
    "parlai/core/image_featurizers.py": {
        "torch": {
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_63": {
                "device": {
                    "value": "self.opt.get('gpu', -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/metrics.py": {
        "torch": {}
    },
    "parlai/core/teachers.py": {
        "torch": {
            "load_1630": {
                "variable": {
                    "value": "self.image_features_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "image_mode_features_dict_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_image_features_path(self.task, self.image_mode, self.datatype)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_1688": {
                "obj": {
                    "value": "image_features_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "store_dict_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/torch_agent.py": {
        "torch": {
            "zeros_698": {
                "variable": {
                    "value": "self.EMPTY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_1752": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                },
                "pickle_module": {
                    "value": "parlai.utils.pickle",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_device_properties_1033": {
                "variable": {
                    "value": "props",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "variable"
                        ]
                    ]
                }
            },
            "is_available_647": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_692": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1169": {
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[vec]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__1952": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.opt['gradient_clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_device_652": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_count_1027": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_allocated_1035": {
                "device": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "variable"
                        ]
                    ]
                }
            },
            "memory_cached_1035": {
                "device": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "variable"
                        ]
                    ]
                }
            },
            "Tensor_1093": {
                "variable": {
                    "value": "self.proj_rp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_1097": {
                "input": {
                    "value": "vec.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.proj_rp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1847": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1707": {
                "obj": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "torch.load(path, map_location=lambda cpu, _: cpu, pickle_module=parlai.utils.pickle)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/torch_classifier_agent.py": {
        "torch": {
            "max_264": {
                "variable": {
                    "value": "(_, prediction_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_279": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(batch)",
                            "Call"
                        ],
                        [
                            "self.score(batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_186": {
                "weight": {
                    "value": "weight_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(self.class_weights)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_281": {
                "variable": {
                    "value": "(_, prediction_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_174": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/torch_generator_agent.py": {
        "torch": {
            "cat_109": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.START.detach().expand(bsz, 1), inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_872": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys.size(0)",
                            "Call"
                        ],
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ],
                        [
                            "len(batch.image)",
                            "Call"
                        ],
                        [
                            "len(batch.text_lengths) if batch.text_lengths is not None else len(batch.image)",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_872": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_1266": {
                "variable": {
                    "value": "hyp_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "logprobs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_1286": {
                "variable": {
                    "value": "(best_scores, best_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_beam_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_scores.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1315": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1317": {
                "variable": {
                    "value": "hyp_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "logprobs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_1343": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_ngrams(self.block_ngram, logprobs, None)",
                            "Call"
                        ],
                        [
                            "self._block_ngrams(self.context_block_ngram, logprobs, self.context)",
                            "Call"
                        ],
                        [
                            "logprobs[0:1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1352": {
                "variable": {
                    "value": "hyp_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "logprobs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_407": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.opt['gpu']]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_887": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score[:, -1:, :]",
                            "Subscript"
                        ],
                        [
                            "model.output(score)",
                            "Call"
                        ],
                        [
                            "score.view(bsz, beam_size, -1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(score, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_891": {
                "variable": {
                    "value": "incr_state_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[beam_size * i + b.get_backtrack_from_current_step() for (i, b) in enumerate(beams)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "index_select_900": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([self.START_IDX]).expand(bsz * beam_size, 1).to(dev)",
                            "Call"
                        ],
                        [
                            "torch.index_select(decoder_input, 0, incr_state_inds)",
                            "Call"
                        ],
                        [
                            "torch.cat([decoder_input, selection], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "incr_state_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([beam_size * i + b.get_backtrack_from_current_step() for (i, b) in enumerate(beams)])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_901": {
                "variable": {
                    "value": "selection",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_output_from_current_step() for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_901": {
                "variable": {
                    "value": "selection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_904": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[decoder_input, selection]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1085": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1182": {
                "tensors": {
                    "value": "[ht.tokenid for ht in reversed(list_of_hypotails)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_422": {
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_736": {
                "variable": {
                    "value": "cand_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(num_cands * cands.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "cands.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multinomial_1316": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(values, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(logprobs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_1351": {
                "input": {
                    "value": "sprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_464": {
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_truncate or 256",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_465": {
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/core/torch_ranker_agent.py": {
        "torch": {
            "arange_292": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.size(0)",
                            "Call"
                        ],
                        [
                            "scores.size(0)",
                            "Call"
                        ],
                        [
                            "batch.text_vec.size(0) if batch.text_vec is not None else batch.image.size(0)",
                            "IfExp"
                        ],
                        [
                            "batch.text_vec.size(0) if batch.text_vec is not None else batch.image.size(0)",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.new_empty(batchsize).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(batchsize, out=targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_214": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.opt['gpu']]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_224": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_902": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_task_candidates_path()",
                            "Call"
                        ],
                        [
                            "self.opt['model_file'] + '.cands-' + self.opt['task'] + '.cands'",
                            "BinOp"
                        ],
                        [
                            "self.get_task_candidates_path()",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cat_964": {
                "tensors": {
                    "value": "cand_encs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.fixed_candidate_encs",
                            "Attribute"
                        ],
                        [
                            "self.vocab_candidate_encs",
                            "Attribute"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_783": {
                "variable": {
                    "value": "self.vocab_candidate_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_926": {
                "obj": {
                    "value": "vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.load_candidates(vecs_path)",
                            "Call"
                        ],
                        [
                            "self.load_candidates(vecs_path)",
                            "Call"
                        ],
                        [
                            "self._make_candidate_vecs(cands)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_961": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_363": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ordering",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "label_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs['labels_vec']",
                            "Subscript"
                        ],
                        [
                            "label_vec[0:cand_vecs[i].size(1)]",
                            "Subscript"
                        ],
                        [
                            "label_vec[0:max_c_len]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/core/worlds.py": {
        "torch": {}
    },
    "parlai/nn/lr_scheduler.py": {
        "torch": {
            "ReduceLROnPlateau_330": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('lr_scheduler_decay', 0.5)",
                            "Call"
                        ]
                    ]
                },
                "patience": {
                    "value": "patience",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('lr_scheduler_patience', 3)",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StepLR_358": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "patience",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('lr_scheduler_patience', 3)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('lr_scheduler_decay', 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_403": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "self._invsqrt_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_441": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "T_max": {
                    "value": "max_lr_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('max_lr_steps', -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_476": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "self._linear_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_60": {
                "variable": {
                    "value": "self.warmup_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "self._warmup_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/scripts/extract_image_feature.py": {
        "torch": {
            "DataLoader_159": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp[1]",
                            "Subscript"
                        ],
                        [
                            "'DefaultDataset'",
                            "str"
                        ],
                        [
                            "get_dataset_class(opt)(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('batchsize', 1)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "nw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('numworkers', 1)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda batch: batch[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/scripts/multiprocessing_train.py": {
        "torch": {
            "set_device_70": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "init_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parlai/scripts/profile_train.py": {
        "torch": {
            "profile_66": {
                "use_cuda": {
                    "value": "opt['torch_cuda']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt.parse_args()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/utils/distributed.py": {
        "torch": {
            "broadcast_228": {
                "tensor": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_gather_list._buffer",
                            "Attribute"
                        ],
                        [
                            "sync_object._buffer",
                            "Attribute"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parlai/utils/fp16.py": {
        "torch": {
            "norm_54": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[0]",
                            "Subscript"
                        ],
                        [
                            "param_group['params']",
                            "Subscript"
                        ],
                        [
                            "self.params",
                            "Attribute"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nll_loss_39": {
                "input": {
                    "value": "F.log_softmax(scores, 1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_593": {
                "input": {
                    "value": "r_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(exp_avg_sq_row / exp_avg_sq_row.mean(dim=-1).unsqueeze(-1)).rsqrt_().unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_avg_sq_col.unsqueeze(-2).rsqrt()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_40": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__60": {
                "parameters": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(params)",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_62": {
                "input": {
                    "value": "sum((p.grad.data.norm() ** 2 for p in params if p.grad is not None))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_455": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_457": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_460": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_477": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_625": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data.float()",
                            "Call"
                        ],
                        [
                            "p.grad.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_627": {
                "variable": {
                    "value": "state[exp_avg_sq_row]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_630": {
                "variable": {
                    "value": "state[exp_avg_sq_col]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-2] + grad_shape[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_634": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data.float()",
                            "Call"
                        ],
                        [
                            "p.grad.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_668": {
                "input": {
                    "value": "exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad ** 2 + group['eps'][0]",
                            "BinOp"
                        ],
                        [
                            "exp_avg",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/utils/misc.py": {
        "torch": {}
    },
    "parlai/utils/testing.py": {
        "torch": {
            "split_97": {
                "variable": {
                    "value": "version",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parlai/utils/thread.py": {
        "torch": {
            "is_tensor_186": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.intern(v)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "parlai/utils/torch.py": {
        "torch": {
            "full_146": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(a, b, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "pad_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_188": {
                "variable": {
                    "value": "non_nuls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_idx[i, :] != null_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Tensor_154": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parlai/utils/typing.py": {
        "torch": {}
    },
    "projects/contrastive_learning/retrieval_models/MSN/DialogueDataset.py": {
        "torch": {}
    },
    "projects/contrastive_learning/retrieval_models/MSN/MSN.py": {
        "torch": {
            "ReLU_17": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "variable": {
                    "value": "Q_K_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q.bmm(K.permute(0, 2, 1)) / (torch.sqrt(dk) + episilon)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_69": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.linear1(X))",
                            "Call"
                        ],
                        [
                            "self.linear2(M)",
                            "Call"
                        ],
                        [
                            "torch.stack([M1, M2, M3, M4, M5, M6], dim=1)",
                            "Call"
                        ],
                        [
                            "self.get_Matching_Map(bU_embedding, bR_embedding)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_88": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(word_embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "_weight": {
                    "value": "torch.FloatTensor(word_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.W_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(200, 200, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(10, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.linear_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.linear_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.A1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(200, 200)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_105": {
                "variable": {
                    "value": "self.A2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(200, 200)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.A3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(200, 200)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.cnn_2d_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_109": {
                "variable": {
                    "value": "self.maxpooling1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.cnn_2d_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_112": {
                "variable": {
                    "value": "self.maxpooling2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.cnn_2d_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_115": {
                "variable": {
                    "value": "self.maxpooling3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.affine2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * 3 * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_119": {
                "variable": {
                    "value": "self.gru_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.gru_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.affine_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.gru_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_123": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_125": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_152": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor([200])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_153": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.einsum('blrd,ddh,bud->blruh', context, self.W_word, key) / dk",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_154": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blruh,hp->blrup",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(torch.einsum('blrd,ddh,bud->blruh', context, self.W_word, key) / dk)",
                            "Call"
                        ],
                        [
                            "torch.einsum('blruh,hp->blrup', A, self.v).squeeze(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_154": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[A.max(dim=2)[0], A.max(dim=3)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_word(a).squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_173": {
                "variable": {
                    "value": "M1",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bud,dd,brd->bur",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[A, B, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_201": {
                "variable": {
                    "value": "multi_match_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "multi_match_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(multi_match_score, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_227": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[M1, M2, M3, M4, M5, M6]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_281": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.affine_out(L)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_15": {
                "variable": {
                    "value": "self.layer_morm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_168": {
                "equation": {
                    "value": "bud,bd->bu",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.mean(dim=2)",
                            "Call"
                        ],
                        [
                            "context * match_score.unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_177": {
                "equation": {
                    "value": "bu,br->bur",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "A_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.norm(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_38": {
                "input": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([max(1.0, Q.size(-1))]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.Tensor([200])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_153": {
                "equation": {
                    "value": "blrd,ddh,bud->blruh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.mean(dim=2)",
                            "Call"
                        ],
                        [
                            "context * match_score.unsqueeze(dim=-1).unsqueeze(dim=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_152": {},
            "norm_169": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.mean(dim=1)",
                            "Call"
                        ],
                        [
                            "context[:, -hop_i:, :, :].mean(dim=1)",
                            "Call"
                        ],
                        [
                            "self.selector_transformer(key, key, key)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "projects/contrastive_learning/retrieval_models/MSN/NeuralNetwork.py": {
        "torch": {
            "manual_seed_11": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_12": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_25": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DialogueDataset(X_train_utterances, X_train_responses, y_train)",
                            "Call"
                        ],
                        [
                            "DialogueDataset(X_dev_utterances, X_dev_responses)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_50": {
                "variable": {
                    "value": "self.loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.l2_reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DialogueDataset(X_train_utterances, X_train_responses, y_train)",
                            "Call"
                        ],
                        [
                            "DialogueDataset(X_dev_utterances, X_dev_responses)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_145": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__72": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.init_clip_max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_67": {
                "f": {
                    "value": "self.args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "projects/contrastive_learning/retrieval_models/MSN/create_training_data.py": {
        "torch": {
            "full_99": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(a, b, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "pad_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.long",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "ret_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(built_vocab), embs.dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_109": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.long",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "projects/contrastive_learning/scripts/compute_score.py": {
        "torch": {
            "full_39": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(a, b, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "pad_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.long",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_49": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.long",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_distributed.py": {
        "torch": {}
    },
    "tests/test_metrics.py": {
        "torch": {}
    },
    "tests/test_threadutils.py": {
        "torch": {
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_torch_agent.py": {
        "torch": {}
    },
    "tests/test_utils.py": {
        "torch": {}
    }
}