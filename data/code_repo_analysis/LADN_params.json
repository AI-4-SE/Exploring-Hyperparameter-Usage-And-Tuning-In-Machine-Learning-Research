{
    "src/dataset.py": {
        "torch": {}
    },
    "src/model.py": {
        "torch": {
            "Adam_70": {
                "variable": {
                    "value": "self.disA_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.disA.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "self.disB_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.disB.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "self.disA2_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.disA2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "self.disB2_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.disB2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_74": {
                "variable": {
                    "value": "self.disContent_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.disContent.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_dcontent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr / 2.5",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "self.enc_c_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.enc_c.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "self.enc_a_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.enc_a.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "self.gen_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "L1Loss_89": {
                "variable": {
                    "value": "self.criterionL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_212": {
                "variable": {
                    "value": "transfer_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_213": {
                "variable": {
                    "value": "after_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_214": {
                "variable": {
                    "value": "blend_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_like_308": {
                "variable": {
                    "value": "self.z_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_attr_a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "input_attr_forA",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.z_attr_a, self.z_attr_a, self.z_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "input_attr_forB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.z_attr_b, self.z_attr_b, self.z_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_319": {
                "variable": {
                    "value": "(self.fake_A_encoded, self.fake_AA_encoded, self.fake_A_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_fakeA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gen.forward_a(*input_content_forA, input_attr_forA)",
                            "Call"
                        ],
                        [
                            "self.gen.forward_a(*input_content_forA, input_attr_forA)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_content_a[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_320": {
                "variable": {
                    "value": "(self.fake_B_encoded, self.fake_BB_encoded, self.fake_B_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_fakeB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gen.forward_b(*input_content_forB, input_attr_forB)",
                            "Call"
                        ],
                        [
                            "self.gen.forward_b(*input_content_forB, input_attr_forB)",
                            "Call"
                        ],
                        [
                            "self.gen.forward_b(*input_content_forB, input_attr_forB)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_content_a[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "self.image_display",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A_encoded[0:1].detach().cpu(), self.fake_B_encoded[0:1].detach().cpu(), self.fake_B_random[0:1].detach().cpu(), self.fake_AA_encoded[0:1].detach().cpu(), self.fake_A_recon[0:1].detach().cpu(), self.real_B_encoded[0:1].detach().cpu(), self.fake_A_encoded[0:1].detach().cpu(), self.fake_A_random[0:1].detach().cpu(), self.fake_BB_encoded[0:1].detach().cpu(), self.fake_B_recon[0:1].detach().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "self.image_display",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.image_display, self.real_C_encoded[0:1].detach().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_476": {
                "variable": {
                    "value": "transfer_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_477": {
                "variable": {
                    "value": "after_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_824": {
                "variable": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_825": {
                "variable": {
                    "value": "encoding_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(mu, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_830": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dir",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_831": {
                "variable": {
                    "value": "checkpoint_backup",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dir",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.backup_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_933": {
                "variable": {
                    "value": "row1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(images_a[0:1, :], images_b1[0:1, :], images_b2[0:1, :], images_a4[0:1, :], images_a3[0:1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_934": {
                "variable": {
                    "value": "row2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(images_b[0:1, :], images_a1[0:1, :], images_a2[0:1, :], images_b4[0:1, :], images_b3[0:1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_935": {
                "variable": {
                    "value": "row3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(images_c[0:1, :], torch.zeros_like(images_c[0:1, :]), torch.zeros_like(images_c[0:1, :]), torch.zeros_like(images_c[0:1, :]), torch.zeros_like(images_c[0:1, :]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_80": {
                "variable": {
                    "value": "self.disStyle_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.disStyle.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_dstyle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "variable"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_129": {
                "variable": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs_fake",
                            "variable"
                        ],
                        [
                            "outs_fake",
                            "variable"
                        ]
                    ]
                }
            },
            "sigmoid_130": {
                "variable": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_131": {
                "variable": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_real.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_fake.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_133": {
                "variable": {
                    "value": "ad_true_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(out_real.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_real.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_real.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(out_real).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_134": {
                "variable": {
                    "value": "ad_fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(out_fake).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__147": {
                "parameters": {
                    "value": "self.disContent.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_174": {
                "variable": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs_fake",
                            "variable"
                        ],
                        [
                            "outs_fake",
                            "variable"
                        ]
                    ]
                }
            },
            "sigmoid_175": {
                "variable": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_176": {
                "variable": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_real.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_fake.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_178": {
                "variable": {
                    "value": "ad_true_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(out_real.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_real.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_real.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(out_real).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_179": {
                "variable": {
                    "value": "ad_fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(out_fake).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__194": {
                "parameters": {
                    "value": "self.disStyle.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_240": {
                "variable": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs_fake",
                            "variable"
                        ],
                        [
                            "outs_fake",
                            "variable"
                        ]
                    ]
                }
            },
            "sigmoid_241": {
                "variable": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_242": {
                "variable": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_real.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_fake.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_244": {
                "variable": {
                    "value": "ad_true_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(out_real.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_real.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_real.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(out_real).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_245": {
                "variable": {
                    "value": "ad_fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(out_fake).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_354": {
                "variable": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs_fake",
                            "variable"
                        ],
                        [
                            "outs_fake",
                            "variable"
                        ]
                    ]
                }
            },
            "sigmoid_355": {
                "variable": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_356": {
                "variable": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_357": {
                "variable": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_358": {
                "variable": {
                    "value": "ad_fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(out_fake).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_359": {
                "variable": {
                    "value": "ad_true_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_b)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(out_real.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_real.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_real.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(out_real).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__408": {
                "parameters": {
                    "value": "self.disContent.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_443": {
                "variable": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs",
                            "variable"
                        ],
                        [
                            "outs",
                            "variable"
                        ]
                    ]
                }
            },
            "sigmoid_453": {
                "variable": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs_fake",
                            "variable"
                        ],
                        [
                            "outs_fake",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_like_454": {
                "variable": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_463": {
                "variable": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs",
                            "variable"
                        ],
                        [
                            "outs",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_464": {
                "variable": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs_fake.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_495": {
                "variable": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs_fake",
                            "variable"
                        ],
                        [
                            "outs_fake",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_like_496": {
                "variable": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_731": {
                "variable": {
                    "value": "self.z_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_attr_a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_773": {
                "variable": {
                    "value": "self.z_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_attr_a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_780": {
                "variable": {
                    "value": "input_attr_forA",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.z_attr_a, self.z_attr_a, self.z_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_781": {
                "variable": {
                    "value": "input_attr_forB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.z_attr_b, self.z_attr_b, self.z_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_784": {
                "variable": {
                    "value": "(self.fake_A_encoded, self.fake_AA_encoded, self.fake_A_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_fakeA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gen.forward_a(*input_content_forA, input_attr_forA)",
                            "Call"
                        ],
                        [
                            "self.gen.forward_a(*input_content_forA, input_attr_forA)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_content_a[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_785": {
                "variable": {
                    "value": "(self.fake_B_encoded, self.fake_BB_encoded, self.fake_B_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_fakeB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gen.forward_b(*input_content_forB, input_attr_forB)",
                            "Call"
                        ],
                        [
                            "self.gen.forward_b(*input_content_forB, input_attr_forB)",
                            "Call"
                        ],
                        [
                            "self.gen.forward_b(*input_content_forB, input_attr_forB)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_content_a[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_879": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_916": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'disA': self.disA.state_dict(), 'disA2': self.disA2.state_dict(), 'disB': self.disB.state_dict(), 'disB2': self.disB2.state_dict(), 'disContent': self.disContent.state_dict(), 'enc_c': self.enc_c.state_dict(), 'enc_a': self.enc_a.state_dict(), 'gen': self.gen.state_dict(), 'disA_opt': self.disA_opt.state_dict(), 'disA2_opt': self.disA2_opt.state_dict(), 'disB_opt': self.disB_opt.state_dict(), 'disB2_opt': self.disB2_opt.state_dict(), 'disContent_opt': self.disContent_opt.state_dict(), 'enc_c_opt': self.enc_c_opt.state_dict(), 'enc_a_opt': self.enc_a_opt.state_dict(), 'gen_opt': self.gen_opt.state_dict(), 'ep': ep, 'total_it': total_it}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_936": {
                "tensors": {
                    "value": "(row1, row2, row3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_15": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_16": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_311": {
                "tensors": {
                    "value": "(self.z_content_b[0], self.z_content_a[0], self.z_content_b[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_312": {
                "tensors": {
                    "value": "(self.z_content_b[1], self.z_content_a[1], self.z_content_b[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_313": {
                "tensors": {
                    "value": "(self.z_content_a[0], self.z_content_b[0], self.z_content_a[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_314": {
                "tensors": {
                    "value": "(self.z_content_a[1], self.z_content_b[1], self.z_content_a[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__416": {
                "parameters": {
                    "value": "self.disStyle.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_445": {
                "input": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all_half",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * torch.ones(outputs_fake.size(0)).to(self.backup_device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_455": {
                "input": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(outputs_fake).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones(outputs_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(outputs_fake).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_465": {
                "input": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(outputs_fake).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones(outputs_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(outputs_fake).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_497": {
                "input": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(outputs_fake).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones(outputs_fake.size(0)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(outputs_fake).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_537": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.broadcast_to(np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]]), (N, C, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_539": {
                "variable": {
                    "value": "transfer_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_540": {
                "variable": {
                    "value": "blend_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_541": {
                "variable": {
                    "value": "after_recon_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_542": {
                "variable": {
                    "value": "after_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_553": {
                "variable": {
                    "value": "transfer_crop_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transfer_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((N, C, H, W)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.empty((N, C, H, W)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.empty((N, C, H, W)).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.broadcast_to(np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]]), (N, C, 3, 3)), dtype=torch.float32).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(np.broadcast_to(np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]]), (N, C, 3, 3)), dtype=torch.float32).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_554": {
                "variable": {
                    "value": "blend_crop_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "blend_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((N, C, H, W)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.empty((N, C, H, W)).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.broadcast_to(np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]]), (N, C, 3, 3)), dtype=torch.float32).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(np.broadcast_to(np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]]), (N, C, 3, 3)), dtype=torch.float32).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_555": {
                "variable": {
                    "value": "after_recon_crop_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "after_recon_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((N, C, H, W)).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.broadcast_to(np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]]), (N, C, 3, 3)), dtype=torch.float32).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(np.broadcast_to(np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]]), (N, C, 3, 3)), dtype=torch.float32).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_556": {
                "variable": {
                    "value": "after_crop_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "after_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((N, C, H, W)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.empty((N, C, H, W)).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.empty((N, C, H, W)).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.broadcast_to(np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]]), (N, C, 3, 3)), dtype=torch.float32).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(np.broadcast_to(np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]]), (N, C, 3, 3)), dtype=torch.float32).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_572": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.broadcast_to(np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]]), (N, C, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_574": {
                "variable": {
                    "value": "demakeup_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_580": {
                "variable": {
                    "value": "demakeup_crop_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "demakeup_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((N, C, H, W)).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.broadcast_to(np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]]), (N, C, 3, 3)), dtype=torch.float32).to(self.backup_device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(np.broadcast_to(np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]]), (N, C, 3, 3)), dtype=torch.float32).to(self.backup_device)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_581": {
                "variable": {
                    "value": "demakeup_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "demakeup_crop_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.conv2d(demakeup_crop, kernel, bias=None, stride=1, padding=1, dilation=1, groups=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_673": {
                "input": {
                    "value": "torch.abs(self.z_attr_random_a - self.z_random)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_674": {
                "input": {
                    "value": "torch.abs(self.z_attr_random_b - self.z_random)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_705": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_739": {
                "variable": {
                    "value": "input_attr_forB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_attr, z_attr, self.z_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_741": {
                "variable": {
                    "value": "(self.fake_B_encoded, self.fake_BB_encoded, self.fake_B_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_fakeB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gen.forward_b(*input_content_forB, input_attr_forB)",
                            "Call"
                        ],
                        [
                            "self.gen.forward_b(*input_content_forB, input_attr_forB)",
                            "Call"
                        ],
                        [
                            "self.gen.forward_b(*input_content_forB, input_attr_forB)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_content_a[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_747": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__267": {
                "parameters": {
                    "value": "getattr(self, 'dis' + local_part.capitalize()).parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__274": {
                "parameters": {
                    "value": "getattr(self, 'dis' + local_part.capitalize()).parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_444": {
                "*size": {
                    "value": "outputs_fake.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_673": {
                "input": {
                    "value": "self.z_attr_random_a - self.z_random",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_674": {
                "input": {
                    "value": "self.z_attr_random_b - self.z_random",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_733": {
                "tensors": {
                    "value": "(self.z_content_a[0], self.z_content_b[0], self.z_content_a[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_734": {
                "tensors": {
                    "value": "(self.z_content_a[1], self.z_content_b[1], self.z_content_a[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_776": {
                "tensors": {
                    "value": "(self.z_content_b[0], self.z_content_a[0], self.z_content_b[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_777": {
                "tensors": {
                    "value": "(self.z_content_b[1], self.z_content_a[1], self.z_content_b[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_778": {
                "tensors": {
                    "value": "(self.z_content_a[0], self.z_content_b[0], self.z_content_a[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_779": {
                "tensors": {
                    "value": "(self.z_content_a[1], self.z_content_b[1], self.z_content_a[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_935": {
                "input": {
                    "value": "images_c[0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_87": {
                "params": {
                    "value": "getattr(self, 'dis' + local_part.capitalize()).parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_dlocal_style",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "variable"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__426": {
                "parameters": {
                    "value": "getattr(self, 'dis' + local_part.capitalize()).parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__433": {
                "parameters": {
                    "value": "getattr(self, 'dis' + local_part.capitalize()).parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/networks.py": {
        "torch": {
            "cat_36": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_a, image_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_66": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_67": {
                "variable": {
                    "value": "self.Diss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.conv1_e1_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "input_dim_a",
                            "Method Argument"
                        ],
                        [
                            "input_dim_a",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_129": {
                "variable": {
                    "value": "self.relu_e1_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.conv2_e1_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_131": {
                "variable": {
                    "value": "self.bn_e1_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "self.conv1_e1_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "input_dim_b",
                            "Method Argument"
                        ],
                        [
                            "input_dim_b",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_134": {
                "variable": {
                    "value": "self.relu_e1_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv2_e1_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "variable": {
                    "value": "self.bn_e1_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "variable": {
                    "value": "self.conv1_e2_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "input_dim_a",
                            "Method Argument"
                        ],
                        [
                            "input_dim_a",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_165": {
                "variable": {
                    "value": "self.relu_e2_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "variable": {
                    "value": "self.conv2_e2_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_167": {
                "variable": {
                    "value": "self.bn_e2_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "variable": {
                    "value": "self.conv1_e2_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "input_dim_b",
                            "Method Argument"
                        ],
                        [
                            "input_dim_b",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_170": {
                "variable": {
                    "value": "self.relu_e2_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "variable": {
                    "value": "self.conv2_e2_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_172": {
                "variable": {
                    "value": "self.bn_e2_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_206": {
                "variable": {
                    "value": "self.relu1_m_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_207": {
                "variable": {
                    "value": "self.conv_m_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_208": {
                "variable": {
                    "value": "self.bn_m_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_209": {
                "variable": {
                    "value": "self.relu2_m_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_211": {
                "variable": {
                    "value": "self.relu1_d_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "variable": {
                    "value": "self.conv1_d_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 4 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_213": {
                "variable": {
                    "value": "self.bn1_d_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_214": {
                "variable": {
                    "value": "self.relu2_d_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "variable": {
                    "value": "self.conv2_d_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_217": {
                "variable": {
                    "value": "self.bn2_d_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_218": {
                "variable": {
                    "value": "self.relu3_d_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_220": {
                "variable": {
                    "value": "self.conv3_d_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_221": {
                "variable": {
                    "value": "self.bn3_d_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_222": {
                "variable": {
                    "value": "self.relu4_d_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "variable": {
                    "value": "self.conv4_d_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dim_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim_a",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_224": {
                "variable": {
                    "value": "self.tanh_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_227": {
                "variable": {
                    "value": "self.relu1_m_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_228": {
                "variable": {
                    "value": "self.conv_m_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_229": {
                "variable": {
                    "value": "self.bn_m_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_230": {
                "variable": {
                    "value": "self.relu2_m_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "variable": {
                    "value": "self.relu1_d_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "variable": {
                    "value": "self.conv1_d_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 4 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_234": {
                "variable": {
                    "value": "self.bn1_d_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_235": {
                "variable": {
                    "value": "self.relu2_d_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "variable": {
                    "value": "self.conv2_d_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_238": {
                "variable": {
                    "value": "self.bn2_d_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_239": {
                "variable": {
                    "value": "self.relu3_d_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_241": {
                "variable": {
                    "value": "self.conv3_d_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_242": {
                "variable": {
                    "value": "self.bn3_d_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_243": {
                "variable": {
                    "value": "self.relu4_d_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "variable": {
                    "value": "self.conv4_d_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dim_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim_b",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_245": {
                "variable": {
                    "value": "self.tanh_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "m_1_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e1_2_B, e2_2_A]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "d_0_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res_layer_A, m_2_A]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "d_1_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d_1_A, e1_2_B]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "d_2_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d_2_A, e1_1_B]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "m_1_B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e1_2_A, e2_2_B]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "d_0_B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res_layer_B, m_2_B]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "d_1_B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d_1_B, e1_2_A]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "d_2_B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d_2_B, e1_1_A]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LambdaLR_311": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda_rule",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "cur_ep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_365": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_372": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_373": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_374": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_375": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_376": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "StepLR_313": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opts.n_ep_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "cur_ep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_315": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_357": {
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_364": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_30": {
                "module": {
                    "value": "nn.Conv2d(tch, 1, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "ch",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_79": {
                "module": {
                    "value": "nn.Conv2d(tch, 1, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "ch",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_109": {
                "module": {
                    "value": "nn.Conv2d(tch, 1, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "ch",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_359": {
                "module": {
                    "value": "nn.Conv2d(inplanes, outplanes, kernel_size=kernel_size, stride=stride, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_361": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_363": {
                "num_features": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "ch",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "ch",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "ch",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_359": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/options.py": {
        "torch": {
            "set_device_85": {
                "device": {
                    "value": "self.opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/run.py": {
        "torch": {
            "DataLoader_35": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_makeup(opts)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opts.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images_b1, images_b2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_78": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_95": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_108": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}