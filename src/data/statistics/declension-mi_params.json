{
    "src/h02_learn/gp.py": {
        "sklearn": {
            "GaussianProcessRegressor_147": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "('gp_params', 98)",
                    "type": "e",
                    "possible_values": []
                }
            },
            "Matern_149": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianProcessRegressor_150": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gp.kernels.Matern()",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_restarts_optimizer": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "normalize_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/h02_learn/model/context.py": {
        "sklearn": {
            "PCA_131": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.pca_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_25": {
                "variable": {
                    "value": "hidden_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.init_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "hidden_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(self.nlayers, 1, self.hidden_size).uniform_(-0.01, 0.01)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(self.nlayers, 1, self.hidden_size).uniform_(-0.01, 0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_27": {
                "variable": {
                    "value": "hidden_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.init_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "hidden_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(self.nlayers, 1, self.hidden_size).uniform_(-0.01, 0.01)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(self.nlayers, 1, self.hidden_size).uniform_(-0.01, 0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_55": {
                "variable": {
                    "value": "self.c_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.c_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.h_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.h_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.c_embeddings[i](idx).reshape(bsz, self.nlayers, -1).transpose(0, 1).contiguous() for (i, idx) in enumerate(idxs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.h_embeddings[i](idx).reshape(bsz, self.nlayers, -1).transpose(0, 1).contiguous() for (i, idx) in enumerate(idxs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(hs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ParameterList_92": {
                "variable": {
                    "value": "self.id_to_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.id_to_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pca_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_141": {
                "variable": {
                    "value": "self.c_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "word2vec_pca.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word2vec_pca.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_144": {
                "variable": {
                    "value": "self.h_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "word2vec_pca.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word2vec_pca.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.c_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "word2vec_pca.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * self.nlayers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.h_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "word2vec_pca.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * self.nlayers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "x_c_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[control_c_embs, w2v_c_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "x_h_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[control_h_embs, w2v_h_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_90": {
                "variable": {
                    "value": "vec_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_52": {
                "num_embeddings": {
                    "value": "iter_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size_last * nlayers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_53": {
                "num_embeddings": {
                    "value": "iter_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size_last * nlayers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_142": {
                "data": {
                    "value": "torch.from_numpy(word2vec_pca)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "data": {
                    "value": "torch.from_numpy(word2vec_pca)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_48": {
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iter_sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.hidden_size_each * nlayers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_49": {
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iter_sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.hidden_size_each * nlayers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_91": {
                "data": {
                    "value": "vec_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(vec).long()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "ndarray": {
                    "value": "word2vec_pca",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pca_word2vec_embedding()",
                            "Call"
                        ],
                        [
                            "np.zeros((self.max_id + 1, self.pca_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_145": {
                "ndarray": {
                    "value": "word2vec_pca",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pca_word2vec_embedding()",
                            "Call"
                        ],
                        [
                            "np.zeros((self.max_id + 1, self.pca_size))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/h02_learn/model/base.py": {
        "torch": {
            "save_54": {
                "obj": {
                    "value": "{'kwargs': self.get_args(), 'model_state_dict': self.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_name(path, context, suffix)",
                            "Call"
                        ],
                        [
                            "cls.get_name(path, context, suffix)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_82": {
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_name(path, context, suffix)",
                            "Call"
                        ],
                        [
                            "cls.get_name(path, context, suffix)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "constants.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/h02_learn/model/lstm.py": {
        "torch": {
            "Embedding_16": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_17": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout if nlayers > 1 else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/h02_learn/model/mlp.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.final_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_26": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.max_id + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.word2vec_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "x_full",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_emb, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "*mlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "data": {
                    "value": "torch.from_numpy(word2vec)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "ndarray": {
                    "value": "word2vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((self.max_id + 1, self.word2vec_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "src_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.word2vec_size + self.hidden_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "tgt_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "p": {
                    "value": "self.dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/h02_learn/train.py": {
        "torch": {
            "from_numpy_63": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[:, :-2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[:, -2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_69": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_115": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_336": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_337": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(x, y, idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_y.size(0)",
                            "Call"
                        ],
                        [
                            "batch_y.size(0)",
                            "Call"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if mode == 'train' else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softmax_129": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch_x, batch_idx)",
                            "Call"
                        ],
                        [
                            "model(batch_x, batch_idx)",
                            "Call"
                        ],
                        [
                            "model_func(model, batch_x, batch_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_129": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "batch_y.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/constants.py": {
        "torch": {
            "device_4": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/utils.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "77",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}