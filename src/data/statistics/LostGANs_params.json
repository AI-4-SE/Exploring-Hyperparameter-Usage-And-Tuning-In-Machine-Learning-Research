{
    "data/cocostuff_loader.py": {
        "torch": {
            "cat_440": {
                "variable": {
                    "value": "all_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(all_imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_441": {
                "variable": {
                    "value": "all_objs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_objs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(all_objs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_442": {
                "variable": {
                    "value": "all_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(all_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_443": {
                "variable": {
                    "value": "all_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(all_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_444": {
                "variable": {
                    "value": "all_triples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_triples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(all_triples)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_445": {
                "variable": {
                    "value": "all_obj_to_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_obj_to_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(all_obj_to_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_446": {
                "variable": {
                    "value": "all_triple_to_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_triple_to_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(all_triple_to_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_499": {
                "variable": {
                    "value": "imgs_de",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs_de",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs_de, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "data/vg.py": {
        "torch": {
            "cat_219": {
                "variable": {
                    "value": "all_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(all_imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_220": {
                "variable": {
                    "value": "all_objs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_objs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(all_objs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_221": {
                "variable": {
                    "value": "all_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(all_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_222": {
                "variable": {
                    "value": "all_triples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_triples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(all_triples)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_223": {
                "variable": {
                    "value": "all_obj_to_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_obj_to_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(all_obj_to_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_224": {
                "variable": {
                    "value": "all_triple_to_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_triple_to_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(all_triple_to_img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/mask_regression.py": {
        "torch": {
            "spectral_norm_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(obj_feat, 128 * 4 * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv2",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv3",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_64": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(obj_feat, 256 * 4 * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv2",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv3",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_95": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 128, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ],
                        [
                            "self.fc(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.conv1(x.view(b * num_o, 256, 4, 4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=16, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, num_o, 16, 16)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "obj_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "spectral_norm_19": {
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_25": {
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_31": {
                "module": {
                    "value": "nn.Conv2d(128, 128, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_34": {
                "module": {
                    "value": "nn.Conv2d(128, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "obj_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "obj_feat.view(b * num_o, -1)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "256 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "spectral_norm_66": {
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_67": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_72": {
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_73": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_78": {
                "module": {
                    "value": "nn.Conv2d(256, 256, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_79": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_81": {
                "module": {
                    "value": "nn.Conv2d(256, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/norm_module.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "batch_norm_33": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_reshaped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.contiguous().view(1, b * c, *x.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.running_mean.repeat(b)",
                            "Call"
                        ],
                        [
                            "self.running_mean.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.running_var.repeat(b)",
                            "Call"
                        ],
                        [
                            "self.running_var.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "weight.unsqueeze(-1).unsqueeze(-1).expand(size)",
                            "Call"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "bias.unsqueeze(-1).unsqueeze(-1).expand(size)",
                            "Call"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1), dim=1, keepdim=False) / (torch.sum(bbox.unsqueeze(2), dim=1, keepdim=False) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "batch_norm_84": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "batch_norm_126": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_133": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_158": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_w, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_159": {
                "variable": {
                    "value": "self.bias_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_w, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_176": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.interpolate(bbox, size=(h, w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_52": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "in_features": {
                    "value": "num_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "num_w",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "bbox.unsqueeze(2) * bias.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_139": {
                "input": {
                    "value": "bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "bbox.unsqueeze(2) * weight.unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_183": {
                "input": {
                    "value": "bbox.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/rcnn_discriminator.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "spectral_norm_28": {
                "variable": {
                    "value": "self.l7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_37": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_38": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_55": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "obj_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_feat_l, obj_feat_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_l, y_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_75": {
                "variable": {
                    "value": "obj_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_92": {
                "variable": {
                    "value": "self.l_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_98": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 8, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_99": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_116": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_123": {
                "variable": {
                    "value": "obj_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "spectral_norm_149": {
                "variable": {
                    "value": "self.l8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_158": {
                "variable": {
                    "value": "self.l_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ch * 16, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_159": {
                "variable": {
                    "value": "self.l_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(num_classes, ch * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_178": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "obj_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_feat_l, obj_feat_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_l, y_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_198": {
                "variable": {
                    "value": "obj_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj5(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.roi_align(x1, bbox)",
                            "Call"
                        ],
                        [
                            "self.block_obj4(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat([obj_feat_l, obj_feat_s], dim=0)",
                            "Call"
                        ],
                        [
                            "self.block_obj6(obj_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(obj_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(obj_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_211": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_233": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_264": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_287": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_310": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx, bbox.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_12": {
                "module": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_219": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_224": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_244": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_38": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "81",
                            "MethodArgument"
                        ],
                        [
                            "81",
                            "MethodArgument"
                        ],
                        [
                            "81",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "ch * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_99": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "81",
                            "MethodArgument"
                        ],
                        [
                            "81",
                            "MethodArgument"
                        ],
                        [
                            "81",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "in_features": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_159": {
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "81",
                            "MethodArgument"
                        ],
                        [
                            "81",
                            "MethodArgument"
                        ],
                        [
                            "81",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "ch * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_200": {
                "input": {
                    "value": "self.l_y(y).view(b, -1) * obj_feat.view(b, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_251": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x2)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x1)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x2)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.activation(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.conv1(self.activation(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(self.activation(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet_generator_v1.py": {
        "torch": {
            "Conv2d_185": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_14": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "latent_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_78": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_81": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SynchronizedBatchNorm2d(ch)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "latent_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_50": {
                "variable": {
                    "value": "z_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "label_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embedding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.label_embedding(y)",
                            "Call"
                        ],
                        [
                            "label_embedding.view(b * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_embedding, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_121": {
                "variable": {
                    "value": "z_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_166": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_187": {
                "module": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.res1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res3(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res4(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.res5(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet_generator_v2.py": {
        "torch": {
            "Conv2d_285": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.residual(in_feat, w, bbox) + self.shortcut(in_feat)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_313": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_314": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_16": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_19": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm(ch)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.alpha1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.alpha2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.alpha3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.alpha4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_40": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "latent_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_72": {
                "variable": {
                    "value": "alpha1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha1).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "alpha1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_80": {
                "variable": {
                    "value": "alpha2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha2).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "variable": {
                    "value": "alpha2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_88": {
                "variable": {
                    "value": "alpha3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha3).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_88": {
                "variable": {
                    "value": "alpha3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_96": {
                "variable": {
                    "value": "alpha4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha4).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_96": {
                "variable": {
                    "value": "alpha4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_117": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "180",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_120": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(z_dim, 4 * 4 * 16 * ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm(ch)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mapping",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_137": {
                "variable": {
                    "value": "self.alpha1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_138": {
                "variable": {
                    "value": "self.alpha2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "self.alpha3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_140": {
                "variable": {
                    "value": "self.alpha4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_141": {
                "variable": {
                    "value": "self.alpha5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 184, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_142": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "latent_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "latent_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_180": {
                "variable": {
                    "value": "alpha1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha1).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_180": {
                "variable": {
                    "value": "alpha1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_189": {
                "variable": {
                    "value": "alpha2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha2).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_189": {
                "variable": {
                    "value": "alpha2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_198": {
                "variable": {
                    "value": "alpha3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha3).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_198": {
                "variable": {
                    "value": "alpha3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_207": {
                "variable": {
                    "value": "alpha4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha4).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_207": {
                "variable": {
                    "value": "alpha4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_216": {
                "variable": {
                    "value": "alpha5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(self.alpha5).expand(b, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(b, o, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_216": {
                "variable": {
                    "value": "alpha5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_243": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_297": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "index.expand(expanse)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_335": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(features, out_features, size) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_336": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features + len(sizes) * out_features, out_features, kernel_size=3, padding=1, dilation=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_344": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(size, size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_345": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_346": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_59": {
                "variable": {
                    "value": "z_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_163": {
                "variable": {
                    "value": "z_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_261": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_287": {
                "module": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_feat, out_feat, kernel_size, stride, pad)",
                            "Call"
                        ],
                        [
                            "nn.Conv2d(features, out_features, kernel_size=1, bias=False)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_347": {
                "*args": {
                    "value": "prior",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "input": {
                    "value": "seman_bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_71": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_79": {
                "input": {
                    "value": "seman_bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_79": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "input": {
                    "value": "seman_bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_87": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "input": {
                    "value": "seman_bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_95": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * 16 * ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_137": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "184",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_179": {
                "input": {
                    "value": "seman_bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_179": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_187": {
                "input": {
                    "value": "seman_bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_187": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_196": {
                "input": {
                    "value": "seman_bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_196": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_205": {
                "input": {
                    "value": "seman_bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_205": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_214": {
                "input": {
                    "value": "seman_bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(stage_mask, dim=1, index=y.view(b, o, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(seman_bbox) * F.interpolate(bbox_mask_, size=(hh, ww), mode='nearest')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_214": {
                "input": {
                    "value": "bbox_mask_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bbox_mask(z, bbox, 64, 64)",
                            "Call"
                        ],
                        [
                            "bbox_mask(z, bbox, 128, 128)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PSPModule(out_ch, 100)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_ch, 100, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_271": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z_im).view(b, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.final(x)",
                            "Call"
                        ],
                        [
                            "in_feat",
                            "Name"
                        ],
                        [
                            "self.b1(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.b2(x, w, bbox)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_337": {
                "in_channels": {
                    "value": "features + len(sizes) * out_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_340": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_352": {
                "tensors": {
                    "value": "priors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[F.interpolate(input=stage(feats), size=(h, w), mode='bilinear', align_corners=True) for stage in self.stages] + [feats]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_73": {
                "input": {
                    "value": "bmask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_81": {
                "input": {
                    "value": "bmask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_89": {
                "input": {
                    "value": "bmask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "input": {
                    "value": "bmask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_181": {
                "input": {
                    "value": "bmask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_190": {
                "input": {
                    "value": "bmask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_199": {
                "input": {
                    "value": "bmask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_208": {
                "input": {
                    "value": "bmask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_217": {
                "input": {
                    "value": "bmask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ],
                        [
                            "self.mask_regress(w, bbox)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(hh, ww)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_351": {
                "input": {
                    "value": "stage(feats)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_249": {
                "in_channels": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "184",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_251": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_254": {
                "in_channels": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "184",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/roi_layers/__init__.py": {
        "torch": {}
    },
    "model/roi_layers/roi_align.py": {
        "torch": {}
    },
    "model/roi_layers/roi_pool.py": {
        "torch": {}
    },
    "model/sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_51": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/sync_batchnorm/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "model/sync_batchnorm/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CocoSceneGraphDataset(image_dir='./datasets/coco/val2017/', instances_json='./datasets/coco/annotations/instances_val2017.json', stuff_json='./datasets/coco/annotations/stuff_val2017.json', stuff_only=True, image_size=(img_size, img_size), left_right_flip=False)",
                            "Call"
                        ],
                        [
                            "VgSceneGraphDataset(vocab=vocab, h5_path='./datasets/vg/val.h5', image_dir='./datasets/vg/images/', image_size=(128, 128), left_right_flip=False, max_objects=30)",
                            "Call"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_44": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "z_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=num_o, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "z_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truncted_random(num_o=1, thres=thres)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_48": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_parameters + [{'params': [value], 'lr': g_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dis_parameters + [{'params': [value], 'lr': d_lr}]",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_91": {
                "variable": {
                    "value": "vgg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vgg_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "VGGLoss()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vgg_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_92": {
                "variable": {
                    "value": "l1_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.L1Loss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_59": {
                "variable": {
                    "value": "netD",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CombineDiscriminator128(num_classes=num_classes).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_105": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "d_loss_robj",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_108": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8 if args.dataset == 'coco' else 31",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "mean_111": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_112": {
                "variable": {
                    "value": "d_loss_fobj",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_path, 'model/', 'G_%d.pth' % (epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/bilinear.py": {
        "torch": {
            "affine_grid_12": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "transformation_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([scale_x.unsqueeze(-1), zeros, t_x.unsqueeze(-1), zeros, scale_y.unsqueeze(-1), t_y.unsqueeze(-1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size(size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_13": {
                "variable": {
                    "value": "out_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.affine_grid(transformation_matrix, torch.Size(size))",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "_boxes_to_grid(boxes.view(b * num_o, -1), H, W).float().cuda(device=masks.device)",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "grid.mul(2).sub(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_68": {
                "variable": {
                    "value": "start_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_70": {
                "variable": {
                    "value": "end_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "grid_sample_156": {
                "variable": {
                    "value": "sampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "masks.float().view(b * num_o, 1, M, M)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.affine_grid(transformation_matrix, torch.Size(size))",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "_boxes_to_grid(boxes.view(b * num_o, -1), H, W).float().cuda(device=masks.device)",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "grid.mul(2).sub(1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_178": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "H",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_179": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "transformation_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale_x.unsqueeze(-1), zeros, t_x.unsqueeze(-1), zeros, scale_y.unsqueeze(-1), t_y.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_47": {
                "input": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.affine_grid(transformation_matrix, torch.Size(size))",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "_boxes_to_grid(boxes.view(b * num_o, -1), H, W).float().cuda(device=masks.device)",
                            "Call"
                        ],
                        [
                            "torch.stack([X, Y], dim=3)",
                            "Call"
                        ],
                        [
                            "grid.mul(2).sub(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/util.py": {
        "torch": {
            "cat_36": {
                "tensors": {
                    "value": "crop_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_86": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_27": {
                "variable": {
                    "value": "crop_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crop_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image[idx:idx + 1, :, int(imsize * bbox[idx, odx, 1]):int(imsize * (bbox[idx, odx, 1] + bbox[idx, odx, 3])), int(imsize * bbox[idx, odx, 0]):int(imsize * (bbox[idx, odx, 0] + bbox[idx, odx, 2]))]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(crop_image, size=(cropsize, cropsize), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(cropsize, cropsize)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "rlabel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_23": {
                "input": {
                    "value": "bbox[idx, odx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}