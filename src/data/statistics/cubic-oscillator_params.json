{
    "utils.py": {
        "tensorflow": {
            "matmul_97": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_99": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, b)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1 / 8, 3 / 8, 3 / 8, 1 / 8]",
                            "List"
                        ],
                        [
                            "[1]",
                            "List"
                        ],
                        [
                            "[0, 1]",
                            "List"
                        ],
                        [
                            "[1 / 2, 1 / 2]",
                            "List"
                        ],
                        [
                            "[1 / 4, 3 / 4]",
                            "List"
                        ],
                        [
                            "[1 / 6, 2 / 3, 1 / 6]",
                            "List"
                        ],
                        [
                            "[1 / 6, 1 / 3, 1 / 3, 1 / 6]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_188": {
                "variable": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.cast(N_hat, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_218": {
                "variable": {
                    "value": "Y_0",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Y_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_220": {
                "variable": {
                    "value": "T_0",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "T_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_234": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "h",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_243": {
                "variable": {
                    "value": "X_0",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "Y_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, None], name='Y_0')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.slice(N, [0, num_dt], [n, m - 2 * num_dt])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_270": {
                "variable": {
                    "value": "forward_fidelity",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[w * tf.losses.mean_squared_error(true, pred) for (w, true, pred) in zip(output_weights, true_forward_Y, pred_forward_Y)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_sum_273": {
                "variable": {
                    "value": "backward_fidelity",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[w * tf.losses.mean_squared_error(true, pred) for (w, true, pred) in zip(output_weights, true_backward_Y, pred_backward_Y)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_276": {
                "variable": {
                    "value": "fidelity",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "forward_fidelity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum([w * tf.losses.mean_squared_error(true, pred) for (w, true, pred) in zip(output_weights, true_forward_Y, pred_forward_Y)])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "backward_fidelity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum([w * tf.losses.mean_squared_error(true, pred) for (w, true, pred) in zip(output_weights, true_backward_Y, pred_backward_Y)])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_280": {
                "variable": {
                    "value": "weights_regularizer",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.nn.l2_loss(W) for W in weights]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "l2_loss_283": {
                "variable": {
                    "value": "noise_regularizer",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('N', initializer=tf.cast(N_hat, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_286": {
                "variable": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fidelity + beta * weights_regularizer + gamma * noise_regularizer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_68": {
                "inputs": {
                    "value": "[x] + [h * b[j] * K[j] for j in range(steps)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_105": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_243": {
                "input_": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('N', initializer=tf.cast(N_hat, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, num_dt]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[n, m - 2 * num_dt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_181": {
                "name": {
                    "value": "'W' + str(j)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[layer_sizes[j], layer_sizes[j - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_184": {
                "name": {
                    "value": "'b' + str(j)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[layer_sizes[j], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_188": {
                "x": {
                    "value": "N_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Y - X_smooth",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_230": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Y + str(j + 1) + _true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_231": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Yn + str(j + 1) + _true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_259": {
                "input_": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('N', initializer=tf.cast(N_hat, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, num_dt + 1 + j]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[n, m - 2 * num_dt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_260": {
                "input_": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('N', initializer=tf.cast(N_hat, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, num_dt - 1 - j]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[n, m - 2 * num_dt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_280": {
                "t": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "mean_squared_error_270": {
                "y_true": {
                    "value": "true",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "mean_squared_error_273": {
                "y_true": {
                    "value": "true",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "add_n_58": {
                "inputs": {
                    "value": "[x] + [h * A[i][j] * K[j] for j in range(i) if A[i][j] != 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_64": {
                "inputs": {
                    "value": "[x] + [h * A[i][j] * K[j] for j in range(i) if A[i][j] != 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils_keras.py": {
        "tensorflow": {
            "add_n_72": {
                "inputs": {
                    "value": "[x] + [h * b[j] * k[j] for j in range(steps)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_173": {
                "variable": {
                    "value": "X_0",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "Y_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Y[num_dt:m - num_dt, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.slice(N, [num_dt, 0], [m - 2 * num_dt, n])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_199": {
                "variable": {
                    "value": "forward_fidelity",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[w * tf.losses.mean_squared_error(true, pred) for (w, true, pred) in zip(output_weights, true_forward_Y, pred_forward_Y)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_sum_202": {
                "variable": {
                    "value": "backward_fidelity",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[w * tf.losses.mean_squared_error(true, pred) for (w, true, pred) in zip(output_weights, true_backward_Y, pred_backward_Y)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_205": {
                "variable": {
                    "value": "fidelity",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "forward_fidelity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum([w * tf.losses.mean_squared_error(true, pred) for (w, true, pred) in zip(output_weights, true_forward_Y, pred_forward_Y)])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "backward_fidelity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum([w * tf.losses.mean_squared_error(true, pred) for (w, true, pred) in zip(output_weights, true_backward_Y, pred_backward_Y)])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_213": {
                "variable": {
                    "value": "weights_regularizer",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.nn.l2_loss(W) for W in weights]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "l2_loss_214": {
                "variable": {
                    "value": "noise_regularizer",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K.variable(N_init, dtype=tf.float32, name='N', **N_kwargs)",
                            "Call"
                        ],
                        [
                            "self.N_variable",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_216": {
                "variable": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fidelity + gamma * noise_regularizer + beta * weights_regularizer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_133": {
                "name": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_156": {
                "name": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_173": {
                "input_": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K.variable(N_init, dtype=tf.float32, name='N', **N_kwargs)",
                            "Call"
                        ],
                        [
                            "self.N_variable",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[num_dt, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[m - 2 * num_dt, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_63": {
                "inputs": {
                    "value": "[x] + [h * A[i][j] * k[j] for j in range(i) if A[i][j] != 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_188": {
                "input_": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K.variable(N_init, dtype=tf.float32, name='N', **N_kwargs)",
                            "Call"
                        ],
                        [
                            "self.N_variable",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[num_dt + 1 + j, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[m - 2 * num_dt, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_189": {
                "input_": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K.variable(N_init, dtype=tf.float32, name='N', **N_kwargs)",
                            "Call"
                        ],
                        [
                            "self.N_variable",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[num_dt - 1 - j, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[m - 2 * num_dt, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_213": {
                "t": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "add_n_68": {
                "inputs": {
                    "value": "[x] + [h * A[i][j] * k[j] for j in range(i) if A[i][j] != 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_squared_error_199": {
                "y_true": {
                    "value": "true",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "mean_squared_error_202": {
                "y_true": {
                    "value": "true",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    }
}