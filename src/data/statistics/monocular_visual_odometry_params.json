{
    "motion_detection.py": {
        "sklearn": {
            "StandardScaler_51": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_53": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DBSCAN_76": {
                "variable": {
                    "value": "clustering",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "config['t_color']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "metric": {
                    "value": "lab_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GaussianMixture_192": {
                "variable": {
                    "value": "fg_gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "tol": {
                    "value": "config['C']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GaussianMixture_193": {
                "variable": {
                    "value": "bg_gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "tol": {
                    "value": "config['C']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_20": {
                "variable": {
                    "value": "img_1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(img_1).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "images[0, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_20": {
                "variable": {
                    "value": "img_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "variable": {
                    "value": "img_2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(img_2).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "images[1, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_21": {
                "variable": {
                    "value": "img_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_23": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_1, img_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataParallel_55": {
                "variable": {
                    "value": "optical_flow_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "RAFT(args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_52": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_56": {
                "f": {
                    "value": "args.optical_flow_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/alt_cuda_corr/setup.py": {
        "torch": {}
    },
    "models/raft/corr.py": {
        "torch": {
            "cat_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_pyramid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fmap1.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "fmap2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmap2.view(batch, dim, ht * wd)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(fmap2, 2, stride=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_89": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "corr_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_26": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CorrBlock.corr(fmap1, fmap2)",
                            "Call"
                        ],
                        [
                            "corr.reshape(batch * h1 * w1, dim, h2, w2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(corr, 2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.corr_pyramid[i]",
                            "Subscript"
                        ],
                        [
                            "bilinear_sampler(corr, coords_lvl)",
                            "Call"
                        ],
                        [
                            "corr.view(batch, h1, w1, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(fmap1.transpose(1, 2), fmap2)",
                            "Call"
                        ],
                        [
                            "corr.view(batch, ht, wd, 1, ht, wd)",
                            "Call"
                        ],
                        [
                            "torch.stack(corr_list, dim=1)",
                            "Call"
                        ],
                        [
                            "corr.reshape(B, -1, H, W)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_37": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-r",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.radius",
                            "Attribute"
                        ],
                        [
                            "self.radius",
                            "Attribute"
                        ]
                    ]
                },
                "steps": {
                    "value": "2 * r + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_38": {
                "variable": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-r",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.radius",
                            "Attribute"
                        ],
                        [
                            "self.radius",
                            "Attribute"
                        ]
                    ]
                },
                "steps": {
                    "value": "2 * r + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid(dy, dx)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_70": {
                "variable": {
                    "value": "fmap1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fmap1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmap1.view(batch, dim, ht * wd)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(fmap1, 2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_71": {
                "variable": {
                    "value": "fmap2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fmap2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmap2.view(batch, dim, ht * wd)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(fmap2, 2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_60": {
                "input": {
                    "value": "torch.tensor(dim).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_91": {
                "input": {
                    "value": "torch.tensor(dim).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pyramid[0][0].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_91": {
                "data": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pyramid[0][0].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "meshgrid_39": {
                "*tensors": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-r, r, 2 * r + 1)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-r, r, 2 * r + 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/raft/datasets.py": {
        "torch": {
            "DataLoader_230": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FlyingChairs(aug_params, split='training')",
                            "Call"
                        ],
                        [
                            "clean_dataset + final_dataset",
                            "BinOp"
                        ],
                        [
                            "100 * sintel_clean + 100 * sintel_final + 200 * kitti + 5 * hd1k + things",
                            "BinOp"
                        ],
                        [
                            "KITTI(aug_params, split='training')",
                            "Call"
                        ],
                        [
                            "100 * sintel_clean + 100 * sintel_final + things",
                            "BinOp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_utils.read_gen(self.image_list[index][0])",
                            "Call"
                        ],
                        [
                            "np.array(img1).astype(np.uint8)[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img1).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "frame_utils.read_gen(self.image_list[index][0])",
                            "Call"
                        ],
                        [
                            "np.array(img1).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.tile(img1[..., None], (1, 1, 3))",
                            "Call"
                        ],
                        [
                            "img1[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img1).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_81": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_utils.read_gen(self.image_list[index][1])",
                            "Call"
                        ],
                        [
                            "np.array(img2).astype(np.uint8)[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img2).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "frame_utils.read_gen(self.image_list[index][1])",
                            "Call"
                        ],
                        [
                            "np.array(img2).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.tile(img2[..., None], (1, 1, 3))",
                            "Call"
                        ],
                        [
                            "img2[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img2).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_82": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_utils.read_gen(self.flow_list[index])",
                            "Call"
                        ],
                        [
                            "np.array(flow).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(flow).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_83": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_utils.read_gen(self.image_list[index][0])",
                            "Call"
                        ],
                        [
                            "np.array(img1).astype(np.uint8)[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img1).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "frame_utils.read_gen(self.image_list[index][0])",
                            "Call"
                        ],
                        [
                            "np.array(img1).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.tile(img1[..., None], (1, 1, 3))",
                            "Call"
                        ],
                        [
                            "img1[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img1).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_41": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_utils.read_gen(self.image_list[index][1])",
                            "Call"
                        ],
                        [
                            "np.array(img2).astype(np.uint8)[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img2).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "frame_utils.read_gen(self.image_list[index][1])",
                            "Call"
                        ],
                        [
                            "np.array(img2).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.tile(img2[..., None], (1, 1, 3))",
                            "Call"
                        ],
                        [
                            "img2[..., :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img2).permute(2, 0, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_42": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.from_numpy(valid)",
                            "Call"
                        ],
                        [
                            "(flow[0].abs() < 1000) & (flow[1].abs() < 1000)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "worker_info.id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/raft/extractor.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_213": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_17": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GroupNorm_18": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GroupNorm_72": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_73": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_74": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GroupNorm_124": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_148": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_165": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_190": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[batch_dim, batch_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_201": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_222": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_241": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_265": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [batch_dim, batch_dim], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[batch_dim, batch_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_20": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GroupNorm_76": {
                "variable": {
                    "value": "self.norm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes // 8",
                            "BinOp"
                        ],
                        [
                            "planes // 8",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_204": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_29": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_30": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_83": {
                "variable": {
                    "value": "self.norm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_86": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_87": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_88": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_130": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_207": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_32": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_90": {
                "variable": {
                    "value": "self.norm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.norm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/raft/raft.py": {
        "torch": {
            "softmax_76": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.view(N, 1, 9, 8, 8, H, W)",
                            "Call"
                        ],
                        [
                            "torch.softmax(mask, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unfold_78": {
                "variable": {
                    "value": "up_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "8 * flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_81": {
                "variable": {
                    "value": "up_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask * up_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_112": {
                "variable": {
                    "value": "(net, inp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnet(image1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[hdim, cdim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_113": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_114": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.relu(inp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/raft/update.py": {
        "torch": {
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "192 + 128",
                            "Method Argument"
                        ],
                        [
                            "192 + 128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.convz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.convr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.convq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convz(hx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_27": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convr(hx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_28": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convq(torch.cat([r * h, x], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.convz1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.convr1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.convq1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.convz2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(5, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.convr2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(5, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.convq2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "96",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(5, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convz1(hx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convr1(hx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convq1(torch.cat([r * h, x], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convz2(hx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convr2(hx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convq2(torch.cat([r * h, x], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.convc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cor_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.corr_levels * (2 * args.corr_radius + 1) ** 2",
                            "BinOp"
                        ],
                        [
                            "args.corr_levels * (2 * args.corr_radius + 1) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.convf1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.convf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "cor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convc1(corr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "flo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convf1(flow)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "flo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convf2(flo)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "cor_flo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cor, flo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(cor_flo)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.convc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cor_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.corr_levels * (2 * args.corr_radius + 1) ** 2",
                            "BinOp"
                        ],
                        [
                            "args.corr_levels * (2 * args.corr_radius + 1) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.convc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.convf1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.convf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64 + 192",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128 - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "cor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convc1(corr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "cor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convc2(cor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_92": {
                "variable": {
                    "value": "flo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convf1(flow)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "flo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convf2(flo)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "cor_flo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cor, flo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(cor_flo)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inp, motion_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inp, motion_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[out, flow]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "tensors": {
                    "value": "[out, flow]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 * 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_28": {
                "tensors": {
                    "value": "[r * h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "[r * h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "[r * h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/raft/utils/augmentor.py": {
        "torch": {}
    },
    "models/raft/utils/utils.py": {
        "torch": {
            "cat_64": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xgrid, ygrid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_65": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(img, grid, align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([xgrid, ygrid], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "meshgrid_75": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(ht)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(wd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "coords[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "ndarray": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.stack([flow_x, flow_y], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_75": {
                "start": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "input": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.stack([flow_x, flow_y], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(8 * flow.shape[2], 8 * flow.shape[3])",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'sintel'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_19": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "self._pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/super_glue/matching.py": {
        "torch": {
            "stack_79": {
                "variable": {
                    "value": "data[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/super_glue/superglue.py": {
        "torch": {
            "softmax_88": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bdhn,bdhm->bhnm', query, key) / dim ** 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.einsum('bdn,bdm->bnm', mdesc0, mdesc1)",
                            "Call"
                        ],
                        [
                            "scores / self.config['descriptor_dim'] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "log_optimal_transport(scores, self.bin_score, iters=self.config['sinkhorn_iterations'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_162": {
                "tensors": {
                    "value": "[scores, bins0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "log_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[norm.expand(m), ns.log()[None] + norm]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "log_nu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[norm.expand(n), ms.log()[None] + norm]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_99": {
                "variable": {
                    "value": "self.merge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[deepcopy(self.merge) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AttentionalPropagation(feature_dim, 4) for _ in range(len(layer_names))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv1d_216": {
                "variable": {
                    "value": "self.final_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.config['descriptor_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.config['descriptor_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_220": {
                "variable": {
                    "value": "bin_score",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_259": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bdn,bdm->bnm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "mdesc0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_273": {
                "variable": {
                    "value": "mscores0",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mutual0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arange_like(indices0, 1)[None] == indices1.gather(1, indices0)",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "max0.values.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.new_tensor(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_274": {
                "variable": {
                    "value": "mscores1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mutual1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arange_like(indices1, 1)[None] == indices0.gather(1, indices1)",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "mscores0.gather(1, indices1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.new_tensor(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_277": {
                "variable": {
                    "value": "indices0",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "valid0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mutual0 & (mscores0 > self.config['match_threshold'])",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "indices0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(valid0, indices0, indices0.new_tensor(-1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "indices0.new_tensor(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_278": {
                "variable": {
                    "value": "indices1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "valid1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mutual1 & valid0.gather(1, indices1)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "indices1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(valid1, indices1, indices1.new_tensor(-1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "indices1.new_tensor(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_67": {
                "tensors": {
                    "value": "[one * width, one * height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_87": {
                "equation": {
                    "value": "bdhn,bdhm->bhnm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_89": {
                "equation": {
                    "value": "bhnm,bdhm->bdhn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_145": {
                "input": {
                    "value": "log_nu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([norm.expand(n), ms.log()[None] + norm])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_55": {
                "in_channels": {
                    "value": "channels[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kpts.transpose(1, 2), scores.unsqueeze(1)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "[x, message]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_147": {
                "input": {
                    "value": "Z + v.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_148": {
                "input": {
                    "value": "Z + u.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "tensors": {
                    "value": "[bins1, alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_226": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(__file__).parent",
                            "Attribute"
                        ],
                        [
                            "path / 'weights/superglue_{}.pth'.format(self.config['weights'])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_58": {
                "num_features": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/super_glue/superpoint.py": {
        "torch": {
            "zeros_like_55": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convPb(cPa)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, 1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scores.permute(0, 2, 3, 1).reshape(b, h, w, 8, 8)",
                            "Call"
                        ],
                        [
                            "scores.permute(0, 1, 3, 2, 4).reshape(b, h * 8, w * 8)",
                            "Call"
                        ],
                        [
                            "simple_nms(scores, self.config['nms_radius'])",
                            "Call"
                        ],
                        [
                            "[s[tuple(k.t())] for (s, k) in zip(scores, keypoints)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "topk_76": {
                "variable": {
                    "value": "(scores, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convPb(cPa)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, 1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scores.permute(0, 2, 3, 1).reshape(b, h, w, 8, 8)",
                            "Call"
                        ],
                        [
                            "scores.permute(0, 1, 3, 2, 4).reshape(b, h * 8, w * 8)",
                            "Call"
                        ],
                        [
                            "simple_nms(scores, self.config['nms_radius'])",
                            "Call"
                        ],
                        [
                            "[s[tuple(k.t())] for (s, k) in zip(scores, keypoints)]",
                            "ListComp"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_88": {
                "variable": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.grid_sample(descriptors, keypoints.view(b, 1, -1, 2), mode='bilinear', **args)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(descriptors.reshape(b, c, -1), p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.convDb(cDa)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(descriptors, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "[sample_descriptors(k[None], d[None], 8)[0] for (k, d) in zip(keypoints, descriptors)]",
                            "ListComp"
                        ]
                    ]
                },
                "grid": {
                    "value": "keypoints.view(b, 1, -1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_90": {
                "variable": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "descriptors.reshape(b, c, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_59": {
                "variable": {
                    "value": "supp_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "supp_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool(max_mask.float()) > 0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(scores)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convPb(cPa)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, 1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scores.permute(0, 2, 3, 1).reshape(b, h, w, 8, 8)",
                            "Call"
                        ],
                        [
                            "scores.permute(0, 1, 3, 2, 4).reshape(b, h * 8, w * 8)",
                            "Call"
                        ],
                        [
                            "simple_nms(scores, self.config['nms_radius'])",
                            "Call"
                        ],
                        [
                            "[s[tuple(k.t())] for (s, k) in zip(scores, keypoints)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "where_62": {
                "condition": {
                    "value": "max_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores == max_pool(scores)",
                            "Compare"
                        ],
                        [
                            "max_mask | new_max_mask & ~supp_mask",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convPb(cPa)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, 1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scores.permute(0, 2, 3, 1).reshape(b, h, w, 8, 8)",
                            "Call"
                        ],
                        [
                            "scores.permute(0, 1, 3, 2, 4).reshape(b, h * 8, w * 8)",
                            "Call"
                        ],
                        [
                            "simple_nms(scores, self.config['nms_radius'])",
                            "Call"
                        ],
                        [
                            "[s[tuple(k.t())] for (s, k) in zip(scores, keypoints)]",
                            "ListComp"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_115": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_116": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.conv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.conv1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.conv2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "self.conv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.conv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.conv4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.convPa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.convPb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.convDa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.convDb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.config['descriptor_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_192": {
                "variable": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.grid_sample(descriptors, keypoints.view(b, 1, -1, 2), mode='bilinear', **args)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(descriptors.reshape(b, c, -1), p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.convDb(cDa)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(descriptors, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "[sample_descriptors(k[None], d[None], 8)[0] for (k, d) in zip(keypoints, descriptors)]",
                            "ListComp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_52": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu(self.conv1a(data['image']))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1b(x))",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2a(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2b(x))",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv3a(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv3b(x))",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv4a(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv4b(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nms_radius * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "nms_radius",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "[w * s - s / 2 - 0.5, h * s - s / 2 - 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_137": {
                "f": {
                    "value": "str(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convPb(cPa)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, 1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scores.permute(0, 2, 3, 1).reshape(b, h, w, 8, 8)",
                            "Call"
                        ],
                        [
                            "scores.permute(0, 1, 3, 2, 4).reshape(b, h * 8, w * 8)",
                            "Call"
                        ],
                        [
                            "simple_nms(scores, self.config['nms_radius'])",
                            "Call"
                        ],
                        [
                            "[s[tuple(k.t())] for (s, k) in zip(scores, keypoints)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_171": {
                "input": {
                    "value": "s > self.config['keypoint_threshold']",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "flip_187": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/super_glue/utils.py": {
        "torch": {
            "from_numpy_260": {
                "ndarray": {
                    "value": "frame / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "visualization.py": {
        "torch": {
            "from_numpy_128": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(img_1).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img1).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "images[0, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_128": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(img_2).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img2).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "images[1, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_130": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img1, img2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}