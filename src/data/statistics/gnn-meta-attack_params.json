{
    "metattack/utils.py": {
        "sklearn": {
            "train_test_split_99": {
                "variable": {
                    "value": "(idx_train_and_val, idx_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "train_size": {
                    "value": "train_size + val_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "stratify",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stratify[idx_train_and_val]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_106": {
                "variable": {
                    "value": "(idx_train, idx_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx_train_and_val",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "train_size": {
                    "value": "train_size / (train_size + val_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "test_size": {
                    "value": "val_size / (train_size + val_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stratify": {
                    "value": "stratify",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stratify[idx_train_and_val]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "multiply_274": {
                "variable": {
                    "value": "d_old_in_range",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_old",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_old",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(old_in_range, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_275": {
                "variable": {
                    "value": "d_new_in_range",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_new",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(new_in_range, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_340": {
                "variable": {
                    "value": "in_range",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "degree_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "degree_sequence",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "d_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_342": {
                "variable": {
                    "value": "sum_log_degrees",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.log(tf.boolean_mask(degree_sequence, in_range))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_344": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.count_nonzero(in_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_388": {
                "x": {
                    "value": "node_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_pairs",
                            "Method Argument"
                        ],
                        [
                            "node_pairs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_390": {
                "variable": {
                    "value": "degree_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "adjacency_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_393": {
                "variable": {
                    "value": "in_range",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "degree_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(adjacency_matrix, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "d_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_395": {
                "variable": {
                    "value": "sum_log_degrees",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.log(tf.boolean_mask(degree_seq, in_range))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_397": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.count_nonzero(in_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_404": {
                "variable": {
                    "value": "d_edges_before",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "degree_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(adjacency_matrix, 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(node_pairs, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_411": {
                "variable": {
                    "value": "new_n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n_old, tf.int64) - tf.count_nonzero(old_in_range, axis=1) + tf.count_nonzero(new_in_range, axis=1)",
                            "BinOp"
                        ],
                        [
                            "update_sum_log_degrees(sum_log_degrees, n, d_edges_before, d_edges_after, d_min)",
                            "Call"
                        ],
                        [
                            "tf.cast(new_n, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_459": {
                "variable": {
                    "value": "original_degree_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(original_adjacency, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_460": {
                "variable": {
                    "value": "current_degree_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(modified_adjacency, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_463": {
                "variable": {
                    "value": "concat_degree_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(current_degree_sequence[None, :], original_degree_sequence[None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_489": {
                "variable": {
                    "value": "filtered_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "node_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_pairs",
                            "Method Argument"
                        ],
                        [
                            "node_pairs",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "allowed_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_ratios < threshold",
                            "Compare"
                        ]
                    ]
                }
            },
            "scatter_nd_498": {
                "variable": {
                    "value": "indices_1",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_ixs[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.ones_like(flat_ixs, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N * N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_499": {
                "variable": {
                    "value": "indices_2",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_ixs_reverse[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.ones_like(flat_ixs_reverse, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N * N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_503": {
                "variable": {
                    "value": "allowed_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "indices_1 + indices_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_162": {
                "values": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_274": {
                "x": {
                    "value": "old_in_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_old >= d_min",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_275": {
                "x": {
                    "value": "new_in_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_new >= d_min",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_279": {
                "input_tensor": {
                    "value": "tf.log(tf.maximum(d_new_in_range, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "count_nonzero_283": {
                "input": {
                    "value": "old_in_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_old >= d_min",
                            "Compare"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_342": {
                "x": {
                    "value": "tf.boolean_mask(degree_sequence, in_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "count_nonzero_344": {
                "input": {
                    "value": "in_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(degree_sequence, d_min)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(degree_seq, d_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_388": {
                "params": {
                    "value": "adjacency_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(node_pairs, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_395": {
                "x": {
                    "value": "tf.boolean_mask(degree_seq, in_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "count_nonzero_397": {
                "input": {
                    "value": "in_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(degree_sequence, d_min)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(degree_seq, d_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_404": {
                "x": {
                    "value": "node_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_pairs",
                            "Method Argument"
                        ],
                        [
                            "node_pairs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_407": {
                "params": {
                    "value": "degree_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(adjacency_matrix, 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(node_pairs, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_459": {
                "input_tensor": {
                    "value": "original_adjacency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_adjacency",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_460": {
                "input_tensor": {
                    "value": "modified_adjacency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modified_adjacency",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_476": {
                "x": {
                    "value": "modified_adjacency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modified_adjacency",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_492": {
                "x": {
                    "value": "filtered_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(node_pairs, allowed_edges)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reverse_494": {
                "tensor": {
                    "value": "tf.cast(filtered_edges, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_498": {
                "input": {
                    "value": "flat_ixs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ravel_multiple_indices(tf.cast(filtered_edges, tf.int32), modified_adjacency.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_499": {
                "input": {
                    "value": "flat_ixs_reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ravel_multiple_indices(tf.reverse(tf.cast(filtered_edges, tf.int32), [1]), modified_adjacency.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_278": {
                "input_tensor": {
                    "value": "tf.log(tf.maximum(d_old_in_range, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_280": {
                "x": {
                    "value": "tf.maximum(d_new_in_range, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_283": {
                "x": {
                    "value": "n_old",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_old",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_342": {
                "tensor": {
                    "value": "degree_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "degree_sequence",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "in_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(degree_sequence, d_min)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(degree_seq, d_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_395": {
                "tensor": {
                    "value": "degree_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(adjacency_matrix, 1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "in_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(degree_sequence, d_min)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(degree_seq, d_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_407": {
                "x": {
                    "value": "node_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_pairs",
                            "Method Argument"
                        ],
                        [
                            "node_pairs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_494": {
                "x": {
                    "value": "filtered_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(node_pairs, allowed_edges)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_230": {
                "x": {
                    "value": "d_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ],
                        [
                            "d_min",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_278": {
                "x": {
                    "value": "tf.maximum(d_old_in_range, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_280": {
                "x": {
                    "value": "d_new_in_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(d_new, tf.cast(new_in_range, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_278": {
                "x": {
                    "value": "d_old_in_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(d_old, tf.cast(old_in_range, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_309": {
                "x": {
                    "value": "d_min - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "metattack/meta_gradient_attack.py": {
        "tensorflow": {
            "cast_684": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_60": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_191": {
                "variable": {
                    "value": "degrees",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.modified_adjacency",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_192": {
                "variable": {
                    "value": "degree_one",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "degrees",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.modified_adjacency, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "degree_equals_one",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_193": {
                "variable": {
                    "value": "resh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(degree_one, [self.N])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.N, self.N]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "degree_one_square",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_and_194": {
                "variable": {
                    "value": "l_and",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "resh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(degree_one, [self.N]), [self.N, self.N], name='degree_one_square')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.equal(self.modified_adjacency, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_or_195": {
                "variable": {
                    "value": "logical_and_symmetric",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l_and",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(resh, tf.equal(self.modified_adjacency, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(l_and)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_196": {
                "variable": {
                    "value": "flat_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(tf.reshape(logical_and_symmetric, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_220": {
                "variable": {
                    "value": "t_d_min",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_221": {
                "variable": {
                    "value": "t_possible_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(np.triu(np.ones((self.N, self.N)), k=1).nonzero()).T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_733": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.idx_labeled",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Labeled_Idx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.idx_unlabeled",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Unlabeled_Idx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.idx_attack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Attack_Idx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_109": {
                "variable": {
                    "value": "output_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f'W_{len(self.hidden_sizes) + 1}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "shape": {
                    "value": "[previous_size, self.K]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_112": {
                "variable": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f'b_{len(self.hidden_sizes) + 1}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.K]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "variable": {
                    "value": "output_velocity",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(output_weight.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f'Velocity_{len(self.hidden_sizes) + 1}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Variable_116": {
                "variable": {
                    "value": "output_bias_velocity",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(output_bias.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f'b_Velocity_{len(self.hidden_sizes) + 1}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Session_177": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_315": {
                "variable": {
                    "value": "labels_gather",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.labels_onehot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_labeled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_316": {
                "variable": {
                    "value": "logits_gather",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_labeled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_317": {
                "variable": {
                    "value": "self.classification_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=labels_gather, logits=logits_gather)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_322": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "float"
                        ],
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "gather_343": {
                "variable": {
                    "value": "logits_labeled",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_labeled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_344": {
                "variable": {
                    "value": "labels_train",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.labels_onehot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_labeled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_345": {
                "variable": {
                    "value": "logits_attack",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_unlabeled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_346": {
                "variable": {
                    "value": "labels_attack",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.labels_onehot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_attack",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_348": {
                "variable": {
                    "value": "loss_labeled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits_labeled, labels=labels_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_350": {
                "variable": {
                    "value": "loss_attack",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits_attack, labels=labels_attack)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_361": {
                "variable": {
                    "value": "self.grad_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.N * self.N)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_363": {
                "variable": {
                    "value": "self.adjacency_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gradients(attack_loss, self.adjacency_changes)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(self.modified_adjacency, [-1]) * -2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Adj_gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_add_367": {
                "variable": {
                    "value": "self.grad_sum_add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.grad_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.adjacency_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_374": {
                "variable": {
                    "value": "self.grad_sum_mod",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.grad_sum_mod",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "singleton_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_potential_singletons()",
                            "Call"
                        ],
                        [
                            "self.filter_potential_singletons()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_384": {
                "variable": {
                    "value": "adj_meta_approx_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.grad_sum_mod",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_392": {
                "variable": {
                    "value": "adj_argmax_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[adj_meta_approx_argmax, adj_argmax_transpose_ix]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Meta_approx_argmax_combined",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scatter_add_396": {
                "variable": {
                    "value": "self.adjacency_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.adjacency_changes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "adj_argmax_combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([adj_meta_approx_argmax, adj_argmax_transpose_ix], name='Meta_approx_argmax_combined')",
                            "Call"
                        ],
                        [
                            "tf.stack([adj_meta_grad_argmax, adj_argmax_transpose_ix], name='Meta_grad_argmax_combined')",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "-2 * tf.gather(tf.reshape(self.modified_adjacency, [-1]), adj_argmax_combined) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_583": {
                "variable": {
                    "value": "logits_attack",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.logits_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_attack",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_584": {
                "variable": {
                    "value": "labels_atk",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.labels_onehot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_attack",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_585": {
                "variable": {
                    "value": "attack_loss_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_attack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.logits, self.idx_unlabeled)",
                            "Call"
                        ],
                        [
                            "tf.gather(self.logits_final, self.idx_attack)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels_atk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.labels_onehot, self.idx_attack)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_587": {
                "variable": {
                    "value": "attack_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attack_loss_per_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits_attack, labels=labels_atk)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_590": {
                "variable": {
                    "value": "self.adjacency_meta_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gradients(attack_loss, self.adjacency_changes)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(self.modified_adjacency, [-1]) * -2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Meta_gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_599": {
                "variable": {
                    "value": "self.adjacency_meta_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.adjacency_meta_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "singleton_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_potential_singletons()",
                            "Call"
                        ],
                        [
                            "self.filter_potential_singletons()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_609": {
                "variable": {
                    "value": "adj_meta_grad_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.adjacency_meta_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_617": {
                "variable": {
                    "value": "adj_argmax_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[adj_meta_grad_argmax, adj_argmax_transpose_ix]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Meta_grad_argmax_combined",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scatter_add_621": {
                "variable": {
                    "value": "self.adjacency_meta_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.adjacency_changes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "adj_argmax_combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([adj_meta_approx_argmax, adj_argmax_transpose_ix], name='Meta_approx_argmax_combined')",
                            "Call"
                        ],
                        [
                            "tf.stack([adj_meta_grad_argmax, adj_argmax_transpose_ix], name='Meta_grad_argmax_combined')",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "-2 * tf.gather(tf.reshape(self.modified_adjacency, [-1]), adj_argmax_combined) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_684": {
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "variable"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_with_default_740": {
                "variable": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_742": {
                "variable": {
                    "value": "self.idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SparseTensor_746": {
                "variable": {
                    "value": "self.adj_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "np.array(adj_norm.nonzero()).T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "adj_norm[adj_norm.nonzero()].A1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "[self.N, self.N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_777": {
                "variable": {
                    "value": "weight_final",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f'W_{len(hidden_sizes) + 1}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "shape": {
                    "value": "[previous_size, self.K]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_780": {
                "variable": {
                    "value": "bias_final",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f'b_{len(hidden_sizes) + 1}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.K]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_794": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_826": {
                "variable": {
                    "value": "self.logits_gather",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_827": {
                "variable": {
                    "value": "labels_gather",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.labels_onehot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_829": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_gather",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.labels_onehot, self.idx_labeled)",
                            "Call"
                        ],
                        [
                            "tf.gather(self.labels_onehot, self.idx)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "self.logits_gather",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_832": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "local_variables_initializer_834": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_97": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f'W_{ix + 1}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "shape": {
                    "value": "[previous_size, layer_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_99": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f'b_{ix + 1}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "shape": {
                    "value": "[layer_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_101": {
                "variable": {
                    "value": "w_velocity",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(weight.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f'Velocity_{ix + 1}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Variable_102": {
                "variable": {
                    "value": "b_velocity",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(bias.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f'b_Velocity_{ix + 1}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "constant_125": {
                "variable": {
                    "value": "self.adjacency_orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "adjacency_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_matrix.toarray()",
                            "Call"
                        ],
                        [
                            "adjacency_matrix",
                            "Method Argument"
                        ],
                        [
                            "adjacency_matrix",
                            "Method Argument"
                        ],
                        [
                            "adjacency_matrix",
                            "Method Argument"
                        ],
                        [
                            "adjacency_matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Adjacency",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_128": {
                "variable": {
                    "value": "self.adjacency_changes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(adjacency_matrix.size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Adjacency_delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_136": {
                "variable": {
                    "value": "tf_adjacency_delta_symm",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf_adjacency_square + tf.transpose(tf_adjacency_square)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_141": {
                "variable": {
                    "value": "adj_selfloops",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.modified_adjacency",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.diag(tf.ones([self.N], dtype=self.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_142": {
                "variable": {
                    "value": "inv_degrees",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(adj_selfloops, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_143": {
                "x": {
                    "value": "adj_selfloops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(self.modified_adjacency, tf.diag(tf.ones([self.N], dtype=self.dtype)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "inv_degrees[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_170": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "GPUOptions_174": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "'{}'.format(gpu_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_175": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(visible_device_list='{}'.format(gpu_id), allow_growth=True)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(visible_device_list='{}'.format(gpu_id), allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_193": {
                "input": {
                    "value": "degree_one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(degrees, 1, name='degree_equals_one')",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_194": {
                "x": {
                    "value": "self.modified_adjacency",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_195": {
                "a": {
                    "value": "l_and",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(resh, tf.equal(self.modified_adjacency, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_196": {
                "x": {
                    "value": "tf.reshape(logical_and_symmetric, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_381": {
                "variable": {
                    "value": "self.grad_sum_mod",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.grad_sum_mod",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "allowed_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.likelihood_ratio_filter(t_possible_edges, self.modified_adjacency, self.adjacency_orig, t_d_min, ll_cutoff)",
                            "Call"
                        ],
                        [
                            "self.log_likelihood_constraint(ll_cutoff)",
                            "Call"
                        ],
                        [
                            "self.log_likelihood_constraint(ll_cutoff)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_595": {
                "input_tensor": {
                    "value": "self.adjacency_meta_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_606": {
                "variable": {
                    "value": "self.adjacency_meta_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.adjacency_meta_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "allowed_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.likelihood_ratio_filter(t_possible_edges, self.modified_adjacency, self.adjacency_orig, t_d_min, ll_cutoff)",
                            "Call"
                        ],
                        [
                            "self.log_likelihood_constraint(ll_cutoff)",
                            "Call"
                        ],
                        [
                            "self.log_likelihood_constraint(ll_cutoff)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_629": {
                "variable": {
                    "value": "self.attribute_meta_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gradients(attack_loss, self.attribute_changes)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(self.attributes, [-1]) * -2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_633": {
                "variable": {
                    "value": "attribute_meta_grad_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attribute_meta_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_641": {
                "variable": {
                    "value": "adjacency_meta_grad_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.adjacency_meta_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_642": {
                "variable": {
                    "value": "attribute_meta_grad_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.attribute_meta_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_648": {
                "variable": {
                    "value": "self.combined_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_meta_grad_max > attribute_meta_grad_max",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self.adjacency_meta_update",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.attribute_meta_update",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "SparseTensor_752": {
                "variable": {
                    "value": "self.attributes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "np.array(attribute_matrix.nonzero()).T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "attribute_matrix[attribute_matrix.nonzero()].A1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "[self.N, self.D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_756": {
                "variable": {
                    "value": "self.attributes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "attribute_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attribute_matrix.toarray()",
                            "Call"
                        ],
                        [
                            "attribute_matrix",
                            "Method Argument"
                        ],
                        [
                            "attribute_matrix",
                            "Method Argument"
                        ],
                        [
                            "attribute_matrix",
                            "Method Argument"
                        ],
                        [
                            "attribute_matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_757": {
                "variable": {
                    "value": "self.attributes_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.attributes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_769": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f'W_{ix + 1}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "shape": {
                    "value": "[previous_size, layer_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_771": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f'b_{ix + 1}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "shape": {
                    "value": "[layer_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_787": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "GPUOptions_791": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "'{}'.format(gpu_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_792": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(visible_device_list='{}'.format(gpu_id), allow_growth=True)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(visible_device_list='{}'.format(gpu_id), allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_819": {
                "variable": {
                    "value": "hidden_dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "self.adj_norm @ hidden @ w + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ tf.cast(tf.sparse_tensor_dense_matmul(tf.cast(hidden, tf.float32), tf.cast(w, tf.float32)), self.dtype) + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ tf.sparse_tensor_dense_matmul(hidden, w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "self.adj_norm @ tf.sparse_tensor_dense_matmul(hidden, w) + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ hidden @ w + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj_norm, tf.sparse_tensor_dense_matmul(self.attrs_comp, w)) + b",
                            "BinOp"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj_norm, self.attrs_comp @ w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.training, lambda : hidden_dropout, lambda : hidden) if self.dropout > 0.0 else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_124": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_148": {
                "variable": {
                    "value": "self.attributes_orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "attribute_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attribute_matrix.toarray()",
                            "Call"
                        ],
                        [
                            "attribute_matrix",
                            "Method Argument"
                        ],
                        [
                            "attribute_matrix",
                            "Method Argument"
                        ],
                        [
                            "attribute_matrix",
                            "Method Argument"
                        ],
                        [
                            "attribute_matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Original_attributes",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_150": {
                "variable": {
                    "value": "self.attribute_changes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(attribute_matrix.size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "tf_attributes_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.clip_by_value(self.attribute_changes, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "attribute_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_153": {
                "variable": {
                    "value": "self.attributes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "self.attributes_orig + tf_attributes_reshaped",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "Modified_attributes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "tensor": {
                    "value": "logical_and_symmetric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(l_and, tf.transpose(l_and))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_311": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "self.adj_norm @ hidden @ w + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ tf.cast(tf.sparse_tensor_dense_matmul(tf.cast(hidden, tf.float32), tf.cast(w, tf.float32)), self.dtype) + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ tf.sparse_tensor_dense_matmul(hidden, w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "self.adj_norm @ tf.sparse_tensor_dense_matmul(hidden, w) + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ hidden @ w + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj_norm, tf.sparse_tensor_dense_matmul(self.attrs_comp, w)) + b",
                            "BinOp"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj_norm, self.attrs_comp @ w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.training, lambda : hidden_dropout, lambda : hidden) if self.dropout > 0.0 else hidden",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_317": {
                "labels": {
                    "value": "labels_gather",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.labels_onehot, self.idx_labeled)",
                            "Call"
                        ],
                        [
                            "tf.gather(self.labels_onehot, self.idx)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_gather",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.logits, self.idx_labeled)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_348": {
                "logits": {
                    "value": "logits_labeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.logits, self.idx_labeled)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.labels_onehot, self.idx_labeled)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_350": {
                "logits": {
                    "value": "logits_attack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.logits, self.idx_unlabeled)",
                            "Call"
                        ],
                        [
                            "tf.gather(self.logits_final, self.idx_attack)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels_attack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.labels_onehot, self.idx_attack)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_370": {
                "input_tensor": {
                    "value": "self.grad_sum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_510": {
                "name": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_529": {
                "variable": {
                    "value": "logits_train",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "self.adj_norm @ hidden @ w + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ tf.cast(tf.sparse_tensor_dense_matmul(tf.cast(hidden, tf.float32), tf.cast(w, tf.float32)), self.dtype) + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ tf.sparse_tensor_dense_matmul(hidden, w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "self.adj_norm @ tf.sparse_tensor_dense_matmul(hidden, w) + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ hidden @ w + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj_norm, tf.sparse_tensor_dense_matmul(self.attrs_comp, w)) + b",
                            "BinOp"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj_norm, self.attrs_comp @ w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.training, lambda : hidden_dropout, lambda : hidden) if self.dropout > 0.0 else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.idx_labeled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_530": {
                "variable": {
                    "value": "loss_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(hidden, self.idx_labeled)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.gather(self.labels_onehot, self.idx_labeled)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_533": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_per_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits_train, labels=tf.gather(self.labels_onehot, self.idx_labeled))",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_535": {
                "variable": {
                    "value": "weight_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_per_node)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "current_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.all_weights[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gradients_536": {
                "variable": {
                    "value": "bias_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_per_node)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "current_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.all_biases[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_563": {
                "variable": {
                    "value": "final_output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "final_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "self.adj_norm @ tf.sparse_tensor_dense_matmul(final_output, w) + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ final_output @ w + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(final_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_631": {
                "input_tensor": {
                    "value": "self.attribute_meta_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_759": {
                "pred": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.attributes_dropout",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.attributes",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "relu_817": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "self.adj_norm @ hidden @ w + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ tf.cast(tf.sparse_tensor_dense_matmul(tf.cast(hidden, tf.float32), tf.cast(w, tf.float32)), self.dtype) + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ tf.sparse_tensor_dense_matmul(hidden, w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "self.adj_norm @ tf.sparse_tensor_dense_matmul(hidden, w) + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ hidden @ w + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj_norm, tf.sparse_tensor_dense_matmul(self.attrs_comp, w)) + b",
                            "BinOp"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj_norm, self.attrs_comp @ w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.training, lambda : hidden_dropout, lambda : hidden) if self.dropout > 0.0 else hidden",
                            "IfExp"
                        ]
                    ]
                }
            },
            "add_n_830": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in [self.weights[0], self.biases[0]]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "tensor": {
                    "value": "self.adjacency_changes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "adjacency_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "shape": {
                    "value": "adjacency_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_141": {
                "diagonal": {
                    "value": "tf.ones([self.N], dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "input_tensor": {
                    "value": "adj_selfloops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(self.modified_adjacency, tf.diag(tf.ones([self.N], dtype=self.dtype)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseTensor_157": {
                "variable": {
                    "value": "self.attributes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "np.array(attribute_matrix.nonzero()).T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "attribute_matrix[attribute_matrix.nonzero()].A1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "attribute_matrix.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_160": {
                "variable": {
                    "value": "self.attributes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.attributes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Attributes_sparse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_162": {
                "variable": {
                    "value": "self.attributes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "attribute_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attribute_matrix.toarray()",
                            "Call"
                        ],
                        [
                            "attribute_matrix",
                            "Method Argument"
                        ],
                        [
                            "attribute_matrix",
                            "Method Argument"
                        ],
                        [
                            "attribute_matrix",
                            "Method Argument"
                        ],
                        [
                            "attribute_matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Attribute_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_363": {
                "ys": {
                    "value": "attack_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_labeled",
                            "variable"
                        ],
                        [
                            "loss_attack",
                            "variable"
                        ],
                        [
                            "self.lambda_ * loss_labeled + (1 - self.lambda_) * loss_attack",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(attack_loss_per_node)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.adjacency_changes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_590": {
                "ys": {
                    "value": "attack_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_labeled",
                            "variable"
                        ],
                        [
                            "loss_attack",
                            "variable"
                        ],
                        [
                            "self.lambda_ * loss_labeled + (1 - self.lambda_) * loss_attack",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(attack_loss_per_node)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.adjacency_changes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_add_635": {
                "ref": {
                    "value": "self.attribute_changes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "attribute_meta_grad_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(self.attribute_meta_grad)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "-2 * tf.gather(tf.reshape(self.attributes, [-1]), attribute_meta_grad_argmax) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_673": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cond_820": {
                "pred": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : hidden_dropout",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : hidden",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "global_variables_initializer_839": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_136": {
                "a": {
                    "value": "tf_adjacency_square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_set_diag(tf.reshape(self.adjacency_changes, adjacency_matrix.shape), tf.zeros(adjacency_matrix.shape[0], dtype=self.dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_141": {
                "shape": {
                    "value": "[self.N]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_151": {
                "t": {
                    "value": "self.attribute_changes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_364": {
                "tensor": {
                    "value": "self.modified_adjacency",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_527": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "self.adj_norm @ hidden @ w + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ tf.cast(tf.sparse_tensor_dense_matmul(tf.cast(hidden, tf.float32), tf.cast(w, tf.float32)), self.dtype) + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ tf.sparse_tensor_dense_matmul(hidden, w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "self.adj_norm @ tf.sparse_tensor_dense_matmul(hidden, w) + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ hidden @ w + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj_norm, tf.sparse_tensor_dense_matmul(self.attrs_comp, w)) + b",
                            "BinOp"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj_norm, self.attrs_comp @ w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.training, lambda : hidden_dropout, lambda : hidden) if self.dropout > 0.0 else hidden",
                            "IfExp"
                        ]
                    ]
                }
            },
            "subtract_542": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w in enumerate(weights)",
                            "Call"
                        ],
                        [
                            "w in enumerate(current_weights)",
                            "Call"
                        ],
                        [
                            "w in enumerate(final_weights)",
                            "Call"
                        ],
                        [
                            "self.weights[ix]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "learning_rate * next_velocities[ix]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_544": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias[ix] * float(with_bias)",
                            "BinOp"
                        ],
                        [
                            "current_biases[ix] * float(with_bias)",
                            "BinOp"
                        ],
                        [
                            "final_bias[ix] * float(with_bias)",
                            "BinOp"
                        ],
                        [
                            "self.biases[ix]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "learning_rate * next_b_velocities[ix]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_591": {
                "tensor": {
                    "value": "self.modified_adjacency",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_629": {
                "ys": {
                    "value": "attack_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_labeled",
                            "variable"
                        ],
                        [
                            "loss_attack",
                            "variable"
                        ],
                        [
                            "self.lambda_ * loss_labeled + (1 - self.lambda_) * loss_attack",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(attack_loss_per_node)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.attribute_changes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_830": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_398": {
                "params": {
                    "value": "tf.reshape(self.modified_adjacency, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "adj_argmax_combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([adj_meta_approx_argmax, adj_argmax_transpose_ix], name='Meta_approx_argmax_combined')",
                            "Call"
                        ],
                        [
                            "tf.stack([adj_meta_grad_argmax, adj_argmax_transpose_ix], name='Meta_grad_argmax_combined')",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_531": {
                "params": {
                    "value": "self.labels_onehot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.idx_labeled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_623": {
                "params": {
                    "value": "tf.reshape(self.modified_adjacency, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "adj_argmax_combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([adj_meta_approx_argmax, adj_argmax_transpose_ix], name='Meta_approx_argmax_combined')",
                            "Call"
                        ],
                        [
                            "tf.stack([adj_meta_grad_argmax, adj_argmax_transpose_ix], name='Meta_grad_argmax_combined')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_630": {
                "tensor": {
                    "value": "self.attributes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_303": {
                "x": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "self.adj_norm @ hidden @ w + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ tf.cast(tf.sparse_tensor_dense_matmul(tf.cast(hidden, tf.float32), tf.cast(w, tf.float32)), self.dtype) + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ tf.sparse_tensor_dense_matmul(hidden, w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "self.adj_norm @ tf.sparse_tensor_dense_matmul(hidden, w) + b",
                            "BinOp"
                        ],
                        [
                            "self.adj_norm @ hidden @ w + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.attributes",
                            "Attribute"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj_norm, tf.sparse_tensor_dense_matmul(self.attrs_comp, w)) + b",
                            "BinOp"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj_norm, self.attrs_comp @ w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.training, lambda : hidden_dropout, lambda : hidden) if self.dropout > 0.0 else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_399": {
                "tensor": {
                    "value": "self.modified_adjacency",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_624": {
                "tensor": {
                    "value": "self.modified_adjacency",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_637": {
                "params": {
                    "value": "tf.reshape(self.attributes, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "attribute_meta_grad_argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(self.attribute_meta_grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_304": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w in enumerate(weights)",
                            "Call"
                        ],
                        [
                            "w in enumerate(current_weights)",
                            "Call"
                        ],
                        [
                            "w in enumerate(final_weights)",
                            "Call"
                        ],
                        [
                            "self.weights[ix]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_638": {
                "tensor": {
                    "value": "self.attributes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}