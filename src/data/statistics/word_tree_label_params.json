{
    "main.py": {
        "tensorflow": {
            "cast_19": {
                "variable": {
                    "value": "coef_optional",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(target, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_27": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "model.predict(xtest)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.epsilon()",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1.0 - _epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "not_equal_19": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "model.predict(xtest)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "len(output.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_33": {
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "model.predict(xtest)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_29": {
                "x": {
                    "value": "target * tf.log(output)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "coef_optional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.not_equal(target, -1), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_30": {
                "input_tensor": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(target * tf.log(output), coef_optional) * W",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "len(output.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_29": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output / tf.reduce_sum(output, len(output.get_shape()) - 1, True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, _epsilon, 1.0 - _epsilon)",
                            "Call"
                        ],
                        [
                            "model.predict(xtest)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}