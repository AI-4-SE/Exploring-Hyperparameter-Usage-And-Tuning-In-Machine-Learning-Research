{
    "data/__init__.py": {
        "torch": {}
    },
    "data/animation_dataset.py": {
        "torch": {
            "cat_124": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[A, Ai]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data/base_dataset.py": {
        "torch": {
            "Tensor_90": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/dance_dataset.py": {
        "torch": {
            "cat_241": {
                "variable": {
                    "value": "kps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kps, kp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_278": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.opt.structure_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.load_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.load_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_289": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_341": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "17 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_349": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_296": {
                "variable": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "Bi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Bi, color)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/face_dataset.py": {
        "torch": {
            "cat_98": {
                "variable": {
                    "value": "Ai",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Ai, Li]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_162": {
                "tensors": {
                    "value": "[edge_tensor, dist_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "[dist_tensor, tensor_cropped]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data/fashion_dataset.py": {
        "torch": {}
    },
    "data/image_folder.py": {
        "torch": {}
    },
    "data/keypoint_dataset.py": {
        "torch": {
            "tensor_109": {
                "variable": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_data[seq_name['subject']][seq_name['action']][seq_name['camera']]",
                            "Subscript"
                        ],
                        [
                            "input_data[:, :, :-1] if 'detectron_pt_coco' in self.opt.input_path else input_data",
                            "IfExp"
                        ],
                        [
                            "input_data[:gt_data.shape[0], ...]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(input_data)[input_keypoint_list, ...]",
                            "Subscript"
                        ],
                        [
                            "self.data_normalization(input_data, self.input_data_type, camera)",
                            "Call"
                        ],
                        [
                            "self.random_transformation(gt_data, input_data)",
                            "Call"
                        ],
                        [
                            "torch.tensor(input_data)",
                            "Call"
                        ],
                        [
                            "self.data_normalization(input_data, self.input_data_type, camera)",
                            "Call"
                        ],
                        [
                            "input_data * scale + input_delta",
                            "BinOp"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "gt_data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.obtain_gt_data(seq_name, camera)",
                            "Call"
                        ],
                        [
                            "gt_data[:input_data.shape[0], ...]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(gt_data)[gt_keypoint_list, ...]",
                            "Subscript"
                        ],
                        [
                            "self.data_normalization(gt_data, self.gt_data_type, camera)",
                            "Call"
                        ],
                        [
                            "self.random_transformation(gt_data, input_data)",
                            "Call"
                        ],
                        [
                            "torch.tensor(gt_data)",
                            "Call"
                        ],
                        [
                            "self.data_normalization(gt_data, self.gt_data_type, camera)",
                            "Call"
                        ],
                        [
                            "self.gt_data[seq_name['subject']][seq_name['action']][seq_name['camera']]",
                            "Subscript"
                        ],
                        [
                            "gt_data[:, :, :2]",
                            "Subscript"
                        ],
                        [
                            "gt_data * scale + gt_delta",
                            "BinOp"
                        ],
                        [
                            "gt_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[delta_y, delta_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_data[seq_name['subject']][seq_name['action']][seq_name['camera']]",
                            "Subscript"
                        ],
                        [
                            "input_data[:, :, :-1] if 'detectron_pt_coco' in self.opt.input_path else input_data",
                            "IfExp"
                        ],
                        [
                            "input_data[:gt_data.shape[0], ...]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(input_data)[input_keypoint_list, ...]",
                            "Subscript"
                        ],
                        [
                            "self.data_normalization(input_data, self.input_data_type, camera)",
                            "Call"
                        ],
                        [
                            "self.random_transformation(gt_data, input_data)",
                            "Call"
                        ],
                        [
                            "torch.tensor(input_data)",
                            "Call"
                        ],
                        [
                            "self.data_normalization(input_data, self.input_data_type, camera)",
                            "Call"
                        ],
                        [
                            "input_data * scale + input_delta",
                            "BinOp"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_103": {
                "data": {
                    "value": "gt_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.obtain_gt_data(seq_name, camera)",
                            "Call"
                        ],
                        [
                            "gt_data[:input_data.shape[0], ...]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(gt_data)[gt_keypoint_list, ...]",
                            "Subscript"
                        ],
                        [
                            "self.data_normalization(gt_data, self.gt_data_type, camera)",
                            "Call"
                        ],
                        [
                            "self.random_transformation(gt_data, input_data)",
                            "Call"
                        ],
                        [
                            "torch.tensor(gt_data)",
                            "Call"
                        ],
                        [
                            "self.data_normalization(gt_data, self.gt_data_type, camera)",
                            "Call"
                        ],
                        [
                            "self.gt_data[seq_name['subject']][seq_name['action']][seq_name['camera']]",
                            "Subscript"
                        ],
                        [
                            "gt_data[:, :, :2]",
                            "Subscript"
                        ],
                        [
                            "gt_data * scale + gt_delta",
                            "BinOp"
                        ],
                        [
                            "gt_data",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data/keypointtest_dataset.py": {
        "torch": {
            "cat_66": {
                "variable": {
                    "value": "input_kp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left, current, right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pose_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "17 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_98": {
                "variable": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/market_dataset.py": {
        "torch": {}
    },
    "data/shapenet_dataset.py": {
        "torch": {
            "tensor_75": {
                "variable": {
                    "value": "BP1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.hdf5_data[source_id]['pose'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "BP2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.hdf5_data[target_id]['pose'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "BP1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.hdf5_data[source_id]['pose'][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/base_model.py": {
        "torch": {
            "save_149": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "save_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_168": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_162": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/dance_model.py": {
        "torch": {
            "cat_267": {
                "variable": {
                    "value": "gen_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.img_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_368": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.img_gen[i]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(fake, dim=2)",
                            "Call"
                        ],
                        [
                            "self.img_gen[i]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(fake, dim=2)",
                            "Call"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_369": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P_step[:, i, ...]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(real, dim=2)",
                            "Call"
                        ],
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_433": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.img_gen[i]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(fake, dim=2)",
                            "Call"
                        ],
                        [
                            "self.img_gen[i]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(fake, dim=2)",
                            "Call"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_81": {
                "variable": {
                    "value": "self.net_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_89": {
                "variable": {
                    "value": "self.net_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_93": {
                "variable": {
                    "value": "self.net_D_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net_D_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "L1Loss_97": {
                "variable": {
                    "value": "self.L1loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_104": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(filter(lambda p: p.requires_grad, self.net_G.parameters()))",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_109": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(filter(lambda p: p.requires_grad, self.net_D.parameters()), filter(lambda p: p.requires_grad, self.net_D_V.parameters()))",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr * opt.ratio_g2d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "self.P_gt_previous_recoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.pre_gt_image.unsqueeze(1), self.P_step[:, :-1, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/face_model.py": {
        "torch": {
            "cat_225": {
                "variable": {
                    "value": "self.test_generated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.test_generated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.img_gen[i]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(fake, dim=1)",
                            "Call"
                        ],
                        [
                            "self.img_gen[i]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(fake, dim=1)",
                            "Call"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P_frame_step[:, i, ...]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(real, dim=1)",
                            "Call"
                        ],
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.img_gen[i]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(fake, dim=1)",
                            "Call"
                        ],
                        [
                            "self.img_gen[i]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(fake, dim=1)",
                            "Call"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_82": {
                "variable": {
                    "value": "self.net_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_88": {
                "variable": {
                    "value": "self.net_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_93": {
                "variable": {
                    "value": "self.net_D_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net_D_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "L1Loss_98": {
                "variable": {
                    "value": "self.L1loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_99": {
                "variable": {
                    "value": "self.L2loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(filter(lambda p: p.requires_grad, self.net_G.parameters()))",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(filter(lambda p: p.requires_grad, self.net_D.parameters()), filter(lambda p: p.requires_grad, self.net_D_V.parameters()))",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr * opt.ratio_g2d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "model/keypoint_model.py": {
        "torch": {
            "ones_132": {
                "variable": {
                    "value": "skeleton_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_54": {
                "variable": {
                    "value": "self.net_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_59": {
                "variable": {
                    "value": "self.L2loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(filter(lambda p: p.requires_grad, self.net_G.parameters()))",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MSELoss_65": {
                "variable": {
                    "value": "self.L2loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "skeleton",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(skeleton, skeleton_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/networks/__init__.py": {
        "torch": {
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/networks/base_function.py": {
        "torch": {
            "Sequential_63": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool3d(kernel_size=(3, 2, 2), stride=(1, 2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.mlp_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(label_nc, nhidden, kernel_size=ks, padding=pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.mlp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.mlp_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_118": {
                "variable": {
                    "value": "segfeature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segfeature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(segfeature, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "segfeature",
                            "Method Argument"
                        ],
                        [
                            "segfeature",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_143": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.mlp_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(feature_nc, nhidden, bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.mlp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.mlp_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_199": {
                "variable": {
                    "value": "nonlinearity_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LambdaLR_217": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda_rule",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_243": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(net, gpu_ids)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_299": {
                "variable": {
                    "value": "xx_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_300": {
                "variable": {
                    "value": "yy_cahnnel",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_300": {
                "variable": {
                    "value": "yy_cahnnel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, xx_channel, yy_cahnnel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_415": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_428": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_429": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_430": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_431": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_433": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_445": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(source).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(B, -1, W * H)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "self.key_conv(target).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "proj_query",
                            "variable"
                        ]
                    ]
                }
            },
            "bmm_449": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "self.value_conv(source).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, W * H)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_462": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_463": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_464": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_465": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_467": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_479": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(source).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(B, -1, W * H)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "self.key_conv(target).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "proj_query",
                            "variable"
                        ]
                    ]
                }
            },
            "bmm_483": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "self.value_conv(source).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, W * H)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_498": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_499": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_500": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_505": {
                "variable": {
                    "value": "warp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([x, y], dim=0).float().cuda()",
                            "Call"
                        ],
                        [
                            "grid.unsqueeze(0).expand(b, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "2 * grid / (w - 1) - 1",
                            "BinOp"
                        ],
                        [
                            "(grid + flow_field).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_527": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "bypass",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_552": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_700": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "input_nc // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_701": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_702": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_704": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_720": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "self.key_conv(target).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "proj_query",
                            "variable"
                        ]
                    ]
                }
            },
            "bmm_724": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "self.value_conv(source).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, W * H)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_754": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_nc // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_755": {
                "variable": {
                    "value": "self.structure",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_nc // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_759": {
                "variable": {
                    "value": "self.corr_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_763": {
                "variable": {
                    "value": "self.pre_process",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(corr_in_nc, hidden_nc, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_767": {
                "variable": {
                    "value": "self.predict_flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_768": {
                "variable": {
                    "value": "self.deform_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * markov_kernel_size * markov_kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_769": {
                "variable": {
                    "value": "self.deform_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_nc, markov_kernel_size * markov_kernel_size, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_799": {
                "variable": {
                    "value": "self.fully_connect_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * feature_nc, hidden_nc, kernel_size=kernel_size, stride=kernel_size, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_809": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_param * block_source",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_817": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_param * block_source",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_838": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_nc // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_839": {
                "variable": {
                    "value": "self.structure",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_nc // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_843": {
                "variable": {
                    "value": "self.corr_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_847": {
                "variable": {
                    "value": "self.pre_process",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(corr_in_nc, hidden_nc, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_851": {
                "variable": {
                    "value": "self.predict_flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_915": {
                "variable": {
                    "value": "self.mlp_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(feature_nc, nhidden, bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_919": {
                "variable": {
                    "value": "self.mlp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Linear_920": {
                "variable": {
                    "value": "self.mlp_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "LeakyReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(input_nc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_92": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SELU_201": {
                "variable": {
                    "value": "nonlinearity_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_219": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_310": {
                "variable": {
                    "value": "rr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx_channel ** 2 + yy_cahnnel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret, rr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_347": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_349": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(input_nc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_376": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_378": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(input_nc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_383": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "bypass",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_512": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_523": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_525": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(input_nc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_537": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_548": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_550": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(input_nc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_569": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_612": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_654": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_663": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_665": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(input_nc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_676": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_685": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_687": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(input_nc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_731": {
                "variable": {
                    "value": "context_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre.view(B, -1, W * H)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_791": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_875": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_883": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_885": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(input_nc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_899": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n_out, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_900": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_out, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_53": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_54": {
                "in_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_55": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool3d_63": {
                "kernel_size": {
                    "value": "(3, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "label_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_nc",
                            "Method Argument"
                        ],
                        [
                            "label_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "feature_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_203": {
                "variable": {
                    "value": "nonlinearity_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_221": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_277": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_326": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_431": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_465": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_518": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_519": {
                "in_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_520": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_543": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_544": {
                "in_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_545": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_552": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_578": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_579": {
                "in_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_621": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_622": {
                "in_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_701": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_702": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_764": {
                "in_channels": {
                    "value": "corr_in_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(corr_size + 1) ** 2",
                            "BinOp"
                        ],
                        [
                            "(corr_size + 1) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_765": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_770": {
                "in_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "markov_kernel_size * markov_kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_771": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_795": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_800": {
                "in_channels": {
                    "value": "2 * feature_nc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_802": {
                "in_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "kernel_size * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_806": {
                "input": {
                    "value": "flow_field",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * flow_field / (w - 1)",
                            "BinOp"
                        ],
                        [
                            "flow_field",
                            "Method Argument"
                        ],
                        [
                            "flow_field",
                            "Method Argument"
                        ],
                        [
                            "flow_field",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_807": {
                "tensors": {
                    "value": "(block_target, block_source)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_814": {
                "input": {
                    "value": "flow_field",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * flow_field / (w - 1)",
                            "BinOp"
                        ],
                        [
                            "flow_field",
                            "Method Argument"
                        ],
                        [
                            "flow_field",
                            "Method Argument"
                        ],
                        [
                            "flow_field",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_815": {
                "tensors": {
                    "value": "(block_target, block_source)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_848": {
                "in_channels": {
                    "value": "corr_in_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(corr_size + 1) ** 2",
                            "BinOp"
                        ],
                        [
                            "(corr_size + 1) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "min(input_nc, output_nc) if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ],
                        [
                            "hidden_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_849": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_880": {
                "in_features": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "layer_norm_905": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(w).view(1, -1).expand(h, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "normalized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[1:]",
                            "Subscript"
                        ],
                        [
                            "x.size()[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight.expand(normalized_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.expand(normalized_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "layer_norm_907": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(w).view(1, -1).expand(h, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "normalized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[1:]",
                            "Subscript"
                        ],
                        [
                            "x.size()[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_916": {
                "in_features": {
                    "value": "feature_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ],
                        [
                            "feature_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_917": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ],
                        [
                            "norm_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_205": {
                "variable": {
                    "value": "nonlinearity_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_582": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_625": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "input_nc if output_nc is None else output_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_663": {
                "padding": {
                    "value": "int(kernel_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_663": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_665": {
                "padding": {
                    "value": "int(kernel_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_665": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_685": {
                "padding": {
                    "value": "int(kernel_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_687": {
                "padding": {
                    "value": "int(kernel_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_733": {
                "tensors": {
                    "value": "[out, context_flow]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_899": {
                "*size": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_900": {
                "*size": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "layer_norm_932": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(w).view(1, -1).expand(h, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "normalized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[1:]",
                            "Subscript"
                        ],
                        [
                            "x.size()[1:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "model/networks/base_network.py": {
        "torch": {}
    },
    "model/networks/block_extractor/block_extractor.py": {
        "torch": {}
    },
    "model/networks/block_extractor/setup.py": {
        "torch": {}
    },
    "model/networks/block_extractor/test_block_extractor.py": {
        "torch": {
            "Event_28": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_29": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor_1, tensor_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_74": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "source.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_75": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradcheck_78": {
                "func": {
                    "value": "extractor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BlockExtractor(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(source, flow)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "model/networks/discriminator.py": {
        "torch": {
            "Sequential_94": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "ndf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "ndf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/networks/encoder.py": {
        "torch": {
            "softplus_269": {
                "input": {
                    "value": "p_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(b, z_nc, w, h)",
                            "Call"
                        ],
                        [
                            "torch.split(o, self.z_nc, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(o, self.z_nc, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(f_in, self.z_nc, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_342": {
                "input": {
                    "value": "p_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(b, z_nc, w, h)",
                            "Call"
                        ],
                        [
                            "torch.split(o, self.z_nc, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(o, self.z_nc, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(f_in, self.z_nc, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_475": {
                "input": {
                    "value": "p_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(b, z_nc, w, h)",
                            "Call"
                        ],
                        [
                            "torch.split(o, self.z_nc, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(o, self.z_nc, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(f_in, self.z_nc, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/networks/external_function.py": {
        "torch": {
            "L1Loss_37": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_62": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flow2grid(flow_fields)",
                            "Call"
                        ],
                        [
                            "torch.stack([x, y], dim=0)",
                            "Call"
                        ],
                        [
                            "grid.unsqueeze(0).expand(b, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "torch.stack([x, y], dim=0)",
                            "Call"
                        ],
                        [
                            "grid.unsqueeze(0).expand(b, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "2 * grid - 1",
                            "BinOp"
                        ],
                        [
                            "(grid + flow).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "grid",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel.type_as(flow_fields)",
                            "Call"
                        ],
                        [
                            "weights",
                            "Method Argument"
                        ],
                        [
                            "[1.0",
                            "Method Argument"
                        ],
                        [
                            "[1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_67": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_H * kernels_new",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.kz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "results.size()",
                            "Call"
                        ],
                        [
                            "flow_field.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_74": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "results.size()",
                            "Call"
                        ],
                        [
                            "flow_field.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_75": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_131": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_172": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_207": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_254": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(flow, [h, w])",
                            "Call"
                        ],
                        [
                            "2 * flow / torch.tensor([w, h]).view(1, 2, 1, 1).expand(b, -1, h, w).type_as(flow)",
                            "BinOp"
                        ],
                        [
                            "flow",
                            "Method Argument"
                        ],
                        [
                            "flow",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_268": {
                "variable": {
                    "value": "(correction_max, max_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "correction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(source_norm, target_norm)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_276": {
                "variable": {
                    "value": "correction_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "input_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear_warp(source_vgg, flow).view(b, c, -1)",
                            "Call"
                        ],
                        [
                            "self.resample(source_vgg, flow).view(b, c, -1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(source, grid).view(b, c, -1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "target_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_vgg.view(b, c, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_277": {
                "variable": {
                    "value": "loss_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-correction_sample / (correction_max + self.eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_313": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_318": {
                "variable": {
                    "value": "input_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flow2grid(flow_fields)",
                            "Call"
                        ],
                        [
                            "torch.stack([x, y], dim=0)",
                            "Call"
                        ],
                        [
                            "grid.unsqueeze(0).expand(b, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "torch.stack([x, y], dim=0)",
                            "Call"
                        ],
                        [
                            "grid.unsqueeze(0).expand(b, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "2 * grid - 1",
                            "BinOp"
                        ],
                        [
                            "(grid + flow).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "grid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_327": {
                "variable": {
                    "value": "self.relu1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_328": {
                "variable": {
                    "value": "self.relu1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_330": {
                "variable": {
                    "value": "self.relu2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_331": {
                "variable": {
                    "value": "self.relu2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "variable": {
                    "value": "self.relu3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_334": {
                "variable": {
                    "value": "self.relu3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_335": {
                "variable": {
                    "value": "self.relu3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_336": {
                "variable": {
                    "value": "self.relu3_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_338": {
                "variable": {
                    "value": "self.relu4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_339": {
                "variable": {
                    "value": "self.relu4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_340": {
                "variable": {
                    "value": "self.relu4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_341": {
                "variable": {
                    "value": "self.relu4_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "variable": {
                    "value": "self.relu5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_344": {
                "variable": {
                    "value": "self.relu5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_345": {
                "variable": {
                    "value": "self.relu5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_346": {
                "variable": {
                    "value": "self.relu5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_99": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_263": {
                "variable": {
                    "value": "correction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_all / (source_all.norm(dim=2, keepdim=True) + self.eps)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "target_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_all / (target_all.norm(dim=1, keepdim=True) + self.eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_281": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(mask, size=(target_vgg.size(2), target_vgg.size(3)))",
                            "Call"
                        ],
                        [
                            "mask.view(-1, target_vgg.size(2) * target_vgg.size(3))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(target_vgg.size(2), target_vgg.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "results.size()",
                            "Call"
                        ],
                        [
                            "flow_field.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "results.size()",
                            "Call"
                        ],
                        [
                            "flow_field.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "results.size()",
                            "Call"
                        ],
                        [
                            "flow_field.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_68": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.avg_pool2d(grid_H * kernels_new, self.kz, self.kz)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_95": {
                "data": {
                    "value": "target_real_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_96": {
                "data": {
                    "value": "target_fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MSELoss_102": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_311": {
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "results.size()",
                            "Call"
                        ],
                        [
                            "flow_field.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_312": {
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "results.size()",
                            "Call"
                        ],
                        [
                            "flow_field.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_316": {
                "data": {
                    "value": "[w, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_279": {
                "input": {
                    "value": "loss_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-correction_sample / (correction_max + self.eps))",
                            "Call"
                        ],
                        [
                            "loss_map - torch.exp(torch.tensor(-1).type_as(loss_map))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_279": {
                "input": {
                    "value": "torch.tensor(-1).type_as(loss_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_283": {
                "input": {
                    "value": "torch.tensor(-1).type_as(loss_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_284": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(mask, size=(target_vgg.size(2), target_vgg.size(3)))",
                            "Call"
                        ],
                        [
                            "mask.view(-1, target_vgg.size(2) * target_vgg.size(3))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_279": {
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_283": {
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/networks/generator.py": {
        "torch": {
            "cat_215": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source, source_B, target_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_338": {
                "variable": {
                    "value": "self.expand_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "keypoint_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_341": {
                "variable": {
                    "value": "self.shrink",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "keypoint_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_342": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.15",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_343": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_344": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_360": {
                "variable": {
                    "value": "self.layers_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_361": {
                "variable": {
                    "value": "self.layers_ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers_ln",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv1d_363": {
                "variable": {
                    "value": "self.feature_conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "keypoint_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_364": {
                "variable": {
                    "value": "self.feature_conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_365": {
                "variable": {
                    "value": "self.feature_conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_371": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lrelu(self.feature_conv_1(kp))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.feature_conv_2(feature))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.feature_conv_3(feature))",
                            "Call"
                        ],
                        [
                            "torch.mean(feature, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_552": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(BP, P_previous, BP_previous, P_reference, BP_reference)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_755": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlockDecoder(ngf * mult_prev, ngf * mult, None, norm_layer, nonlinearity, use_spect, use_coord)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlocks(num_blocks - 1, ngf * mult_prev, None, None, norm_layer, nonlinearity, False, use_spect, use_coord)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "variable": {
                    "value": "flow_out",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "flow_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ngf * mult, 1, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_459": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlockDecoder(ngf * mult_prev, ngf * mult, None, norm_layer, nonlinearity, use_spect, use_coord)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_462": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlocks(num_blocks - 1, ngf * mult_prev, None, None, norm_layer, nonlinearity, False, use_spect, use_coord)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_541": {
                "variable": {
                    "value": "flow_out",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_544": {
                "variable": {
                    "value": "flow_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ngf * mult, 2, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_569": {
                "variable": {
                    "value": "(flow_field_p, flow_field_r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flow_field",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_output(out, i)",
                            "Call"
                        ],
                        [
                            "self.attn_output(out, i)",
                            "Call"
                        ],
                        [
                            "self.attn_output(out, i)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_570": {
                "variable": {
                    "value": "(mask_p, mask_r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_output(out, i)",
                            "Call"
                        ],
                        [
                            "model(out)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.attn_output(out, i)",
                            "Call"
                        ],
                        [
                            "model(out)",
                            "Call"
                        ],
                        [
                            "self.attn_output(out, i)",
                            "Call"
                        ],
                        [
                            "model(out)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_636": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlockDecoder(ngf * mult_prev, ngf * mult, None, norm_layer, nonlinearity, use_spect, use_coord)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_639": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlocks(num_blocks - 1, ngf * mult_prev, None, None, norm_layer, nonlinearity, False, use_spect, use_coord)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_708": {
                "variable": {
                    "value": "flow_out",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_711": {
                "variable": {
                    "value": "flow_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ngf * mult, 1, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_352": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dilation": {
                    "value": "next_dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "variable"
                        ],
                        [
                            "next_dilation * kernel_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_355": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_207": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_544": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_545": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_711": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_712": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/networks/local_attn_reshape/local_attn_reshape.py": {
        "torch": {}
    },
    "model/networks/local_attn_reshape/setup.py": {
        "torch": {}
    },
    "model/networks/local_attn_reshape/test_local_attn_reshape.py": {
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_66": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradcheck_70": {
                "func": {
                    "value": "extractor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LocalAttnReshape(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand(4, 9, 14, 10).double().cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/networks/resample2d_package/resample2d.py": {
        "torch": {
            "tensor_47": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sigma.expand(input2.size(0), 1, input2.size(2), input2.size(3)).type(input2.dtype)",
                            "Call"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input2, sigma)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/networks/resample2d_package/setup.py": {
        "torch": {}
    },
    "model/pose_model.py": {
        "torch": {}
    },
    "model/poseflownet_model.py": {
        "torch": {}
    },
    "model/shapenet_model.py": {
        "torch": {}
    },
    "model/shapenetflow_model.py": {
        "torch": {}
    },
    "options/base_options.py": {
        "torch": {
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_82": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_85": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_device_95": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "script/inception.py": {
        "torch": {
            "ModuleList_57": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.upsample(x, size=(299, 299), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_75": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_99": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "script/metrics.py": {
        "torch": {
            "from_numpy_179": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_494": {
                "variable": {
                    "value": "img_1_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "imgs_1[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_495": {
                "variable": {
                    "value": "img_2_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "imgs_2[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_554": {
                "variable": {
                    "value": "img_1_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "imgs_1[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_555": {
                "variable": {
                    "value": "img_2_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "imgs_2[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_189": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/camera.py": {
        "torch": {
            "clamp_57": {
                "variable": {
                    "value": "XX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X[..., :2] / X[..., 2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XX[..., :2] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(XX.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_61": {
                "variable": {
                    "value": "tan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p * XX",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(XX.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_86": {
                "variable": {
                    "value": "XX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X[..., :2] / X[..., 2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_136": {
                "variable": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "len(q.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_137": {
                "variable": {
                    "value": "uuv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(qvec, v, dim=len(q.shape) - 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "len(q.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_60": {
                "input": {
                    "value": "k * torch.cat((r2, r2 ** 2, r2 ** 3), dim=len(r2.shape) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(r2.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "args[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arg in enumerate(args)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "(w, -xyz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(q.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "(r2, r2 ** 2, r2 ** 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(r2.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "util/openpose_utils.py": {
        "torch": {
            "from_numpy_83": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "util/task.py": {
        "torch": {
            "ones_like_17": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((size[1], size[2], 1), np.uint8)",
                            "Call"
                        ],
                        [
                            "img.reshape(size[2], size[1])",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img * 255)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_36": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((size[1], size[2], 1), np.uint8)",
                            "Call"
                        ],
                        [
                            "img.reshape(size[2], size[1])",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img * 255)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_52": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((size[1], size[2], 1), np.uint8)",
                            "Call"
                        ],
                        [
                            "img.reshape(size[2], size[1])",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img * 255)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_102": {
                "variable": {
                    "value": "scaled_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((size[1], size[2], 1), np.uint8)",
                            "Call"
                        ],
                        [
                            "img.reshape(size[2], size[1])",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img * 255)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.size()",
                            "Call"
                        ],
                        [
                            "img.size()",
                            "Call"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "torch": {
            "from_numpy_64": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flow_compute_color(u, v, convert_to_bgr)",
                            "Call"
                        ],
                        [
                            "torch.tensor(image).float().permute(2, 0, 1) / 255.0 * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_215": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}