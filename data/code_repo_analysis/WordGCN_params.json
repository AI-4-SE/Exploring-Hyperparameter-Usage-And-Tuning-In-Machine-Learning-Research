{
    "helper.py": {
        "tensorflow": {
            "ConfigProto_41": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_43": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_45": {
                "variable": {
                    "value": "summ_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tf_board/debug_nn",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "tensorflow": {}
    },
    "semgcn.py": {
        "tensorflow": {
            "ConfigProto_610": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_135": {
                "variable": {
                    "value": "self.sent_wrds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.p.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sent_wrds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "self.sent_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.p.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sent_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "self.adj_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_labels, self.p.batch_size, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "adj_ind",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "self.num_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.p.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "num_words",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_361": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embed_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.sent_wrds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_383": {
                "variable": {
                    "value": "target_words",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.sent_wrds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_384": {
                "variable": {
                    "value": "nn_out_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gcn_out[-1]",
                            "Subscript"
                        ],
                        [
                            "self.add_model()",
                            "Call"
                        ],
                        [
                            "nn_out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.p.embed_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fixed_unigram_candidate_sampler_386": {
                "variable": {
                    "value": "(neg_ids, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "true_classes": {
                    "value": "tf.cast(target_words, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_true": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_sampled": {
                    "value": "self.p.neg_samples * self.p.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "unique": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "distortion": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "range_max": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "unigrams": {
                    "value": "self.voc_freq_l",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_395": {
                "variable": {
                    "value": "neg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "neg_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.fixed_unigram_candidate_sampler(true_classes=tf.cast(target_words, tf.int64), num_true=1, num_sampled=self.p.neg_samples * self.p.batch_size, unique=True, distortion=0.75, range_max=self.vocab_size, unigrams=self.voc_freq_l)",
                            "Call"
                        ],
                        [
                            "tf.cast(neg_ids, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neg_ids, [self.p.batch_size, self.p.neg_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(neg_ids, [1, self.seq_len]), [self.p.batch_size, self.seq_len, self.p.neg_samples])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_397": {
                "variable": {
                    "value": "neg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neg_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.fixed_unigram_candidate_sampler(true_classes=tf.cast(target_words, tf.int64), num_true=1, num_sampled=self.p.neg_samples * self.p.batch_size, unique=True, distortion=0.75, range_max=self.vocab_size, unigrams=self.voc_freq_l)",
                            "Call"
                        ],
                        [
                            "tf.cast(neg_ids, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neg_ids, [self.p.batch_size, self.p.neg_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(neg_ids, [1, self.seq_len]), [self.p.batch_size, self.seq_len, self.p.neg_samples])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.p.batch_size, self.p.neg_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_398": {
                "variable": {
                    "value": "neg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(neg_ids, [1, self.seq_len])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.p.batch_size, self.seq_len, self.p.neg_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_400": {
                "variable": {
                    "value": "target_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(self.sent_wrds, axis=2), neg_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_405": {
                "variable": {
                    "value": "target_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "target_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(self.sent_wrds, axis=2), neg_ids], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_406": {
                "variable": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones([self.p.batch_size, self.seq_len, 1], dtype=tf.float32), tf.zeros([self.p.batch_size, self.seq_len, self.p.neg_samples], dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_411": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(nn_out, axis=2) * target_embed",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_412": {
                "variable": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.ones([self.p.batch_size, self.seq_len, 1], dtype=tf.float32), tf.zeros([self.p.batch_size, self.seq_len, self.p.neg_samples], dtype=tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_labels, [self.p.batch_size * self.seq_len, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.p.batch_size * self.seq_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_413": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(nn_out, axis=2) * target_embed, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred, [self.p.batch_size * self.seq_len, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.p.batch_size * self.seq_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_414": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.ones([self.p.batch_size, self.seq_len, 1], dtype=tf.float32), tf.zeros([self.p.batch_size, self.seq_len, self.p.neg_samples], dtype=tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_labels, [self.p.batch_size * self.seq_len, -1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(nn_out, axis=2) * target_embed, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred, [self.p.batch_size * self.seq_len, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_476": {
                "variable": {
                    "value": "self.merged_summ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_554": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_603": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_243": {
                "a": {
                    "value": "tf.cast(adj_mat, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_356": {
                "variable": {
                    "value": "_wrd_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embed_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "embed_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getEmbeddings(self.p.embed_loc, [self.id2voc[i] for i in range(len(self.voc2id))], self.p.embed_dim)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_357": {
                "variable": {
                    "value": "wrd_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, self.p.embed_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_358": {
                "variable": {
                    "value": "self.embed_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[_wrd_embed, wrd_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_612": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_243": {
                "x": {
                    "value": "adj_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((max_labels, self.p.batch_size, max_nodes, max_nodes), np.bool)",
                            "Call"
                        ],
                        [
                            "adj_mat",
                            "Method Argument"
                        ],
                        [
                            "adj_mat",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_354": {
                "name_or_scope": {
                    "value": "Embed_mat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_398": {
                "input": {
                    "value": "neg_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.fixed_unigram_candidate_sampler(true_classes=tf.cast(target_words, tf.int64), num_true=1, num_sampled=self.p.neg_samples * self.p.batch_size, unique=True, distortion=0.75, range_max=self.vocab_size, unigrams=self.voc_freq_l)",
                            "Call"
                        ],
                        [
                            "tf.cast(neg_ids, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neg_ids, [self.p.batch_size, self.p.neg_samples])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(neg_ids, [1, self.seq_len]), [self.p.batch_size, self.seq_len, self.p.neg_samples])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.seq_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_416": {
                "tensor": {
                    "value": "self.sent_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_417": {
                "input_tensor": {
                    "value": "self.sent_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_436": {
                "name": {
                    "value": "Optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_437": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.p.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_438": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.p.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_613": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_275": {
                "name": {
                    "value": "'%s-%d' % (name, layer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_278": {
                "variable": {
                    "value": "w_loop",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_loop",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.eye(in_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_279": {
                "variable": {
                    "value": "inp_loop",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "gcn_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[-1]",
                            "Subscript"
                        ],
                        [
                            "gcn_in",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_loop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_loop', initializer=tf.eye(in_dim), trainable=False, regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_357": {
                "shape": {
                    "value": "[1, self.p.embed_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_387": {
                "x": {
                    "value": "target_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.sent_wrds, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_401": {
                "input": {
                    "value": "self.sent_wrds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_407": {
                "shape": {
                    "value": "[self.p.batch_size, self.seq_len, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_408": {
                "shape": {
                    "value": "[self.p.batch_size, self.seq_len, self.p.neg_samples]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_411": {
                "input": {
                    "value": "nn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gcn_out[-1]",
                            "Subscript"
                        ],
                        [
                            "self.add_model()",
                            "Call"
                        ],
                        [
                            "nn_out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_420": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_277": {
                "name_or_scope": {
                    "value": "'Loop-name-%s_layer-%d' % (name, layer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_280": {
                "variable": {
                    "value": "inp_loop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp_loop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(gcn_in, w_loop, axes=[2, 0])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp_loop, keep_prob=self.p.dropout)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.p.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_289": {
                "variable": {
                    "value": "w_in",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_in",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.eye(in_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_290": {
                "variable": {
                    "value": "w_out",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_out",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.eye(in_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_291": {
                "variable": {
                    "value": "b_in",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, gcn_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_292": {
                "variable": {
                    "value": "b_out",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_out",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, gcn_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_305": {
                "variable": {
                    "value": "adj_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "adj_mat[lbl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_336": {
                "tensor": {
                    "value": "3 * self.num_words",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.p.batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_338": {
                "features": {
                    "value": "act_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_act",
                            "variable"
                        ],
                        [
                            "act_sum / tf.reshape(3 * self.num_words, [self.p.batch_size, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "act_sum + out_act",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "'label-%d_name-%s_layer-%d' % (lbl, name, layer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_295": {
                "variable": {
                    "value": "w_gin",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_gin",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_296": {
                "variable": {
                    "value": "b_gin",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_gin",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_297": {
                "variable": {
                    "value": "w_gout",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_gout",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_298": {
                "variable": {
                    "value": "b_gout",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_gout",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_302": {
                "name": {
                    "value": "'in_arcs-%s_name-%s_layer-%d' % (lbl, name, layer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_308": {
                "variable": {
                    "value": "inp_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(gcn_in, w_in, axes=[2, 0]) + tf.expand_dims(b_in, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(inp_in, keep_prob=self.p.dropout)",
                            "Call"
                        ],
                        [
                            "inp_in * tf.sigmoid(inp_gin)",
                            "BinOp"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.p.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_320": {
                "name": {
                    "value": "'out_arcs-%s_name-%s_layer-%d' % (lbl, name, layer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_325": {
                "variable": {
                    "value": "inp_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(gcn_in, w_out, axes=[2, 0]) + tf.expand_dims(b_out, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(inp_out, keep_prob=self.p.dropout)",
                            "Call"
                        ],
                        [
                            "inp_out * tf.sigmoid(inp_gout)",
                            "BinOp"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.p.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_278": {
                "num_rows": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gcn_dim",
                            "variable"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensordot_304": {
                "a": {
                    "value": "gcn_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[-1]",
                            "Subscript"
                        ],
                        [
                            "gcn_in",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_in', initializer=tf.eye(in_dim), trainable=True, regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_304": {
                "input": {
                    "value": "b_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b_in', [1, gcn_dim], trainable=True, initializer=tf.constant_initializer(0.0), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_321": {
                "a": {
                    "value": "gcn_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[-1]",
                            "Subscript"
                        ],
                        [
                            "gcn_in",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_out', initializer=tf.eye(in_dim), trainable=True, regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_321": {
                "input": {
                    "value": "b_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b_out', [1, gcn_dim], trainable=True, initializer=tf.constant_initializer(0.0), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_289": {
                "num_rows": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gcn_dim",
                            "variable"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_290": {
                "num_rows": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gcn_dim",
                            "variable"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_291": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_292": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensordot_311": {
                "a": {
                    "value": "gcn_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[-1]",
                            "Subscript"
                        ],
                        [
                            "gcn_in",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_gin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_gin', [in_dim, 1], initializer=tf.contrib.layers.xavier_initializer(), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_311": {
                "input": {
                    "value": "b_gin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b_gin', [1], initializer=tf.constant_initializer(0.0), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_312": {
                "x": {
                    "value": "inp_gin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(gcn_in, w_gin, axes=[2, 0]) + tf.expand_dims(b_gin, axis=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensordot_328": {
                "a": {
                    "value": "gcn_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[-1]",
                            "Subscript"
                        ],
                        [
                            "gcn_in",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_gout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_gout', [in_dim, 1], initializer=tf.contrib.layers.xavier_initializer(), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_328": {
                "input": {
                    "value": "b_gout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b_gout', [1], initializer=tf.constant_initializer(0.0), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_329": {
                "x": {
                    "value": "inp_gout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(gcn_in, w_gout, axes=[2, 0]) + tf.expand_dims(b_gout, axis=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_296": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_298": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "syngcn.py": {
        "tensorflow": {
            "ConfigProto_595": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "self.sent_wrds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.p.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sent_wrds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "self.sent_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.p.batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sent_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "self.neg_wrds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.p.batch_size, None, self.p.num_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_wrds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "self.adj_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_deLabel, self.p.batch_size, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "adj_ind",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "self.num_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.p.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "num_words",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_342": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embed_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.sent_wrds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_366": {
                "variable": {
                    "value": "target_words",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.sent_wrds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fixed_unigram_candidate_sampler_368": {
                "variable": {
                    "value": "(neg_ids, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "true_classes": {
                    "value": "tf.cast(target_words, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_true": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_sampled": {
                    "value": "self.p.num_neg * self.p.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "unique": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "distortion": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "range_max": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "unigrams": {
                    "value": "self.voc_freq_l",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_377": {
                "variable": {
                    "value": "neg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "neg_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.fixed_unigram_candidate_sampler(true_classes=tf.cast(target_words, tf.int64), num_true=1, num_sampled=self.p.num_neg * self.p.batch_size, unique=True, distortion=0.75, range_max=self.vocab_size, unigrams=self.voc_freq_l)",
                            "Call"
                        ],
                        [
                            "tf.cast(neg_ids, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neg_ids, [self.p.batch_size, self.p.num_neg])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(neg_ids, [1, self.seq_len]), [self.p.batch_size, self.seq_len, self.p.num_neg])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_378": {
                "variable": {
                    "value": "neg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neg_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.fixed_unigram_candidate_sampler(true_classes=tf.cast(target_words, tf.int64), num_true=1, num_sampled=self.p.num_neg * self.p.batch_size, unique=True, distortion=0.75, range_max=self.vocab_size, unigrams=self.voc_freq_l)",
                            "Call"
                        ],
                        [
                            "tf.cast(neg_ids, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neg_ids, [self.p.batch_size, self.p.num_neg])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(neg_ids, [1, self.seq_len]), [self.p.batch_size, self.seq_len, self.p.num_neg])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.p.batch_size, self.p.num_neg]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_379": {
                "variable": {
                    "value": "neg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(neg_ids, [1, self.seq_len])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.p.batch_size, self.seq_len, self.p.num_neg]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_381": {
                "variable": {
                    "value": "target_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(self.sent_wrds, axis=2), neg_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_386": {
                "variable": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones([self.p.batch_size, self.seq_len, 1], dtype=tf.float32), tf.zeros([self.p.batch_size, self.seq_len, self.p.num_neg], dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_390": {
                "variable": {
                    "value": "target_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "target_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(self.sent_wrds, axis=2), neg_ids], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_391": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(nn_out, axis=2) * target_embed",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_392": {
                "variable": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.ones([self.p.batch_size, self.seq_len, 1], dtype=tf.float32), tf.zeros([self.p.batch_size, self.seq_len, self.p.num_neg], dtype=tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_labels, [self.p.batch_size * self.seq_len, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.p.batch_size * self.seq_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_393": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(nn_out, axis=2) * target_embed, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred, [self.p.batch_size * self.seq_len, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.p.batch_size * self.seq_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_394": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.ones([self.p.batch_size, self.seq_len, 1], dtype=tf.float32), tf.zeros([self.p.batch_size, self.seq_len, self.p.num_neg], dtype=tf.float32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(target_labels, [self.p.batch_size * self.seq_len, -1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(nn_out, axis=2) * target_embed, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred, [self.p.batch_size * self.seq_len, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_457": {
                "variable": {
                    "value": "self.merged_summ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_533": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_588": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_203": {
                "a": {
                    "value": "tf.cast(adj_mat, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_333": {
                "variable": {
                    "value": "wrd_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, self.p.embed_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_334": {
                "variable": {
                    "value": "self.embed_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[_wrd_embed, wrd_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_336": {
                "variable": {
                    "value": "_context_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "context_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vocab_size, self.p.embed_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_338": {
                "variable": {
                    "value": "self.context_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[_context_matrix, wrd_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_339": {
                "variable": {
                    "value": "self.context_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "context_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vocab_size + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_597": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_203": {
                "x": {
                    "value": "adj_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj_mat",
                            "Method Argument"
                        ],
                        [
                            "adj_mat",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_321": {
                "name_or_scope": {
                    "value": "Embed_mat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_326": {
                "variable": {
                    "value": "_wrd_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embed_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "embed_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getEmbeddings(self.p.embed_loc, [self.id2voc[i] for i in range(len(self.voc2id))], self.p.embed_dim)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_330": {
                "variable": {
                    "value": "_wrd_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embed_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vocab_size, self.p.embed_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "embed_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getEmbeddings(self.p.embed_loc, [self.id2voc[i] for i in range(len(self.voc2id))], self.p.embed_dim)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_379": {
                "input": {
                    "value": "neg_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.fixed_unigram_candidate_sampler(true_classes=tf.cast(target_words, tf.int64), num_true=1, num_sampled=self.p.num_neg * self.p.batch_size, unique=True, distortion=0.75, range_max=self.vocab_size, unigrams=self.voc_freq_l)",
                            "Call"
                        ],
                        [
                            "tf.cast(neg_ids, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neg_ids, [self.p.batch_size, self.p.num_neg])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(neg_ids, [1, self.seq_len]), [self.p.batch_size, self.seq_len, self.p.num_neg])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.seq_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_396": {
                "tensor": {
                    "value": "self.sent_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_397": {
                "input_tensor": {
                    "value": "self.sent_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_416": {
                "name": {
                    "value": "Optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_417": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.p.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_418": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.p.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_234": {
                "name": {
                    "value": "'%s-%d' % (name, layer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "act_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, max_nodes, gcn_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_333": {
                "shape": {
                    "value": "[1, self.p.embed_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_369": {
                "x": {
                    "value": "target_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.sent_wrds, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_382": {
                "input": {
                    "value": "self.sent_wrds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_387": {
                "shape": {
                    "value": "[self.p.batch_size, self.seq_len, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_388": {
                "shape": {
                    "value": "[self.p.batch_size, self.seq_len, self.p.num_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_391": {
                "input": {
                    "value": "nn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gcn_out[-1]",
                            "Subscript"
                        ],
                        [
                            "self.add_model()",
                            "Call"
                        ],
                        [
                            "nn_out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_400": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_238": {
                "variable": {
                    "value": "w_loop",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_loop",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, gcn_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_239": {
                "variable": {
                    "value": "w_gloop",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_gloop",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_241": {
                "variable": {
                    "value": "inp_loop",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "gcn_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[-1]",
                            "Subscript"
                        ],
                        [
                            "embed",
                            "variable"
                        ],
                        [
                            "gcn_in",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_loop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_loop', [in_dim, gcn_dim], initializer=tf.contrib.layers.xavier_initializer(), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_258": {
                "variable": {
                    "value": "w_in",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, gcn_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_259": {
                "variable": {
                    "value": "w_out",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_out",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, gcn_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_260": {
                "variable": {
                    "value": "b_in",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, gcn_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_261": {
                "variable": {
                    "value": "b_out",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_out",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, gcn_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_273": {
                "variable": {
                    "value": "adj_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "adj_mat[lbl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_303": {
                "features": {
                    "value": "act_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, max_nodes, gcn_dim])",
                            "Call"
                        ],
                        [
                            "loop_act",
                            "variable"
                        ],
                        [
                            "act_sum + (in_act + out_act)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_340": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "'Loop-name-%s_layer-%d' % (name, layer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_242": {
                "variable": {
                    "value": "inp_loop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp_loop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(gcn_in, w_loop, axes=[2, 0])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inp_loop, keep_prob=self.p.dropout)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.p.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_245": {
                "variable": {
                    "value": "loop_act",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "gcn_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[-1]",
                            "Subscript"
                        ],
                        [
                            "embed",
                            "variable"
                        ],
                        [
                            "gcn_in",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.sigmoid(w_gloop)",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_256": {
                "name_or_scope": {
                    "value": "'label-%d_name-%s_layer-%d' % (lbl, name, layer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_264": {
                "variable": {
                    "value": "w_gin",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_gin",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_265": {
                "variable": {
                    "value": "b_gin",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_gin",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_266": {
                "variable": {
                    "value": "w_gout",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_gout",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_267": {
                "variable": {
                    "value": "b_gout",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_gout",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_270": {
                "name": {
                    "value": "'in_arcs-%s_name-%s_layer-%d' % (lbl, name, layer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_276": {
                "variable": {
                    "value": "inp_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(gcn_in, w_in, axes=[2, 0]) + tf.expand_dims(b_in, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(inp_in, keep_prob=self.p.dropout)",
                            "Call"
                        ],
                        [
                            "inp_in * tf.sigmoid(inp_gin)",
                            "BinOp"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.p.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_286": {
                "name": {
                    "value": "'out_arcs-%s_name-%s_layer-%d' % (lbl, name, layer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_291": {
                "variable": {
                    "value": "inp_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(gcn_in, w_out, axes=[2, 0]) + tf.expand_dims(b_out, axis=0)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(inp_out, keep_prob=self.p.dropout)",
                            "Call"
                        ],
                        [
                            "inp_out * tf.sigmoid(inp_gout)",
                            "BinOp"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.p.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_272": {
                "a": {
                    "value": "gcn_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[-1]",
                            "Subscript"
                        ],
                        [
                            "embed",
                            "variable"
                        ],
                        [
                            "gcn_in",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_in', [in_dim, gcn_dim], initializer=tf.contrib.layers.xavier_initializer(), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_272": {
                "input": {
                    "value": "b_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b_in', [1, gcn_dim], initializer=tf.constant_initializer(0.0), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_287": {
                "a": {
                    "value": "gcn_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[-1]",
                            "Subscript"
                        ],
                        [
                            "embed",
                            "variable"
                        ],
                        [
                            "gcn_in",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_out', [in_dim, gcn_dim], initializer=tf.contrib.layers.xavier_initializer(), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_287": {
                "input": {
                    "value": "b_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b_out', [1, gcn_dim], initializer=tf.constant_initializer(0.0), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_245": {
                "x": {
                    "value": "w_gloop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_gloop', [in_dim, 1], initializer=tf.contrib.layers.xavier_initializer(), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_260": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_261": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensordot_279": {
                "a": {
                    "value": "gcn_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[-1]",
                            "Subscript"
                        ],
                        [
                            "embed",
                            "variable"
                        ],
                        [
                            "gcn_in",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_gin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_gin', [in_dim, 1], initializer=tf.contrib.layers.xavier_initializer(), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_279": {
                "input": {
                    "value": "b_gin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b_gin', [1], initializer=tf.constant_initializer(0.0), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_280": {
                "x": {
                    "value": "inp_gin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(gcn_in, w_gin, axes=[2, 0]) + tf.expand_dims(b_gin, axis=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensordot_294": {
                "a": {
                    "value": "gcn_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[-1]",
                            "Subscript"
                        ],
                        [
                            "embed",
                            "variable"
                        ],
                        [
                            "gcn_in",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_gout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_gout', [in_dim, 1], initializer=tf.contrib.layers.xavier_initializer(), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_294": {
                "input": {
                    "value": "b_gout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b_gout', [1], initializer=tf.constant_initializer(0.0), regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_295": {
                "x": {
                    "value": "inp_gout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(gcn_in, w_gout, axes=[2, 0]) + tf.expand_dims(b_gout, axis=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_265": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_267": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}