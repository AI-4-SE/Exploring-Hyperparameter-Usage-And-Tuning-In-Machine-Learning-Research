{
    "data_loader/data_loader.py": {
        "tensorflow": {
            "concat_102": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(batch, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_130": {
                "variable": {
                    "value": "matching_ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "matching_ws",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[self.get_w_by_ind(ind) for ind in id_imgs_indices]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(matching_ws, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "tensorflow": {
            "concat_105": {
                "variable": {
                    "value": "s_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[const_id, start_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_106": {
                "variable": {
                    "value": "e_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[const_id, end_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_125": {
                "variable": {
                    "value": "s_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[start_id, const_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_126": {
                "variable": {
                    "value": "e_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[end_id, const_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/arcface/arcface.py": {
        "tensorflow": {
            "norm_35": {
                "variable": {
                    "value": "embedding_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding / embedding_norm",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_37": {
                "variable": {
                    "value": "weights_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "cos_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding / embedding_norm",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.kernel / weights_norm",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "cos_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_41": {
                "variable": {
                    "value": "cos_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(embedding, weights, name='cos_t')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cos_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_42": {
                "variable": {
                    "value": "sin_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "cos_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(cos_t, name='cos_2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "sin_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_43": {
                "variable": {
                    "value": "sin_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sin_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.subtract(1.0, cos_t2, name='sin_2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "sin_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(cond_v, name='if_else')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_54": {
                "variable": {
                    "value": "cos_mt_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.nn.relu(cond_v, name='if_else'), dtype=tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "cos_mt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.s * tf.subtract(tf.multiply(cos_t, cos_m), tf.multiply(sin_t, sin_m), name='cos_mt')",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "keep_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.s * (cos_t - mm)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_56": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "one_hot_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_58": {
                "variable": {
                    "value": "inv_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, depth=self.output_dim, name='one_hot_mask')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "inverse_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_60": {
                "variable": {
                    "value": "s_cos_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "cos_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(embedding, weights, name='cos_t')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scalar_cos_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_62": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(s_cos_t, inv_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(cos_mt_temp, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "arcface_loss_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_44": {
                "x": {
                    "value": "tf.multiply(cos_t, cos_m)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(sin_t, sin_m)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "cos_mt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_51": {
                "features": {
                    "value": "cond_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cos_t - threshold",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "if_else",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_62": {
                "x": {
                    "value": "cos_mt_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(cond, cos_mt, keep_val)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, depth=self.output_dim, name='one_hot_mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_44": {
                "x": {
                    "value": "cos_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(embedding, weights, name='cos_t')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cos_m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.cos(self.m)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_45": {
                "x": {
                    "value": "sin_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sqrt(sin_t2, name='sin_t')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sin_m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.sin(self.m)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/arcface/inference.py": {
        "tensorflow": {
            "constant_86": {
                "variable": {
                    "value": "tf_transforms",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[transforms]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_87": {
                "variable": {
                    "value": "img_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_102": {
                "variable": {
                    "value": "normelized_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model_resnet(aligned_face)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/arcface/resnet.py": {
        "tensorflow": {
            "Input_120": {
                "variable": {
                    "value": "img_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[112, 112, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "Model_157": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "img_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.BatchNormalization(axis=bn_axis, scale=True, momentum=0.9, epsilon=2e-05, gamma_regularizer=tf.keras.regularizers.l2(l=0.0005), name=name + '_bn1')(input)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.ZeroPadding2D(padding=(1, 1), name=name + '_conv1_pad')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(num_filter, (3, 3), strides=(1, 1), padding='valid', kernel_initializer=initializer, use_bias=False, kernel_regularizer=tf.keras.regularizers.l2(l=0.0005), name=name + '_conv1')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.BatchNormalization(axis=bn_axis, scale=True, momentum=0.9, epsilon=2e-05, gamma_regularizer=tf.keras.regularizers.l2(l=0.0005), name=name + '_bn2')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.PReLU(name=name + '_relu1', alpha_regularizer=tf.keras.regularizers.l2(l=0.0005))(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.ZeroPadding2D(padding=(1, 1), name=name + '_conv2_pad')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(num_filter, (3, 3), strides=stride, padding='valid', kernel_initializer=initializer, use_bias=False, kernel_regularizer=tf.keras.regularizers.l2(l=0.0005), name=name + '_conv2')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.BatchNormalization(axis=bn_axis, scale=True, momentum=0.9, epsilon=2e-05, gamma_regularizer=tf.keras.regularizers.l2(l=0.0005), name=name + '_bn3')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.BatchNormalization(axis=bn_axis, scale=True, momentum=0.9, epsilon=2e-05, gamma_regularizer=tf.keras.regularizers.l2(l=0.0005), name='bn1')(input)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(0.4)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Reshape([resnet_shape[1] * resnet_shape[2] * resnet_shape[3]], name='reshapelayer')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(512, name='E_DenseLayer', kernel_initializer=initializer, kernel_regularizer=tf.keras.regularizers.l2(l=0.0005), bias_regularizer=tf.keras.regularizers.l2(l=0.0005))(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.BatchNormalization(axis=-1, scale=False, momentum=0.9, epsilon=2e-05, name='fc1')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.ZeroPadding2D(padding=(1, 1), name='conv0_pad')(img_input)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(64, (3, 3), strides=(1, 1), padding='valid', kernel_initializer=initializer, use_bias=False, kernel_regularizer=tf.keras.regularizers.l2(l=0.0005), name='conv0')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.BatchNormalization(axis=bn_axis, scale=True, momentum=0.9, epsilon=2e-05, gamma_regularizer=tf.keras.regularizers.l2(l=0.0005), name='bn0')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.PReLU(name='prelu0', alpha_regularizer=tf.keras.regularizers.l2(l=0.0005))(x)",
                            "Call"
                        ],
                        [
                            "residual_unit_v3(x, filter_list[i + 1], (2, 2), False, name='stage%d_unit%d' % (i + 1, 1))",
                            "Call"
                        ],
                        [
                            "get_fc1(x)",
                            "Call"
                        ],
                        [
                            "residual_unit_v3(x, filter_list[i + 1], (1, 1), True, name='stage%d_unit%d' % (i + 1, j + 2))",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "resnet50",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_10": {
                "axis": {
                    "value": "bn_axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_bn1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_19": {
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_conv1_pad'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_21": {
                "filters": {
                    "value": "num_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'glorot_normal'",
                            "Constant"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_conv1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_29": {
                "axis": {
                    "value": "bn_axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_bn2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "PReLU_38": {
                "name": {
                    "value": "name + '_relu1'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "alpha_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_41": {
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_conv2_pad'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_43": {
                "filters": {
                    "value": "num_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'glorot_normal'",
                            "Constant"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_conv2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_51": {
                "axis": {
                    "value": "bn_axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_bn3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_84": {
                "axis": {
                    "value": "bn_axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "bn1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Reshape_95": {
                "target_shape": {
                    "value": "[resnet_shape[1] * resnet_shape[2] * resnet_shape[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reshapelayer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_97": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "E_DenseLayer",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'glorot_normal'",
                            "Constant"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_103": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_122": {
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "conv0_pad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_124": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'glorot_normal'",
                            "Constant"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_132": {
                "axis": {
                    "value": "bn_axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "bn0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "PReLU_142": {
                "name": {
                    "value": "prelu0",
                    "type": "str",
                    "possible_values": []
                },
                "alpha_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_63": {
                "filters": {
                    "value": "num_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'glorot_normal'",
                            "Constant"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_conv1sc'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_71": {
                "axis": {
                    "value": "bn_axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.0005)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_sc'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/attr_encoder.py": {
        "tensorflow": {
            "InceptionV3_14": {
                "variable": {
                    "value": "attr_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pooling": {
                    "value": "avg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_22": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "preprocess_input_23": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "255 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_25": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(input_x, (299, 299))",
                            "Call"
                        ],
                        [
                            "preprocess_input(255 * x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/discriminator.py": {
        "tensorflow": {
            "Dense_14": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_weights(slope)",
                    "type": "Call",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(512,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_15": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_weights(slope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_16": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_weights(slope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_17": {
                "variable": {
                    "value": "self.linear5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_weights(slope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_18": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "slope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "model/face_detector.py": {
        "tensorflow": {
            "stack_27": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(boxes, axis=0)",
                            "Call"
                        ],
                        [
                            "boxes * self.args.resolution",
                            "BinOp"
                        ],
                        [
                            "self.model.inference(tf.expand_dims(input_x, axis=0))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(boxes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(boxes, axis=0)",
                            "Call"
                        ],
                        [
                            "boxes * self.args.resolution",
                            "BinOp"
                        ],
                        [
                            "self.model.inference(tf.expand_dims(input_x, axis=0))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "non_max_suppression_with_scores_36": {
                "variable": {
                    "value": "(indices, scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "boxes": {
                    "value": "boxes[..., :4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scores": {
                    "value": "boxes[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "iou_threshold": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "score_threshold": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_13": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_33": {
                "input": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/generator.py": {
        "tensorflow": {
            "concat_50": {
                "variable": {
                    "value": "z_tag",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[id_embedding, attr_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/id_encoder.py": {
        "tensorflow": {
            "load_model_11": {
                "variable": {
                    "value": "base_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Model_21": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "base_model.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[base_model.get_layer(name).output for name in intermediate_layers_names]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_50": {
                "variable": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(ps, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_74": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255 * img",
                            "BinOp"
                        ],
                        [
                            "img[:, min_x:max_x, min_y:max_y, :]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize(img, (256, 256))",
                            "Call"
                        ],
                        [
                            "img[:, start:224 + start, start:224 + start, :]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, :, ::-1] - self.mean",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "l2_normalize_94": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[-1]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.math.l2_normalize(embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedding, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_95": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[-1]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.math.l2_normalize(embedding, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedding, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_46": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "oneimg[y1:y2, x1:x2, :]",
                            "Subscript"
                        ],
                        [
                            "tf.convert_to_tensor(p)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(p, (self.args.resolution, self.args.resolution))",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_47": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "oneimg[y1:y2, x1:x2, :]",
                            "Subscript"
                        ],
                        [
                            "tf.convert_to_tensor(p)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(p, (self.args.resolution, self.args.resolution))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.args.resolution, self.args.resolution)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "numpy_function_29": {
                "variable": {
                    "value": "box",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self.mtcnn.detect_faces",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[oneimg]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "np.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/landmarks.py": {
        "tensorflow": {
            "load_18": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "resize_31": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imgs * 255",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(imgs, (160, 160))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(160, 160)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [max_expand, max_expand], [max_expand, max_expand], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_54": {
                "variable": {
                    "value": "pad_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imgs * 255",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(imgs, (160, 160))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [max_expand, max_expand], [max_expand, max_expand], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "127.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "crop_and_resize_73": {
                "variable": {
                    "value": "cropped_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "pad_imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(imgs, paddings, mode='CONSTANT', constant_values=127.0)",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "normed_bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.np_permute(new_bboxes, [1, 0, 3, 2]) / pad_imgs.shape[1]",
                            "BinOp"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "range(self.args.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "(160, 160)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "landmarks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "landmarks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(landmarks, [-1, 68, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 68, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_to_95": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "details",
                            "Name"
                        ],
                        [
                            "tf.broadcast_to(scale, [scale.shape[0], 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scale, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[scale.shape[0], 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_96": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "details",
                            "Name"
                        ],
                        [
                            "tf.broadcast_to(scale, [scale.shape[0], 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scale, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_98": {
                "variable": {
                    "value": "from_origin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "from_origin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(from_origin, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(from_origin, tf.dtypes.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_99": {
                "variable": {
                    "value": "from_origin",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "from_origin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(from_origin, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(from_origin, tf.dtypes.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/latent_mapping.py": {
        "tensorflow": {
            "Dense_15": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(2560,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Dense_16": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_17": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_weights()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_18": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_weights()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_21": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "broadcast_to_43": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.broadcast_to(x, s)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(x.shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/model.py": {
        "tensorflow": {}
    },
    "model/stylegan.py": {
        "tensorflow": {
            "constant_36": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(epsilon, dtype=x.dtype, name='epsilon')",
                            "Call"
                        ],
                        [
                            "1e-08",
                            "Constant"
                        ],
                        [
                            "tf.constant(epsilon, dtype=x.dtype, name='epsilon')",
                            "Call"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "epsilon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_225": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_226": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(f, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "f[:, np.newaxis] * f[np.newaxis, :]",
                            "BinOp"
                        ],
                        [
                            "f / np.sum(f)",
                            "BinOp"
                        ],
                        [
                            "f[::-1, ::-1]",
                            "Subscript"
                        ],
                        [
                            "f[:, :, np.newaxis, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.tile(f, [1, 1, int(x.shape[1]), 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(f, dtype=x.dtype, name='filter')",
                            "Call"
                        ],
                        [
                            "[np.sqrt(gain) / factor] * factor",
                            "BinOp"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_228": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(f, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "f[:, np.newaxis] * f[np.newaxis, :]",
                            "BinOp"
                        ],
                        [
                            "f / np.sum(f)",
                            "BinOp"
                        ],
                        [
                            "f[::-1, ::-1]",
                            "Subscript"
                        ],
                        [
                            "f[:, :, np.newaxis, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.tile(f, [1, 1, int(x.shape[1]), 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(f, dtype=x.dtype, name='filter')",
                            "Call"
                        ],
                        [
                            "[np.sqrt(gain) / factor] * factor",
                            "BinOp"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_229": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "orig_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2], 1, s[3], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_274": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, factor, 1, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_275": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2] * factor, s[3] * factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_385": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "G_mapping",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_417": {
                "variable": {
                    "value": "dlatents_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_layers, dlatent_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "G_synthesis/dlatents_in",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_466": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_20": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(alpha, dtype=x.dtype, name='alpha')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_22": {
                "function": {
                    "value": "lambda x: lrelu(x, alpha)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'G_mapping/Dense{}'.format(layer_idx)",
                            "Call"
                        ],
                        [
                            "'G_synthesis/{}x{}/{}/'.format(x.shape[2], x.shape[2], name)",
                            "Call"
                        ],
                        [
                            "'FromRGB_lod%d' % (resolution_log2 - res)",
                            "BinOp"
                        ],
                        [
                            "'%dx%d' % (2 ** res, 2 ** res)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "VarianceScaling_25": {
                "scale": {
                    "value": "gain",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.sqrt(2)",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "math.sqrt(2)",
                            "MethodArgument"
                        ],
                        [
                            "math.sqrt(2)",
                            "MethodArgument"
                        ],
                        [
                            "math.sqrt(2)",
                            "MethodArgument"
                        ],
                        [
                            "math.sqrt(2)",
                            "MethodArgument"
                        ],
                        [
                            "math.sqrt(2)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_53": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_55": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(epsilon, dtype=x.dtype, name='epsilon')",
                            "Call"
                        ],
                        [
                            "1e-08",
                            "Constant"
                        ],
                        [
                            "tf.constant(epsilon, dtype=x.dtype, name='epsilon')",
                            "Call"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "epsilon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "orig_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Lambda_61": {
                "function": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'G_mapping/Dense{}'.format(layer_idx)",
                            "Call"
                        ],
                        [
                            "'G_synthesis/{}x{}/{}/'.format(x.shape[2], x.shape[2], name)",
                            "Call"
                        ],
                        [
                            "'FromRGB_lod%d' % (resolution_log2 - res)",
                            "BinOp"
                        ],
                        [
                            "'%dx%d' % (2 ** res, 2 ** res)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Lambda_66": {
                "function": {
                    "value": "lambda x: broadcast(x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'G_mapping/Dense{}'.format(layer_idx)",
                            "Call"
                        ],
                        [
                            "'G_synthesis/{}x{}/{}/'.format(x.shape[2], x.shape[2], name)",
                            "Call"
                        ],
                        [
                            "'FromRGB_lod%d' % (resolution_log2 - res)",
                            "BinOp"
                        ],
                        [
                            "'%dx%d' % (2 ** res, 2 ** res)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_81": {
                "variable": {
                    "value": "coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "layer_idx < self.truncation_cutoff",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.truncation_psi * ones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones(layer_idx.shape, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "self.kernel",
                            "Attribute"
                        ],
                        [
                            "self.kernel_modifier(self.kernel)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "style",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "style",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DenseLayer(units=x.shape[1] * 2, gain=1, name=name + 'StyleMod')(StridedSlice(layer_idx, name=name + 'StridedSlice')(dlatents_in))",
                            "Call"
                        ],
                        [
                            "tf.reshape(style, [-1, 2, x.shape[1]] + [1] * (len(x.shape) - 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2, x.shape[1]] + [1] * (len(x.shape) - 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Lambda_235": {
                "function": {
                    "value": "lambda x: blur2d(x, blur_filter)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'G_mapping/Dense{}'.format(layer_idx)",
                            "Call"
                        ],
                        [
                            "'G_synthesis/{}x{}/{}/'.format(x.shape[2], x.shape[2], name)",
                            "Call"
                        ],
                        [
                            "'FromRGB_lod%d' % (resolution_log2 - res)",
                            "BinOp"
                        ],
                        [
                            "'%dx%d' % (2 ** res, 2 ** res)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "avg_pool_257": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_279": {
                "function": {
                    "value": "lambda x: _downscale2d(x, factor, gain)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/Downscaled2d'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Lambda_282": {
                "function": {
                    "value": "lambda x: _upscale2d(x, factor, gain)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/Upscaled2d'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_transpose_337": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "self.kernel",
                            "Attribute"
                        ],
                        [
                            "self.kernel_modifier(self.kernel)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "os",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.shape(inputs)[0], self.filters, inputs.shape[2] * 2, inputs.shape[3] * 2]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_349": {
                "variable": {
                    "value": "group_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.group_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_352": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_354": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_356": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_357": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_358": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_359": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_360": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_361": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[group_size, 1, s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_366": {
                "variable": {
                    "value": "group_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "group_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.minimum(group_size, tf.shape(x)[0])",
                            "Call"
                        ],
                        [
                            "tf.minimum(self.group_size, tf.shape(x)[0])",
                            "Call"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_368": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_369": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_371": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_372": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_373": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_374": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_375": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_376": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[group_size, 1, s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_468": {
                "inputs": {
                    "value": "dlatents_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=[num_layers, dlatent_size], name='G_synthesis/dlatents_in')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "G_synthesis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_509": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_548": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "maximum_21": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_37": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(x), axis=1, keepdims=True) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_54": {
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rsqrt_56": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_65": {
                "input": {
                    "value": "x[:, np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, dlatent_broadcast, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod([d for d in x.shape[1:]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_140": {
                "input": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(inputs)[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_168": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_296": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "self.kernel",
                            "Attribute"
                        ],
                        [
                            "self.kernel_modifier(self.kernel)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_328": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "self.kernel",
                            "Attribute"
                        ],
                        [
                            "self.kernel_modifier(self.kernel)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_329": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "self.kernel",
                            "Attribute"
                        ],
                        [
                            "self.kernel_modifier(self.kernel)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_330": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_355": {
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_362": {
                "values": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_365": {
                "name_or_scope": {
                    "value": "MinibatchStddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_370": {
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_377": {
                "values": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InputLayer_386": {
                "input_shape": {
                    "value": "[latent_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "G_mapping/latents_in",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "tensor": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "self.bias * self.lrmul",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_126": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._convolution_op(inputs, w * runtime_coef(self.kernel_size, self.gain, inputs.shape[1], self.filters))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, b, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, b, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, os, strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "self.bias * self.lrmul",
                            "BinOp"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_128": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._convolution_op(inputs, w * runtime_coef(self.kernel_size, self.gain, inputs.shape[1], self.filters))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, b, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, b, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, os, strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "self.bias * self.lrmul",
                            "BinOp"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "tensor": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "self.bias * self.lrmul",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_356": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_371": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, self.num_new_features, s[1] // self.num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "self.predict(latents)",
                            "Call"
                        ]
                    ]
                }
            },
            "InputLayer_510": {
                "input_shape": {
                    "value": "[3, resolution, resolution]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_37": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_170": {
                "tensor": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_297": {
                "inputs": {
                    "value": "[w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_335": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_350": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_366": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_37": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_56": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_140": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Flatten_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_168": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.math.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "model.layers[-1].output",
                            "Attribute"
                        ],
                        [
                            "Upscaled2d(name)(x)",
                            "Call"
                        ],
                        [
                            "Conv2d(filters, kernel_size, name=name, gain=gain, use_bias=use_bias)(x)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Const(name='G_synthesis/4x4/Const')(dlatents_in), 0, name='Const')",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/4x4/Conv', filters=nf(1), kernel_size=3, use_bias=False)(x), 1, 'Conv')",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ApplyNoise(name=name + 'Noise', is_const_noise=is_const_noise)([x, noise_inputs[layer_idx]])",
                            "Call"
                        ],
                        [
                            "ApplyBias(name=name + 'bias')(x)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.2, name=name + 'LeakyReLU')(x)",
                            "Call"
                        ],
                        [
                            "InstanceNorm(name=name + 'InstanceNorm')(x)",
                            "Call"
                        ],
                        [
                            "StyleModApply(name=name + 'StyleModApply')([x, style])",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Blur(name='G_synthesis/{}/{}/Blur'.format(name, name0))(upscaled), res * 2 - 4, name0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(Conv2d(name='G_synthesis/{}/{}'.format(name, name1), filters=nf(res - 1), kernel_size=3, use_bias=False)(x), res * 2 - 3, name1)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "self.model_mapping(inputs)",
                            "Call"
                        ],
                        [
                            "self.model_synthesis(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Lambda_529": {
                "function": {
                    "value": "lambda x: minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/MinibatchStddev'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "tensorflow": {
            "reduce_mean_11": {
                "input_tensor": {
                    "value": "tf.keras.losses.MAE(y_gt, y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_25": {
                "variable": {
                    "value": "self.g_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5e-05 if self.args.resolution == 256 else 1e-05",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Adam_26": {
                "variable": {
                    "value": "self.g_gan_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1 * lr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_27": {
                "variable": {
                    "value": "self.w_d_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.4 * lr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_29": {
                "variable": {
                    "value": "self.im_d_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.4 * lr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_32": {
                "variable": {
                    "value": "self.gan_loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MeanAbsoluteError_33": {
                "variable": {
                    "value": "self.pixel_loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.SUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_44": {
                "variable": {
                    "value": "self.pixel_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pixel_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.args.batch_size, *self.pixel_mask.shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_395": {
                "variable": {
                    "value": "recon_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.stylegan_s(w)",
                            "Call"
                        ],
                        [
                            "(pred + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "D(x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_398": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(img - recon_image) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "psnr_399": {
                "variable": {
                    "value": "psnr",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "recon_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(pred, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "max_val": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_422": {
                "variable": {
                    "value": "fake_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_logit",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_423": {
                "variable": {
                    "value": "real_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_logit",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_441": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(grad, [tf.shape(grad)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_442": {
                "variable": {
                    "value": "gp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "norm ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_41": {
                "variable": {
                    "value": "self.pixel_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.args.resolution, self.args.resolution]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "z_tag",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[id_embedding, attr_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_norm_241": {
                "variable": {
                    "value": "g_grads_global_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "g_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g_tape.gradient(total_g_not_gan_loss, self.model.G.trainable_variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_norm_249": {
                "variable": {
                    "value": "g_gan_grad_global_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "g_gan_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g_tape.gradient(g_gan_loss, self.model.G.trainable_variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_282": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.stylegan_s(w)",
                            "Call"
                        ],
                        [
                            "(pred + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "D(x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_436": {
                "variable": {
                    "value": "pred_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.stylegan_s(w)",
                            "Call"
                        ],
                        [
                            "(pred + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "D(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_126": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cosine_similarity_403": {
                "y_true": {
                    "value": "id_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.id_encoder(id_img)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "recon_pred_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.id_encoder(recon_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_414": {
                "input": {
                    "value": "fake_logit",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GradientTape_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_441": {
                "tensor": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t.gradient(pred_sum, x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(grad)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_42": {
                "input_tensor": {
                    "value": "self.pixel_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_194": {
                "variable": {
                    "value": "mssim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - tf.image.ssim_multiscale(attr_img, pred, 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_235": {
                "input": {
                    "value": "id_img[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_236": {
                "input": {
                    "value": "pred[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_287": {
                "y_true": {
                    "value": "id_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.id_encoder(id_img)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.id_encoder(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_288": {
                "y_true": {
                    "value": "id_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.id_encoder(id_img)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "attr_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.id_encoder(attr_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_289": {
                "y_true": {
                    "value": "attr_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.id_encoder(attr_img)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.id_encoder(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_308": {
                "input_tensor": {
                    "value": "tf.keras.losses.MSE(src_lnds, dst_lnds)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GradientTape_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "input_tensor": {
                    "value": "tf.abs(attr_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_variance_132": {
                "input_tensor": {
                    "value": "attr_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attr_out",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_mean_139": {
                "input_tensor": {
                    "value": "tf.abs(fake_w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_variance_139": {
                "input_tensor": {
                    "value": "fake_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stop_gradient_169": {
                "input": {
                    "value": "id_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.id_encoder(id_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_183": {
                "input_tensor": {
                    "value": "tf.keras.losses.MSE(src_landmarks, dst_landmarks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_norm_256": {
                "t_list": {
                    "value": "w_d_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w_d_tape.gradient(w_d_total_loss, self.model.W_D.trainable_variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_298": {
                "y_true": {
                    "value": "arc_id_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.test_id_encoder(id_img)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "arc_attr_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.test_id_encoder(attr_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_300": {
                "y_true": {
                    "value": "arc_id_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.test_id_encoder(id_img)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "arc_pred_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.test_id_encoder(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_302": {
                "y_true": {
                    "value": "arc_attr_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.test_id_encoder(attr_img)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "arc_pred_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.test_id_encoder(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_441": {
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t.gradient(pred_sum, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_131": {
                "x": {
                    "value": "attr_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attr_out",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_139": {
                "x": {
                    "value": "fake_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ssim_multiscale_194": {
                "img1": {
                    "value": "attr_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "img2": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.G.stylegan_s(w)",
                            "Call"
                        ],
                        [
                            "(pred + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "D(x)",
                            "Call"
                        ]
                    ]
                },
                "max_val": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_152": {
                "input": {
                    "value": "fake_w_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.W_D(fake_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_165": {
                "input": {
                    "value": "real_w_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.W_D(real_w)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/general_utils.py": {
        "tensorflow": {
            "clip_by_value_205": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tensor, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "255 * tensor",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(tensor)",
                            "Call"
                        ],
                        [
                            "np.uint8(np.round(tensor))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_209": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tensor, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "255 * tensor",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(tensor)",
                            "Call"
                        ],
                        [
                            "np.uint8(np.round(tensor))",
                            "Call"
                        ]
                    ]
                }
            },
            "VarianceScaling_266": {
                "scale": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 / (1 + slope ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/generate_fake_data.py": {
        "tensorflow": {
            "normal_43": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "writer.py": {
        "tensorflow": {
            "create_file_writer_15": {
                "variable": {
                    "value": "Writer.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "str(results_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_27": {
                "variable": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convert_tensor_to_image(val)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(val, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_20": {
                "name": {
                    "value": "tag",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convert_tensor_to_image(val)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(val, 0)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rank_26": {
                "input": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convert_tensor_to_image(val)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(val, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_30": {
                "name": {
                    "value": "tag",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "convert_tensor_to_image(val)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(val, 0)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}