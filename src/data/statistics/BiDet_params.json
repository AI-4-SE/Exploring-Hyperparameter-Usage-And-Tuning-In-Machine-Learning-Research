{
    "faster_rcnn/lib/model/utils/logger.py": {
        "tensorflow": {
            "FileWriter_15": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Summary_19": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_42": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_52": {
                "variable": {
                    "value": "hist",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_69": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/faster_rcnn/bidet_resnet.py": {
        "torch": {
            "Conv2d_45": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "first_inplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "first_inplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MaxPool2d_90": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_96": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "channels[-1] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogSoftmax_98": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "self.RCNN_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "self.RCNN_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.layer4",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.RCNN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pooled_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(2, stride=stride, ceil_mode=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_189": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pooled_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pooled_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_118": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "num_features": {
                    "value": "ds_out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "faster_rcnn/lib/model/faster_rcnn/binary_utils.py": {
        "torch": {
            "zeros_like_20": {
                "variable": {
                    "value": "grad_input_wrt_output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_22": {
                "variable": {
                    "value": "grad_input_wrt_output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "ge0_lt1_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.ge(0) & input.lt(1)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "2 - 2 * input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_input_wrt_output2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(grad_output)",
                            "Call"
                        ],
                        [
                            "torch.where(ge0_lt1_mask, 2 - 2 * input, grad_input_wrt_output2)",
                            "Call"
                        ],
                        [
                            "torch.where(gen1_lt0_mask, 2 + 2 * input, grad_input_wrt_output2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_24": {
                "variable": {
                    "value": "grad_input_wrt_output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "gen1_lt0_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.ge(-1) & input.lt(0)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "2 + 2 * input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_input_wrt_output2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(grad_output)",
                            "Call"
                        ],
                        [
                            "torch.where(ge0_lt1_mask, 2 - 2 * input, grad_input_wrt_output2)",
                            "Call"
                        ],
                        [
                            "torch.where(gen1_lt0_mask, 2 + 2 * input, grad_input_wrt_output2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_41": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.ge(-1) & input.le(1)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(grad_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_85": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "SignTwoOrders.apply(input)",
                            "Call"
                        ],
                        [
                            "SignSTE.apply(input)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding[0], self.padding[0], self.padding[1], self.padding[1]), mode='constant', value=-1)",
                            "Call"
                        ],
                        [
                            "SignTwoOrders.apply(input)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.padding[0], self.padding[0], self.padding[1], self.padding[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_87": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "SignTwoOrders.apply(input)",
                            "Call"
                        ],
                        [
                            "SignSTE.apply(input)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding[0], self.padding[0], self.padding[1], self.padding[1]), mode='constant', value=-1)",
                            "Call"
                        ],
                        [
                            "SignTwoOrders.apply(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_bin_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_101": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "SignTwoOrders.apply(input)",
                            "Call"
                        ],
                        [
                            "SignSTE.apply(input)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding[0], self.padding[0], self.padding[1], self.padding[1]), mode='constant', value=-1)",
                            "Call"
                        ],
                        [
                            "SignTwoOrders.apply(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_bin_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_114": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_41": {
                "input": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/faster_rcnn/faster_rcnn.py": {
        "torch": {
            "randn_112": {
                "variable": {
                    "value": "normal_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bbox_pred.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_115": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sigma_2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_128": {
                "variable": {
                    "value": "cls_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_122": {
                "variable": {
                    "value": "bbox_pred_select",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred_view",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_pred.view(bbox_pred.size(0), int(bbox_pred.size(1) / 4), 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_label.view(rois_label.size(0), 1, 1).expand(rois_label.size(0), 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_135": {
                "variable": {
                    "value": "RCNN_loss_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rois_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "nonzero_177": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[i, :, j] > self.nms_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_182": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores[i, :, j][inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_80": {
                "input": {
                    "value": "score + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_195": {
                "input": {
                    "value": "score + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/nms/_ext/nms/__init__.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/nms/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/nms/nms_cpu.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/nms/nms_gpu.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/nms/nms_wrapper.py": {
        "torch": {
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/roi_align/_ext/roi_align/__init__.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/roi_align/build.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/roi_align/functions/roi_align.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/roi_align/modules/roi_align.py": {
        "torch": {
            "avg_pool2d_29": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/roi_crop/_ext/crop_resize/__init__.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/roi_crop/_ext/roi_crop/__init__.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/roi_crop/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/roi_crop/functions/crop_resize.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input2.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "input1.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input2.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "input2.size()[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "grad_input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "grad_input2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_16": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/roi_crop/functions/gridgen.py": {
        "torch": {
            "from_numpy_18": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "baddbmm_45": {
                "variable": {
                    "value": "grad_input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_input1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.input1.new(self.input1.size()).zero_()",
                            "Call"
                        ],
                        [
                            "torch.baddbmm(grad_input1, torch.transpose(grad_output.view(-1, self.height * self.width, 2), 1, 2), self.batchgrid.view(-1, self.height * self.width, 3))",
                            "Call"
                        ]
                    ]
                },
                "batch1": {
                    "value": "torch.transpose(grad_output.view(-1, self.height * self.width, 2), 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch2": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_33": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(input1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_45": {
                "input": {
                    "value": "grad_output.view(-1, self.height * self.width, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_33": {
                "input": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/roi_crop/functions/roi_crop.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/roi_crop/modules/gridgen.py": {
        "torch": {
            "from_numpy_60": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_73": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(input1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output0, output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_132": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sum(x, 3), torch.sum(y, 3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_158": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_177": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 0:4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_178": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 4:8])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_179": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 8:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_216": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_243": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 0:4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_244": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 4:8])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_245": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 8:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[:, :, :, 0:1], output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_283": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_285": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_294": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[:, :, :, 0:1], output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_350": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_357": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_368": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_375": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan_101": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (self.batchgrid[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_156": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_156": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_157": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_177": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_178": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 4:8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_179": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 8:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_181": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_186": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_214": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_214": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_215": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_243": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_244": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 4:8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_245": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 8:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_247": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_252": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_259": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_281": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_281": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_282": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_313": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_318": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_329": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_355": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_355": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_356": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_399": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_46": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tan_101": {
                "input": {
                    "value": "np.pi / 2.0 * (self.batchgrid[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_134": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(self.batchgrid, input1[:, :, :, 3:6])",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(self.batchgrid3d, input1[:, :, :, 4:8]), 3)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(self.batchgrid3d, input1[:, :, :, 4:8]), 3)",
                            "Call"
                        ],
                        [
                            "self.batchgrid3d[:, :, :, 1:2] * depth + trans1.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1)",
                            "BinOp"
                        ],
                        [
                            "x_ * torch.sin(rotate_z) + y_ * torch.cos(rotate_z)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_184": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_250": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_259": {
                "input": {
                    "value": "np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_316": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_329": {
                "input": {
                    "value": "np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_395": {
                "input": {
                    "value": "rotate_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_395": {
                "input": {
                    "value": "rotate_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_396": {
                "input": {
                    "value": "rotate_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_396": {
                "input": {
                    "value": "rotate_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "acos_402": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_406": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_408": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_73": {
                "input": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/roi_crop/modules/roi_crop.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/roi_layers/__init__.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/roi_layers/roi_align.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/roi_layers/roi_pool.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/roi_pooling/_ext/roi_pooling/__init__.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/roi_pooling/build.py": {
        "torch": {
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/roi_pooling/functions/roi_pool.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/roi_pooling/modules/roi_pool.py": {
        "torch": {}
    },
    "faster_rcnn/lib/model/rpn/anchor_target_layer.py": {
        "torch": {
            "from_numpy_42": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(anchor_scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "shifts",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_89": {
                "variable": {
                    "value": "inds_inside",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_101": {
                "variable": {
                    "value": "(max_overlaps, argmax_overlaps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_102": {
                "variable": {
                    "value": "(gt_max_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_108": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_121": {
                "variable": {
                    "value": "sum_fg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "sum_bg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_213": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_216": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_158": {
                "variable": {
                    "value": "num_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_127": {
                "variable": {
                    "value": "fg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_141": {
                "variable": {
                    "value": "bg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(bg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_148": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_boxes.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_137": {
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/rpn/bbox_transform.py": {
        "torch": {
            "log_29": {
                "variable": {
                    "value": "targets_dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_30": {
                "variable": {
                    "value": "targets_dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_73": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_52": {
                "variable": {
                    "value": "targets_dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths.view(1, -1).expand_as(gt_widths)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_53": {
                "variable": {
                    "value": "targets_dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights.view(1, -1).expand_as(gt_heights)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_68": {
                "variable": {
                    "value": "targets_dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_69": {
                "variable": {
                    "value": "targets_dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_92": {
                "input": {
                    "value": "dw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 2::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_93": {
                "input": {
                    "value": "dh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 3::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_158": {
                "input": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_159": {
                "input": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_162": {
                "input": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_163": {
                "input": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_203": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_204": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_207": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_208": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_242": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_243": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_246": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_247": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/rpn/proposal_layer.py": {
        "torch": {
            "from_numpy_37": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "shifts",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_125": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores",
                            "Name"
                        ],
                        [
                            "scores.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_236": {
                "variable": {
                    "value": "shifts",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_278": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores",
                            "Name"
                        ],
                        [
                            "scores.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/rpn/proposal_target_layer_cascade.py": {
        "torch": {
            "cat_44": {
                "variable": {
                    "value": "all_rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_rois, gt_boxes_append]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_123": {
                "variable": {
                    "value": "(max_overlaps, gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(all_rois, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_88": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clss[b] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_142": {
                "variable": {
                    "value": "fg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_overlaps[i] >= cfg.TRAIN.FG_THRESH",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_146": {
                "variable": {
                    "value": "bg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(max_overlaps[i] < cfg.TRAIN.BG_THRESH_HI) & (max_overlaps[i] >= cfg.TRAIN.BG_THRESH_LO)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "keep_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fg_inds, bg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_129": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels_batch.size(0)",
                            "Call"
                        ],
                        [
                            "ex_rois.size(0)",
                            "Call"
                        ],
                        [
                            "overlaps.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_num_rois)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_175": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "faster_rcnn/lib/model/rpn/rpn.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.RPN_Conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.din",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.RPN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_score_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.RPN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_bbox_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "rpn_conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.RPN_Conv(base_feat)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "rpn_cls_prob_reshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score_reshape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reshape(rpn_cls_score, 2)",
                            "Call"
                        ],
                        [
                            "self.reshape(rpn_cls_score, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.RPN_Conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BinarizeConv2d(self.din, 512, 3, 1, 1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "self.RPN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_score_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.RPN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_bbox_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_174": {
                "variable": {
                    "value": "rpn_cls_prob_reshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score_reshape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reshape(rpn_cls_score, 2)",
                            "Call"
                        ],
                        [
                            "self.reshape(rpn_cls_score, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_186": {
                "variable": {
                    "value": "normal_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "base_feat.size(0)",
                            "Call"
                        ],
                        [
                            "base_feat.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "bbox_deltas.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_189": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sigma_2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_91": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(rpn_label.view(-1).ne(-1).nonzero().view(-1))",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.view(-1).ne(-1).nonzero().view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_92": {
                "variable": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_94": {
                "variable": {
                    "value": "self.rpn_loss_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.RPN_cls_score(rpn_conv1)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score_reshape.permute(0, 2, 3, 1).contiguous().view(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_cls_score.view(-1, 2), 0, rpn_keep)",
                            "Call"
                        ],
                        [
                            "self.RPN_cls_score(rpn_conv1)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score_reshape.permute(0, 2, 3, 1).contiguous().view(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_cls_score.view(-1, 2), 0, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rpn_data[0].view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_label.view(-1), 0, rpn_keep.data)",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.long())",
                            "Call"
                        ],
                        [
                            "rpn_data[0].view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_label.view(-1), 0, rpn_keep.data)",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_95": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_215": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(rpn_label.view(-1).ne(-1).nonzero().view(-1))",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.view(-1).ne(-1).nonzero().view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_216": {
                "variable": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_218": {
                "variable": {
                    "value": "self.rpn_loss_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.RPN_cls_score(rpn_conv1)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score_reshape.permute(0, 2, 3, 1).contiguous().view(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_cls_score.view(-1, 2), 0, rpn_keep)",
                            "Call"
                        ],
                        [
                            "self.RPN_cls_score(rpn_conv1)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score_reshape.permute(0, 2, 3, 1).contiguous().view(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_cls_score.view(-1, 2), 0, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rpn_data[0].view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_label.view(-1), 0, rpn_keep.data)",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.long())",
                            "Call"
                        ],
                        [
                            "rpn_data[0].view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_label.view(-1), 0, rpn_keep.data)",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_219": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/model/utils/net_utils.py": {
        "torch": {
            "sqrt_47": {
                "variable": {
                    "value": "totalnorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "totalnorm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "torch.sqrt(totalnorm).item()",
                            "Call"
                        ],
                        [
                            "totalnorm + modulenorm ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_80": {
                "variable": {
                    "value": "abs_in_box_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_box_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_123": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_166": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, grid_size, grid_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "variable": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(h5f[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_73": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "affine_grid_133": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_136": {
                "variable": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_137": {
                "variable": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.grid_sample(bottom, grid)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(crops, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(bottom, grid)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_139": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_142": {
                "variable": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_82": {
                "input": {
                    "value": "in_box_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/roi_data_layer/roibatchLoader.py": {
        "torch": {
            "Tensor_39": {
                "variable": {
                    "value": "self.ratio_list_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "im_info",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['im_info']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['gt_boxes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_190": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_keep == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "permute_206": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_92": {
                "input": {
                    "value": "gt_boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_93": {
                "input": {
                    "value": "gt_boxes[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_128": {
                "input": {
                    "value": "gt_boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_129": {
                "input": {
                    "value": "gt_boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/lib/setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/test_net.py": {
        "torch": {
            "load_123": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_165": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, 1, imdb.num_classes, training=False, normalize=False, trans=args.trans_img)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_222": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, j] > thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_226": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores[:, j][inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "cls_dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_boxes, cls_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/trainval_net.py": {
        "torch": {
            "DataLoader_237": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, args.batch_size, imdb.num_classes, training=True, trans=args.trans_img)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sampler(train_size, args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_158": {
                "variable": {
                    "value": "self.range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_301": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_308": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_316": {
                "variable": {
                    "value": "fasterRCNN",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fasterRCNN",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bidet_resnet(imdb.classes, 18, class_agnostic=args.class_agnostic, model_path=basenet_path, nms_threshold=args.nms_threshold, sample_sigma=args.sample_sigma, fix_real_conv=True, fix_base_bn=False, fix_top_bn=False, rpn_prior_weight=args.rpn_prior_weight, rpn_reg_weight=args.rpn_reg_weight, head_prior_weight=args.head_prior_weight, head_reg_weight=args.head_reg_weight)",
                            "Call"
                        ],
                        [
                            "bidet_resnet(imdb.classes, 34, class_agnostic=args.class_agnostic, model_path=basenet_path, nms_threshold=args.nms_threshold, sample_sigma=args.sample_sigma, fix_real_conv=True, fix_base_bn=False, fix_top_bn=False, rpn_prior_weight=args.rpn_prior_weight, rpn_reg_weight=args.rpn_reg_weight, head_prior_weight=args.head_prior_weight, head_reg_weight=args.head_reg_weight)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fasterRCNN)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_161": {
                "variable": {
                    "value": "self.leftover",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_per_batch * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(roidb)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_171": {
                "variable": {
                    "value": "self.rand_num_view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.rand_num_view, self.leftover)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_304": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.momentum",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_446": {
                "obj": {
                    "value": "ckp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'weight': fasterRCNN.module.state_dict() if args.mGPUs else fasterRCNN.state_dict(), 'pooling_mode': cfg.POOLING_MODE, 'opt': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, 'model_{}_loss_{}_lr_{}_rpn_cls_{}_rpn_bbox_{}_rcnn_cls_{}_rcnn_bbox_{}_rpn_prior_{}_rpn_reg_{}_head_prior_{}_head_reg_{}.pth'.format(epoch, round(epoch_loss, 4), lr, round(epoch_rpn_cls_loss, 4), round(epoch_rpn_bbox_loss, 4), round(epoch_rcnn_cls_loss, 4), round(epoch_rcnn_bbox_loss, 4), round(epoch_rpn_prior_loss, 4), round(epoch_rpn_reg_loss, 4), round(epoch_head_prior_loss, 4), round(epoch_head_reg_loss, 4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_165": {
                "n": {
                    "value": "self.num_per_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_406": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_413": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ssd/bidet_ssd.py": {
        "torch": {
            "MaxPool2d_70": {
                "variable": {
                    "value": "pool5",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "conv7",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_99": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_145": {
                "variable": {
                    "value": "self.extras",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "extras",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_146": {
                "variable": {
                    "value": "self.extra_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(self.extras[i].out_channels) for i in range(len(self.extras))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_149": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "head[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_150": {
                "variable": {
                    "value": "self.conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "head[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Softmax_152": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size(0), -1) for o in loc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size(0), -1) for o in conf]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_260": {
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vgg[v].out_channels",
                            "Attribute"
                        ],
                        [
                            "vgg[v].conv.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cfg[k] * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vgg[v].out_channels",
                            "Attribute"
                        ],
                        [
                            "vgg[v].conv.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cfg[k] * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_263": {
                "in_channels": {
                    "value": "v.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_264": {
                "in_channels": {
                    "value": "v.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "cfg[j + 1]",
                            "Subscript"
                        ],
                        [
                            "cfg[j + 1]",
                            "Subscript"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_146": {
                "num_features": {
                    "value": "self.extras[i].out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_224": {
                "f": {
                    "value": "base_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg[j]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "AvgPool2d_46": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "cfg[j - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[j + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "cfg[j + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=2, stride=2, ceil_mode=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_56": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "cfg[j - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[j + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "cfg[j + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ssd/binary_utils.py": {
        "torch": {
            "zeros_like_25": {
                "variable": {
                    "value": "grad_input_wrt_output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_27": {
                "variable": {
                    "value": "grad_input_wrt_output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "ge0_lt1_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.ge(0) & input.lt(1)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "2 - 2 * input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_input_wrt_output2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(grad_output)",
                            "Call"
                        ],
                        [
                            "torch.where(ge0_lt1_mask, 2 - 2 * input, grad_input_wrt_output2)",
                            "Call"
                        ],
                        [
                            "torch.where(gen1_lt0_mask, 2 + 2 * input, grad_input_wrt_output2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_29": {
                "variable": {
                    "value": "grad_input_wrt_output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "gen1_lt0_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.ge(-1) & input.lt(0)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "2 + 2 * input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_input_wrt_output2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(grad_output)",
                            "Call"
                        ],
                        [
                            "torch.where(ge0_lt1_mask, 2 - 2 * input, grad_input_wrt_output2)",
                            "Call"
                        ],
                        [
                            "torch.where(gen1_lt0_mask, 2 + 2 * input, grad_input_wrt_output2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_46": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.ge(-1) & input.le(1)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(grad_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_90": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "SignTwoOrders.apply(input)",
                            "Call"
                        ],
                        [
                            "SignSTE.apply(input)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding[0], self.padding[0], self.padding[1], self.padding[1]), mode='constant', value=-1)",
                            "Call"
                        ],
                        [
                            "SignTwoOrders.apply(input)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.padding[0], self.padding[0], self.padding[1], self.padding[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_92": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "SignTwoOrders.apply(input)",
                            "Call"
                        ],
                        [
                            "SignSTE.apply(input)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding[0], self.padding[0], self.padding[1], self.padding[1]), mode='constant', value=-1)",
                            "Call"
                        ],
                        [
                            "SignTwoOrders.apply(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_bin_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_106": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "input.sign()",
                            "Call"
                        ],
                        [
                            "SignTwoOrders.apply(input)",
                            "Call"
                        ],
                        [
                            "SignSTE.apply(input)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding[0], self.padding[0], self.padding[1], self.padding[1]), mode='constant', value=-1)",
                            "Call"
                        ],
                        [
                            "SignTwoOrders.apply(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_bin_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_46": {
                "input": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ssd/data/__init__.py": {
        "torch": {
            "stack_30": {
                "tensors": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ssd/data/coco.py": {
        "torch": {
            "from_numpy_140": {
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(osp.join(self.root, path))",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_140": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ssd/data/coco_dataset.py": {
        "torch": {
            "from_numpy_53": {
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.resize(np.array(img), (self.resize, self.resize)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "img / self.std",
                            "BinOp"
                        ],
                        [
                            "img.transpose(self.swap)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img_id, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(img_id, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "ssd/data/voc0712.py": {
        "torch": {
            "from_numpy_139": {
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_139": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ssd/eval_coco.py": {
        "torch": {
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_64": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_58": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_62": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "masked_select_127": {
                "variable": {
                    "value": "dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "detections[0, j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(dets, mask).view(-1, 5)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dets[:, 0].gt(0.0).expand(5, dets.size(0)).t()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_160": {
                "f": {
                    "value": "args.weight_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ssd/eval_voc.py": {
        "torch": {
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_66": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_60": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_64": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "masked_select_394": {
                "variable": {
                    "value": "dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_boxes[cls_ind + 1][im_ind]",
                            "Subscript"
                        ],
                        [
                            "detections[0, j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(dets, mask).view(-1, 5)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dets[:, 0].gt(0.0).expand(5, dets.size(0)).t()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_444": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_432": {
                "f": {
                    "value": "args.weight_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_434": {
                "f": {
                    "value": "args.weight_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ssd/layers/box_utils.py": {
        "torch": {
            "min_43": {
                "variable": {
                    "value": "max_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, 2:].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_45": {
                "variable": {
                    "value": "min_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :2].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_47": {
                "variable": {
                    "value": "inter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(priors[:, :2] + loc[:, :2] * variances[0] * priors[:, 2:], priors[:, 2:] * torch.exp(loc[:, 2:] * variances[1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_194": {
                "variable": {
                    "value": "area",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2 - x1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "y2 - y1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_14": {
                "tensors": {
                    "value": "(boxes[:, :2] - boxes[:, 2:] / 2, boxes[:, :2] + boxes[:, 2:] / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_26": {
                "tensors": {
                    "value": "(boxes[:, 2:] + boxes[:, :2]) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "boxes[:, 2:] - boxes[:, :2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "tensors": {
                    "value": "[g_cxcy, g_wh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_221": {
                "variable": {
                    "value": "xx1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "x1[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_222": {
                "variable": {
                    "value": "yy1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "y1[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_223": {
                "variable": {
                    "value": "xx2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "x2[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_224": {
                "variable": {
                    "value": "yy2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "y2[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_230": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "xx2 - xx1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(w, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_231": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "yy2 - yy1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(h, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "index_select_234": {
                "variable": {
                    "value": "rem_areas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "area",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(x2 - x1, y2 - y1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_134": {
                "input": {
                    "value": "g_wh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(matched[:, 2:] - matched[:, :2]) / priors[:, 2:]",
                            "BinOp"
                        ],
                        [
                            "torch.log(g_wh) / variances[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_169": {
                "input": {
                    "value": "torch.sum(torch.exp(x - x_max), 1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_216": {
                "input": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "xx1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_217": {
                "input": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "yy1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_218": {
                "input": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "xx2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_219": {
                "input": {
                    "value": "y2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "yy2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_169": {
                "input": {
                    "value": "torch.exp(x - x_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_155": {
                "input": {
                    "value": "loc[:, 2:] * variances[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_169": {
                "input": {
                    "value": "x - x_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ssd/layers/functions/detection.py": {
        "torch": {
            "zeros_41": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loc_data.size(0)",
                            "Call"
                        ],
                        [
                            "loc_data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.top_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loc_data.size(0)",
                            "Call"
                        ],
                        [
                            "loc_data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.top_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "output[i, cl, :count]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scores[ids[:count]].unsqueeze(1), boxes[ids[:count]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "output[i, cl, :count]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scores[ids[:count]].unsqueeze(1), boxes[ids[:count]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ssd/layers/functions/prior_box.py": {
        "torch": {
            "Tensor_53": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ssd/layers/modules/l2norm.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_23": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(x, norm)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.pow(2).sum(dim=1, keepdim=True).sqrt() + self.eps",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ssd/layers/modules/multibox_loss.py": {
        "torch": {
            "Tensor_70": {
                "variable": {
                    "value": "loc_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_93": {
                "variable": {
                    "value": "loss_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loc_data[pos_idx].view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "loc_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(num, num_priors, 4)",
                            "Call"
                        ],
                        [
                            "loc_t.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(loc_t, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "loc_t[pos_idx].view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_105": {
                "variable": {
                    "value": "num_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.negpos_ratio * num_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "pos.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_113": {
                "variable": {
                    "value": "loss_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conf_data[(pos_idx + neg_idx).gt(0)].view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_weighted",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conf_t[(pos + neg).gt(0)]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ssd/train_bidet_ssd.py": {
        "torch": {
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_180": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "COCODetection(root=args.data_root, transform=SSDAugmentation(cfg['min_dim'], MEANS))",
                            "Call"
                        ],
                        [
                            "VOCDetection(root=args.data_root, transform=SSDAugmentation(cfg['min_dim'], MEANS))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "detection_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_410": {
                "variable": {
                    "value": "total_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "torch.sqrt(total_norm).item()",
                            "Call"
                        ],
                        [
                            "total_norm + module_norm ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_11": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_12": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_95": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_139": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ssd_net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "build_bidet_ssd('train', cfg['min_dim'], cfg['num_classes'], nms_conf_thre=NMS_CONF_THRE)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_142": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_233": {
                "variable": {
                    "value": "normal_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loc_data.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "loc_data.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_236": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sigma_2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_386": {
                "obj": {
                    "value": "net.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "logs_dir + '/' + args.dataset + '_final.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_89": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_93": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_134": {
                "variable": {
                    "value": "vgg_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.basenet",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_145": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_390": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_129": {
                "variable": {
                    "value": "ckp",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weight_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__333": {
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "GRADIENT_CLIP_NORM",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "empty_cache_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_367": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'weight': net.module.state_dict(), 'opt': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "logs_dir + '/model_' + str(iteration) + '_loc_' + str(round(loc_loss_save / 5000.0, 4)) + '_conf_' + str(round(conf_loss_save / 5000.0, 4)) + '_reg_' + str(round(reg_loss_save / 5000.0, 4)) + '_prior_' + str(round(prior_loss_save / 5000.0, 4)) + '_loss_' + str(round(loss_save / 5000.0, 4)) + '_lr_' + str(round(args.lr * args.gamma ** step_index, 6)) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_126": {
                "f": {
                    "value": "args.weight_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "masked_select_283": {
                "variable": {
                    "value": "dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_dets[batch_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "all_mask[batch_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ssd/utils/augmentations.py": {
        "torch": {
            "from_numpy_205": {
                "ndarray": {
                    "value": "cvimage.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_205": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}