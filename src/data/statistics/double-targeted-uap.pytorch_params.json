{
    "dataset_utils/ycb_preparation.py": {
        "sklearn": {
            "train_test_split_41": {
                "variable": {
                    "value": "(train_files, test_files)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "jpg_list",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data.py": {
        "sklearn": {
            "train_test_split_187": {
                "variable": {
                    "value": "(train_files, test_files)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "file_list",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_23": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "networks/mobilenet_v2.py": {
        "torch": {
            "Sequential_66": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_167": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MOBILENET_V2_PATH",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_127": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "networks/resnet.py": {
        "torch": {
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_95": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_127": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_128": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_167": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_223": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_227": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_228": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_173": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_200": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_230": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_255": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_331": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_175": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_232": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_191": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_247": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "networks/uap.py": {
        "torch": {
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.uap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(num_channels, *shape), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_26": {
                "variable": {
                    "value": "self.mean_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_32": {
                "variable": {
                    "value": "self.std_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "size": {
                    "value": "(num_channels, *shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "networks/vgg_cifar.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_38": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_37": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_31": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train_dt_uap.py": {
        "torch": {
            "DataLoader_125": {
                "variable": {
                    "value": "data_train_sources_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_train_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(args.pretrained_dataset, mean=mean, std=std, input_size=input_size, classes=args.source_classes, train_samples_per_class=args.num_train_samples_per_class)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "half_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "data_test_sources_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(args.pretrained_dataset, mean=mean, std=std, input_size=input_size, classes=args.source_classes, train_samples_per_class=args.num_train_samples_per_class)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "half_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "variable": {
                    "value": "data_train_others_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_train_others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(args.pretrained_dataset, mean=mean, std=std, input_size=input_size, classes=other_classes, others=True, train_samples_per_class=args.num_train_samples_per_class)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "half_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "data_test_others_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test_others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(args.pretrained_dataset, mean=mean, std=std, input_size=input_size, classes=other_classes, others=True, train_samples_per_class=args.num_train_samples_per_class)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "half_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_166": {
                "variable": {
                    "value": "target_network",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "target_network",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_network(args.pretrained_arch, input_size=input_size, num_classes=num_classes, finetune=args.finetune)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(target_network, device_ids=list(range(args.ngpu)))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(args.ngpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "perturbed_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('generator', generator), ('target_model', target_network)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_200": {
                "variable": {
                    "value": "perturbed_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "perturbed_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Sequential(OrderedDict([('generator', generator), ('target_model', target_network)]))",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(perturbed_net, device_ids=list(range(args.ngpu)))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(args.ngpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_228": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "perturbed_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "state['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{k: v for (k, v) in args._get_kwargs()}",
                            "DictComp"
                        ]
                    ]
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "args.pretrained_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_171": {
                "variable": {
                    "value": "network_data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_path, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_82": {
                "seed": {
                    "value": "args.pretrained_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_model.py": {
        "torch": {
            "DataLoader_90": {
                "variable": {
                    "value": "pretrained_data_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pretrained_data_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(args.pretrained_dataset, mean=mean, std=std, input_size=input_size, train_target_model=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "pretrained_data_test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pretrained_data_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(args.pretrained_dataset, mean=mean, std=std, input_size=input_size, train_target_model=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_network(args.pretrained_arch, input_size=input_size, num_classes=num_classes, finetune=args.finetune)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net, device_ids=list(range(args.ngpu)))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(args.ngpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_117": {
                "variable": {
                    "value": "criterion_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "state['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "state['momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{k: v for (k, v) in args._get_kwargs()}",
                            "DictComp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "state['decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{k: v for (k, v) in args._get_kwargs()}",
                            "DictComp"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_60": {
                "seed": {
                    "value": "args.pretrained_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_62": {
                "seed": {
                    "value": "args.pretrained_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/custom_loss.py": {
        "torch": {
            "tensor_113": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_122": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbed_logit[correct_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "clean_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(clean_logit, dim=-1)",
                            "Call"
                        ],
                        [
                            "clean_class[correct_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_129": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbed_logit[correct_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "sink_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(clean_class) * sink_classes[0]",
                            "BinOp"
                        ],
                        [
                            "torch.ones_like(clean_class) * sink_classes[0]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_162": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits - not_class_logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-confidence",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_172": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_class_logits - class_logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-confidence",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cross_entropy_220": {
                "variable": {
                    "value": "inc_sink_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbed_logit[correct_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "sink_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(clean_class) * sink_classes[0]",
                            "BinOp"
                        ],
                        [
                            "torch.ones_like(clean_class) * sink_classes[0]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_302": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_class_logits - class_logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-confidence",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_306": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(perturbed_logit - clean_logit)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_310": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(perturbed_logit - clean_logit) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_68": {
                "variable": {
                    "value": "clean_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clean_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clean_logit",
                            "Method Argument"
                        ],
                        [
                            "clean_logit",
                            "Method Argument"
                        ],
                        [
                            "clean_logit",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_loss, self.alpha * others_loss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "source_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "others_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_109": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([], requires_grad=True)",
                            "Call"
                        ],
                        [
                            "loss.cuda()",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(perturbed_logit, clean_class, weight=None, ignore_index=-100, reduction='none')",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(perturbed_logit, sink_class, weight=None, ignore_index=-100, reduction='none')",
                            "Call"
                        ],
                        [
                            "-F.cross_entropy(perturbed_logit, clean_class, weight=None, ignore_index=-100, reduction='none')",
                            "UnaryOp"
                        ],
                        [
                            "(one_hot_labels * perturbed_logit).sum(1)",
                            "Call"
                        ],
                        [
                            "-(one_hot_labels * perturbed_logit).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "torch.clamp(class_logits - not_class_logits, min=-confidence)",
                            "Call"
                        ],
                        [
                            "torch.clamp(not_class_logits - class_logits, min=-confidence)",
                            "Call"
                        ],
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "loss.cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((loss, loss_source_cl), 0)",
                            "Call"
                        ],
                        [
                            "(inc_sink_loss + dec_source_loss) / 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "loss.cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((loss, loss_source_cl), 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "loss.cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((loss, loss_source_cl), 0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(not_class_logits - class_logits, min=-confidence)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(perturbed_logit - clean_logit), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum((perturbed_logit - clean_logit) ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((source_loss, self.alpha * others_loss), 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0.0], requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_128": {
                "input": {
                    "value": "clean_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(clean_logit, dim=-1)",
                            "Call"
                        ],
                        [
                            "clean_class[correct_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_134": {
                "input": {
                    "value": "perturbed_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbed_logit[correct_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "clean_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(clean_logit, dim=-1)",
                            "Call"
                        ],
                        [
                            "clean_class[correct_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_198": {
                "variable": {
                    "value": "source_cl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits_source_cl - not_class_logits_source_cl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_207": {
                "variable": {
                    "value": "sink_cl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_class_logits_sink_cl - class_logits_sink_cl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-confidence",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(loss, loss_source_cl)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_219": {
                "input": {
                    "value": "clean_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(clean_logit, dim=-1)",
                            "Call"
                        ],
                        [
                            "clean_class[correct_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_223": {
                "input": {
                    "value": "perturbed_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbed_logit[correct_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ],
                        [
                            "perturbed_logit",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "clean_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(clean_logit, dim=-1)",
                            "Call"
                        ],
                        [
                            "clean_class[correct_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ],
                        [
                            "clean_class",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_253": {
                "variable": {
                    "value": "source_cl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits_source_cl - not_class_logits_source_cl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(loss, loss_source_cl)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_288": {
                "variable": {
                    "value": "sink_cl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_class_logits_sink_cl - class_logits_sink_cl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-confidence",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(loss, loss_source_cl)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_306": {
                "input": {
                    "value": "perturbed_logit - clean_logit",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_76": {
                "input": {
                    "value": "source_classes_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(source_classes_idxs) == True",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_92": {
                "input": {
                    "value": "other_classes_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(other_classes_idxs) == True",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_189": {
                "input": {
                    "value": "source_cl_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(source_cl_idxs) == True",
                            "Compare"
                        ],
                        [
                            "torch.Tensor(source_cl_idxs) == True",
                            "Compare"
                        ],
                        [
                            "torch.Tensor(source_cl_idxs) == True",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_244": {
                "input": {
                    "value": "source_cl_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(source_cl_idxs) == True",
                            "Compare"
                        ],
                        [
                            "torch.Tensor(source_cl_idxs) == True",
                            "Compare"
                        ],
                        [
                            "torch.Tensor(source_cl_idxs) == True",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_276": {
                "input": {
                    "value": "source_cl_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(source_cl_idxs) == True",
                            "Compare"
                        ],
                        [
                            "torch.Tensor(source_cl_idxs) == True",
                            "Compare"
                        ],
                        [
                            "torch.Tensor(source_cl_idxs) == True",
                            "Compare"
                        ]
                    ]
                }
            },
            "ones_like_201": {
                "input": {
                    "value": "clean_class_source_cl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clean_class[source_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "clean_class[source_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "clean_class[source_cl_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_282": {
                "input": {
                    "value": "clean_class_source_cl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clean_class[source_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "clean_class[source_cl_mask]",
                            "Subscript"
                        ],
                        [
                            "clean_class[source_cl_mask]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/network.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "net.classifier[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "net.classifier[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "net.classifier[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "net.classifier[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "net.classifier[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "net.classifier[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "net.AuxLogits.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "net.AuxLogits.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.classifier[1].in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.AuxLogits.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "net.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/training.py": {
        "torch": {
            "cat_133": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sources_input, others_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sources_target, others_target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_329": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_path, filename)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_63": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "torch.argmax(target, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([sources_target, others_target], dim=0)",
                            "Call"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "torch.argmax(target, dim=-1)",
                            "Call"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_150": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "torch.argmax(target, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([sources_target, others_target], dim=0)",
                            "Call"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "torch.argmax(target, dim=-1)",
                            "Call"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_163": {
                "variable": {
                    "value": "model.module.generator.uap.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.generator.uap.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_165": {
                "variable": {
                    "value": "model.module.generator.uap.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.generator.uap.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_262": {
                "variable": {
                    "value": "clean_out_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clean_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_model(input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_263": {
                "variable": {
                    "value": "pert_out_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbed_model(input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_266": {
                "input": {
                    "value": "clean_out_class == pert_out_class",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_267": {
                "input": {
                    "value": "~(clean_out_class == pert_out_class)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_255": {
                "input": {
                    "value": "clean_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_model(input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_269": {
                "input": {
                    "value": "correctly_classified_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(clean_output, dim=-1).cpu() == gt.cpu()",
                            "Compare"
                        ]
                    ]
                }
            },
            "no_grad_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_284": {
                "input": {
                    "value": "source_cl_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(source_cl_idxs) == True",
                            "Compare"
                        ]
                    ]
                }
            },
            "ones_like_294": {
                "input": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "gt.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_302": {
                "input": {
                    "value": "non_sink_class_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(non_sink_class_idxs) == True",
                            "Compare"
                        ]
                    ]
                }
            },
            "ones_like_289": {
                "input": {
                    "value": "gt_source_cl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[source_cl_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_306": {
                "input": {
                    "value": "gt_non_sink_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[non_sink_class_mask]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "zeros_49": {
                "*size": {
                    "value": "len(class_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "class_labels.max() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "len(class_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}