{
    "SkipGNN/train.py": {
        "sklearn": {
            "roc_auc_score_165": {
                "variable": {
                    "value": "roc_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_label_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_label_train + label_ids.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_pred_train + output.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "roc_auc_score_131": {
                "y_true": {
                    "value": "y_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_label + label_ids.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_pred + output.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "average_precision_score_131": {
                "y_true": {
                    "value": "y_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_label + label_ids.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_pred + output.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "f1_score_131": {
                "y_true": {
                    "value": "y_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_label + label_ids.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray([1 if i else 0 for i in np.asarray(y_pred) >= 0.5])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_81": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Data_class(idx_map, df_train.label.values, df_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Data_class(idx_map, df_val.label.values, df_val)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Data_class(idx_map, df_test.label.values, df_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_105": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_106": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_152": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m(output)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SkipGNN/layers.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_36": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SkipGNN/models.py": {
        "torch": {
            "Linear_34": {
                "variable": {
                    "value": "self.decoder1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid_decode1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.decoder2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid_decode1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "o_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.o_gc1(x, o_adj) + self.s_gc1_o(x, s_adj)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "s_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.s_gc1(x, s_adj) + self.o_gc1_s(o_x, o_adj)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_42": {
                "variable": {
                    "value": "o_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.o_gc1(x, o_adj) + self.s_gc1_o(x, s_adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(o_x, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_43": {
                "variable": {
                    "value": "s_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.s_gc1(x, s_adj) + self.o_gc1_s(o_x, o_adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(s_x, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_p1, feat_p2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "SkipGNN/utils.py": {
        "torch": {
            "from_numpy_327": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_329": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}