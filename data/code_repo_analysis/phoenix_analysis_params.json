{
    "model_feedback_radii.py": {
        "sklearn": {
            "train_test_split_71": {
                "variable": {
                    "value": "(xtr, xval, ytr, yval)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "8675309",
                    "type": "int",
                    "possible_values": []
                }
            },
            "plot_tree_246": {
                "decision_tree": {
                    "value": "treesave",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor",
                            "variable"
                        ]
                    ]
                },
                "feature_names": {
                    "value": "feat_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['>SN', 'SNe', 'HNe', 'HNe < M < 100', '100 < M < 140', 'PISN < 200', 'PISN > 200', '> 200', '5Myr', '10Myr', '15Myr', '20Myr', '25Myr', '30Myr']",
                            "List"
                        ]
                    ]
                },
                "rounded": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "filled": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "ax": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "plt.subplots(2, 2, sharex=True, figsize=(10, 10))",
                            "Call"
                        ],
                        [
                            "ax.flatten()",
                            "Call"
                        ],
                        [
                            "plt.subplots(figsize=(40, 40))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_220": {
                "y_true": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor.predict(Xv)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_dataset(X, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_percentage_error_221": {
                "y_true": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_dataset(X, Y)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor.predict(Xv)",
                            "Call"
                        ]
                    ]
                }
            },
            "explained_variance_score_222": {
                "y_true": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor.predict(Xv)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_dataset(X, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_percentage_error_223": {
                "y_true": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor.predict(Xv)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_dataset(X, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "DecisionTreeRegressor_178": {
                "max_depth": {
                    "value": "boost_dep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "min_samples_leaf": {
                    "value": "min_leaf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "modelling_feedback/DecisionTreeRegressorModel.py": {
        "sklearn": {
            "DecisionTreeRegressor_75": {
                "variable": {
                    "value": "predictor",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depths",
                            "variable"
                        ]
                    ]
                },
                "max_leaf_nodes": {
                    "value": "mln",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_leaf_nodes",
                            "variable"
                        ]
                    ]
                },
                "min_samples_leaf": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "leaf_samples",
                            "variable"
                        ]
                    ]
                },
                "criterion": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criteria",
                            "variable"
                        ]
                    ]
                },
                "splitter": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "splitter",
                            "variable"
                        ]
                    ]
                }
            },
            "mean_squared_error_84": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor.predict(Xv)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_dataset(X, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_percentage_error_85": {
                "variable": {
                    "value": "mae",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_dataset(X, Y)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor.predict(Xv)",
                            "Call"
                        ]
                    ]
                }
            },
            "explained_variance_score_86": {
                "variable": {
                    "value": "exv",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor.predict(Xv)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_dataset(X, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_percentage_error_87": {
                "variable": {
                    "value": "mape",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor.predict(Xv)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_dataset(X, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "plot_tree_104": {
                "decision_tree": {
                    "value": "predictor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DecisionTreeRegressor(max_depth=d, max_leaf_nodes=mln, min_samples_leaf=l, criterion=c, splitter=split)",
                            "Call"
                        ]
                    ]
                },
                "feature_names": {
                    "value": "feat_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['>SN', 'SNe', 'HNe', 'HNe < M < 100', '100 < M < 140', 'PISN < 200', 'PISN > 200', '> 200', '5Myr', '10Myr', '15Myr', '20Myr', '25Myr', '30Myr']",
                            "List"
                        ]
                    ]
                },
                "rounded": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "filled": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "ax": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "plt.subplots(figsize=(40, 40))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "modelling_feedback/XGBoostModel.py": {
        "sklearn": {}
    },
    "modelling_feedback/model_feedback_radii.py": {
        "sklearn": {
            "plot_tree_297": {
                "decision_tree": {
                    "value": "treesave",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor",
                            "variable"
                        ]
                    ]
                },
                "feature_names": {
                    "value": "feat_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['>SN', 'SNe', 'HNe', 'HNe < M < 100', '100 < M < 140', 'PISN < 200', 'PISN > 200', '> 200', '5Myr', '10Myr', '15Myr', '20Myr', '25Myr', '30Myr']",
                            "List"
                        ]
                    ]
                },
                "rounded": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "filled": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "ax": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "plt.subplots(2, 2, sharex=True, figsize=(10, 10))",
                            "Call"
                        ],
                        [
                            "ax.flatten()",
                            "Call"
                        ],
                        [
                            "plt.subplots(figsize=(40, 40))",
                            "Call"
                        ]
                    ]
                }
            },
            "explained_variance_score_263": {
                "variable": {
                    "value": "ev",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor.predict(Xv)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_dataset(X, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_percentage_error_264": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor.predict(Xv)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_dataset(X, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_265": {
                "y_true": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor.predict(Xv)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_dataset(X, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_percentage_error_266": {
                "y_true": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_dataset(X, Y)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictor.predict(Xv)",
                            "Call"
                        ]
                    ]
                }
            },
            "DecisionTreeRegressor_221": {
                "max_depth": {
                    "value": "boost_dep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "min_samples_leaf": {
                    "value": "min_leaf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "modelling_feedback/model_utilities.py": {
        "sklearn": {},
        "torch": {
            "TensorDataset_465": {
                "variable": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor(Xtr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_466": {
                "variable": {
                    "value": "valset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor(Xv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_467": {
                "variable": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor(Xtest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_468": {
                "variable": {
                    "value": "tload",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(tensor(Xtr), tensor(Ytr).view(Ytr.size, 1))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(Xtr) if batch_size < 0 else batch_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_469": {
                "variable": {
                    "value": "vload",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(tensor(Xv), tensor(Yv).view(Yv.size, 1))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(Xv) if batch_size < 0 else batch_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_470": {
                "variable": {
                    "value": "testload",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(tensor(Xtest), tensor(Ytest).view(Ytest.size, 1))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(Xv) if batch_size < 0 else batch_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*l0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_465": {
                "data": {
                    "value": "Ytr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_labels(data, idx, fields, log_radii=log_radii)",
                            "Call"
                        ],
                        [
                            "Ytr.flatten()",
                            "Call"
                        ],
                        [
                            "Ytr[Ytr > min_r]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_466": {
                "data": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_labels(data, idx, fields, log_radii=log_radii)",
                            "Call"
                        ],
                        [
                            "Yv.flatten()",
                            "Call"
                        ],
                        [
                            "Yv[Yv > min_r]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_467": {
                "data": {
                    "value": "Ytest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_labels(data, idx, fields, log_radii=log_radii)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "n_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nh_nodes if n_layer > 0 else n_output",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "*args": {
                    "value": "nn.Linear(nh_nodes, nh_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "nh_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nh_nodes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "nh_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nh_nodes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nh_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nh_nodes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}