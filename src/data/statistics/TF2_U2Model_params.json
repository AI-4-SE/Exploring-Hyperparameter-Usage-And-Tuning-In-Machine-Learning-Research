{
    "GenJson.py": {
        "tensorflow": {
            "read_file_64": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_png_65": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ],
                        [
                            "image / 0.5",
                            "BinOp"
                        ],
                        [
                            "image - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(image, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_image_dtype_66": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ],
                        [
                            "image / 0.5",
                            "BinOp"
                        ],
                        [
                            "image - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(image, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_function_75": {
                "variable": {
                    "value": "(image, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "_readjson",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[i]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.int32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ],
                        [
                            "image / 0.5",
                            "BinOp"
                        ],
                        [
                            "image - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(image, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_with_pad_68": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ],
                        [
                            "image / 0.5",
                            "BinOp"
                        ],
                        [
                            "image - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(image, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "target_width": {
                    "value": "SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "resize_with_pad_78": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ],
                        [
                            "image / 0.5",
                            "BinOp"
                        ],
                        [
                            "image - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(image, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "target_width": {
                    "value": "SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_67": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ],
                        [
                            "image / 0.5",
                            "BinOp"
                        ],
                        [
                            "image - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(image, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_77": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ],
                        [
                            "image / 0.5",
                            "BinOp"
                        ],
                        [
                            "image - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(image, [h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "InferSeg.py": {
        "tensorflow": {
            "MirroredStrategy_13": {
                "variable": {
                    "value": "mirrored_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "read_file_21": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_png_22": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_image_dtype_23": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_24": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_32": {
                "variable": {
                    "value": "Y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Y_ > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_33": {
                "variable": {
                    "value": "Y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Y_.numpy()",
                            "Call"
                        ],
                        [
                            "tf.cast(Y_ > 0.5, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Y_, axis=[0, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_with_pad_27": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(X, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ],
                        [
                            "X / 0.5",
                            "BinOp"
                        ],
                        [
                            "X - 1",
                            "BinOp"
                        ]
                    ]
                },
                "target_height": {
                    "value": "SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "target_width": {
                    "value": "SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                }
            },
            "expand_dims_31": {
                "input": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(X, target_height=SIZE, target_width=SIZE)",
                            "Call"
                        ],
                        [
                            "X / 0.5",
                            "BinOp"
                        ],
                        [
                            "X - 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_image_dtype_35": {
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_48": {
                "value": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_26": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_with_pad_84": {
                "variable": {
                    "value": "Raw2",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "Raw2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.copy(Raw)",
                            "Call"
                        ],
                        [
                            "Raw2[:, start:end, :]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_with_pad(Raw2, 512, 512)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "target_width": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Misc.py": {
        "tensorflow": {
            "one_hot_26": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DA['Y'].astype(int).values",
                            "Attribute"
                        ],
                        [
                            "tf.one_hot(y, depth=Dummy, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "y[index,]",
                            "Subscript"
                        ]
                    ]
                },
                "depth": {
                    "value": "Dummy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "print_121": {
                "*inputs": {
                    "value": "ff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "','.join(ss_list)",
                            "Call"
                        ],
                        [
                            "','.join(ss_list)",
                            "Call"
                        ]
                    ]
                },
                "output_stream": {
                    "value": "LOGDIR",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "print_111": {
                "*inputs": {
                    "value": "ff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "','.join(ss_list)",
                            "Call"
                        ],
                        [
                            "','.join(ss_list)",
                            "Call"
                        ]
                    ]
                },
                "output_stream": {
                    "value": "LOGDIR",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Train.py": {
        "tensorflow": {
            "list_physical_devices_42": {
                "variable": {
                    "value": "physical_devices",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MirroredStrategy_63": {
                "variable": {
                    "value": "mirrored_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Policy_54": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mixed_float16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_103": {
                "variable": {
                    "value": "bce_loss0",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_105": {
                "variable": {
                    "value": "Loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_106": {
                "variable": {
                    "value": "ValLoss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanIoU_107": {
                "variable": {
                    "value": "IOU",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MeanIoU_108": {
                "variable": {
                    "value": "Val_IOU",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_memory_growth_44": {
                "device": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "physical_devices",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "my_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.learningrate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Progbar_170": {
                "variable": {
                    "value": "pb_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "len(img_path_list_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MeanIoU_207": {
                "variable": {
                    "value": "test_IOU",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "compute_average_loss_125": {
                "per_example_loss": {
                    "value": "per_example_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "muti_bce_loss_fusion(d0, Y)",
                            "Call"
                        ]
                    ]
                },
                "global_batch_size": {
                    "value": "GLOBAL_BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_121": {
                "input_tensor": {
                    "value": "loss0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bce_loss0(d0, labels_v)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_215": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(X, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(X > 0.5, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(X)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(X, tf.uint8)",
                            "Call"
                        ],
                        [
                            "X.numpy()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_216": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_217": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(X, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(X > 0.5, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(X)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(X, tf.uint8)",
                            "Call"
                        ],
                        [
                            "X.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_218": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(X, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(X > 0.5, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(X)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(X, tf.uint8)",
                            "Call"
                        ],
                        [
                            "X.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_221": {
                "variable": {
                    "value": "Raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Raw",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(Raw, axis=0)",
                            "Call"
                        ],
                        [
                            "(Raw + 1) * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(Raw, tf.uint8)",
                            "Call"
                        ],
                        [
                            "Raw.numpy()[..., [2, 1, 0]]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_image_dtype_223": {
                "variable": {
                    "value": "Raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "Raw",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(Raw, axis=0)",
                            "Call"
                        ],
                        [
                            "(Raw + 1) * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.convert_image_dtype(Raw, tf.uint8)",
                            "Call"
                        ],
                        [
                            "Raw.numpy()[..., [2, 1, 0]]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_226": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(Y, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(Y > 0.5, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(Y)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(Y, tf.uint8)",
                            "Call"
                        ],
                        [
                            "Y.numpy()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_227": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Y > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_228": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "Y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(Y, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(Y > 0.5, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(Y)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(Y, tf.uint8)",
                            "Call"
                        ],
                        [
                            "Y.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_229": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "Y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(Y, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(Y > 0.5, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(Y)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(Y, tf.uint8)",
                            "Call"
                        ],
                        [
                            "Y.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "U2Net.py": {
        "tensorflow": {
            "resize_19": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "src",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize(src, size=tf.keras.backend.shape(tar)[1:3], method='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.keras.backend.shape(tar)[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "method": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_6": {
                "variable": {
                    "value": "self.conv_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "dirate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNormalization_7": {
                "variable": {
                    "value": "self.bn_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_13": {
                "variable": {
                    "value": "xout",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "hx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.conv_s1(hx)",
                            "Call"
                        ],
                        [
                            "self.bn_s1(hx, training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.pool1(hx1)",
                            "Call"
                        ],
                        [
                            "self.pool2(hx2)",
                            "Call"
                        ],
                        [
                            "self.pool3(hx3)",
                            "Call"
                        ],
                        [
                            "self.pool4(hx4)",
                            "Call"
                        ],
                        [
                            "self.pool5(hx5)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.pool1(hx1)",
                            "Call"
                        ],
                        [
                            "self.pool2(hx2)",
                            "Call"
                        ],
                        [
                            "self.pool3(hx3)",
                            "Call"
                        ],
                        [
                            "self.pool4(hx4)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.pool1(hx1)",
                            "Call"
                        ],
                        [
                            "self.pool2(hx2)",
                            "Call"
                        ],
                        [
                            "self.pool3(hx3)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.pool1(hx1)",
                            "Call"
                        ],
                        [
                            "self.pool2(hx2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.pool12(hx1)",
                            "Call"
                        ],
                        [
                            "self.pool23(hx2)",
                            "Call"
                        ],
                        [
                            "self.pool34(hx3)",
                            "Call"
                        ],
                        [
                            "self.pool45(hx4)",
                            "Call"
                        ],
                        [
                            "self.pool56(hx5)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.pool12(hx1)",
                            "Call"
                        ],
                        [
                            "self.pool23(hx2)",
                            "Call"
                        ],
                        [
                            "self.pool34(hx3)",
                            "Call"
                        ],
                        [
                            "self.pool45(hx4)",
                            "Call"
                        ],
                        [
                            "self.pool56(hx5)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2D_30": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_33": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_36": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_39": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_42": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_106": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_109": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_112": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_115": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_176": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_179": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_182": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_235": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_238": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_319": {
                "variable": {
                    "value": "self.pool12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_322": {
                "variable": {
                    "value": "self.pool23",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_325": {
                "variable": {
                    "value": "self.pool34",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_328": {
                "variable": {
                    "value": "self.pool45",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_331": {
                "variable": {
                    "value": "self.pool56",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_342": {
                "variable": {
                    "value": "self.side1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_343": {
                "variable": {
                    "value": "self.side2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_344": {
                "variable": {
                    "value": "self.side3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_345": {
                "variable": {
                    "value": "self.side4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_346": {
                "variable": {
                    "value": "self.side5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_347": {
                "variable": {
                    "value": "self.side6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_349": {
                "variable": {
                    "value": "self.outconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_425": {
                "variable": {
                    "value": "self.pool12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_428": {
                "variable": {
                    "value": "self.pool23",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_431": {
                "variable": {
                    "value": "self.pool34",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_434": {
                "variable": {
                    "value": "self.pool45",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_437": {
                "variable": {
                    "value": "self.pool56",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_448": {
                "variable": {
                    "value": "self.side1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_449": {
                "variable": {
                    "value": "self.side2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_450": {
                "variable": {
                    "value": "self.side3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_451": {
                "variable": {
                    "value": "self.side4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_452": {
                "variable": {
                    "value": "self.side5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_453": {
                "variable": {
                    "value": "self.side6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_455": {
                "variable": {
                    "value": "self.outconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_ch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_78": {
                "values": {
                    "value": "[hx7, hx6]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_81": {
                "values": {
                    "value": "[hx6dup, hx5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_84": {
                "values": {
                    "value": "[hx5dup, hx4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_87": {
                "values": {
                    "value": "[hx4dup, hx3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_90": {
                "values": {
                    "value": "[hx3dup, hx2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_93": {
                "values": {
                    "value": "[hx2dup, hx1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_150": {
                "values": {
                    "value": "[hx6, hx5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_153": {
                "values": {
                    "value": "[hx5dup, hx4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_156": {
                "values": {
                    "value": "[hx4dup, hx3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_159": {
                "values": {
                    "value": "[hx3dup, hx2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_162": {
                "values": {
                    "value": "[hx2dup, hx1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_212": {
                "values": {
                    "value": "[hx5, hx4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_215": {
                "values": {
                    "value": "[hx4dup, hx3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_218": {
                "values": {
                    "value": "[hx3dup, hx2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_221": {
                "values": {
                    "value": "[hx2dup, hx1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_264": {
                "values": {
                    "value": "[hx4, hx3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_267": {
                "values": {
                    "value": "[hx3dup, hx2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_270": {
                "values": {
                    "value": "[hx2dup, hx1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_305": {
                "values": {
                    "value": "[hx4, hx3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_306": {
                "values": {
                    "value": "[hx3d, hx2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_307": {
                "values": {
                    "value": "[hx2d, hx1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_380": {
                "values": {
                    "value": "(hx6up, hx5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_383": {
                "values": {
                    "value": "[hx5dup, hx4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_386": {
                "values": {
                    "value": "[hx4dup, hx3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_389": {
                "values": {
                    "value": "[hx3dup, hx2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_392": {
                "values": {
                    "value": "[hx2dup, hx1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_413": {
                "values": {
                    "value": "[d1, d2, d3, d4, d5, d6]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_415": {
                "x": {
                    "value": "d6",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.side6(hx6)",
                            "Call"
                        ],
                        [
                            "_upsample_like(d6, d1)",
                            "Call"
                        ],
                        [
                            "self.side6(hx6)",
                            "Call"
                        ],
                        [
                            "_upsample_like(d6, d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_486": {
                "values": {
                    "value": "[hx6up, hx5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_489": {
                "values": {
                    "value": "[hx5dup, hx4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_492": {
                "values": {
                    "value": "[hx4dup, hx3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_495": {
                "values": {
                    "value": "[hx3dup, hx2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_498": {
                "values": {
                    "value": "[hx2dup, hx1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_519": {
                "values": {
                    "value": "[d1, d2, d3, d4, d5, d6]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_521": {
                "x": {
                    "value": "d6",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.side6(hx6)",
                            "Call"
                        ],
                        [
                            "_upsample_like(d6, d1)",
                            "Call"
                        ],
                        [
                            "self.side6(hx6)",
                            "Call"
                        ],
                        [
                            "_upsample_like(d6, d1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_19": {
                "input": {
                    "value": "tar",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}