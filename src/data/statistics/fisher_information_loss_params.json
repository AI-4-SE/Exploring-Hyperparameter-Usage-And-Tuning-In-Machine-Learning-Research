{
    "dataloading.py": {
        "torch": {
            "randint_35": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "categories_per_attribute",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_examples, num_attributes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_37": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randint(0, categories_per_attribute, (num_examples, num_attributes))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.one_hot(X, categories_per_attribute)",
                            "Call"
                        ],
                        [
                            "X[:, :, :-1]",
                            "Subscript"
                        ],
                        [
                            "X.reshape(num_examples, -1)",
                            "Call"
                        ],
                        [
                            "X.todense()",
                            "Call"
                        ],
                        [
                            "np.delete(X, drop_idx, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).float()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "categories_per_attribute",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_229": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randint(0, categories_per_attribute, (num_examples, num_attributes))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.one_hot(X, categories_per_attribute)",
                            "Call"
                        ],
                        [
                            "X[:, :, :-1]",
                            "Subscript"
                        ],
                        [
                            "X.reshape(num_examples, -1)",
                            "Call"
                        ],
                        [
                            "X.todense()",
                            "Call"
                        ],
                        [
                            "np.delete(X, drop_idx, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_230": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_233": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "X.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_328": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(features)",
                            "Call"
                        ],
                        [
                            "features.float().div_(255.0)",
                            "Call"
                        ],
                        [
                            "features.reshape(features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "features.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "features.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "features[mask, :]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(features, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "list(features.split(1, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.cat(features, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_330": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(targets)",
                            "Call"
                        ],
                        [
                            "targets.long()",
                            "Call"
                        ],
                        [
                            "targets[mask]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_412": {
                "variable": {
                    "value": "permutation",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dataset_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['targets'].nelement()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_442": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "original_data['features']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_444": {
                "variable": {
                    "value": "covariance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean_data.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "zero_mean_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.sub(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "symeig_445": {
                "variable": {
                    "value": "(_, projection)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "covariance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(zero_mean_data.t(), zero_mean_data)",
                            "Call"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "int(train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_47": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_examples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "time.time()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(features)",
                            "Call"
                        ],
                        [
                            "features.float().div_(255.0)",
                            "Call"
                        ],
                        [
                            "features.reshape(features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "features.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "features.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "features[mask, :]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(features, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "list(features.split(1, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.cat(features, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(targets)",
                            "Call"
                        ],
                        [
                            "targets.long()",
                            "Call"
                        ],
                        [
                            "targets[mask]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_171": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(features)",
                            "Call"
                        ],
                        [
                            "features.float().div_(255.0)",
                            "Call"
                        ],
                        [
                            "features.reshape(features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "features.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "features.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "features[mask, :]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(features, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "list(features.split(1, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.cat(features, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_232": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_241": {
                "seed": {
                    "value": "time.time()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_327": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(features)",
                            "Call"
                        ],
                        [
                            "features.float().div_(255.0)",
                            "Call"
                        ],
                        [
                            "features.reshape(features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "features.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "features.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "features[mask, :]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(features, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "list(features.split(1, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.cat(features, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_329": {
                "obj": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(targets)",
                            "Call"
                        ],
                        [
                            "targets.long()",
                            "Call"
                        ],
                        [
                            "targets[mask]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_282": {
                "obj": {
                    "value": "training_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(read_image_file(os.path.join(self.raw_folder, 'mnist1m-images-idx3-ubyte')), read_label_file(os.path.join(self.raw_folder, 'mnist1m-labels-idx1-ubyte')))",
                            "Tuple"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "['adult.data', 'adult.names', 'adult.test']",
                            "List"
                        ]
                    ]
                }
            },
            "save_284": {
                "obj": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(read_image_file(os.path.join(self.raw_folder, 't10k-images-idx3-ubyte')), read_label_file(os.path.join(self.raw_folder, 't10k-labels-idx1-ubyte')))",
                            "Tuple"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "['adult.data', 'adult.names', 'adult.test']",
                            "List"
                        ]
                    ]
                }
            },
            "randperm_374": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset['features'].size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_374": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset['features'].size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_387": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transformed_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[transform(batch[n, :]) for n in range(batch.size(0))]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_45": {
                "*size": {
                    "value": "num_examples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "one_hot_163": {
                "variable": {
                    "value": "features[e]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feat.squeeze().to(torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max(keys.values()) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_157": {
                "input": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "std_157": {
                "input": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fisher_experiment.py": {
        "torch": {
            "tensor_38": {
                "variable": {
                    "value": "accuracies",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracies",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(accuracies)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "jacobian_60": {
                "variable": {
                    "value": "ind_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.get_params()",
                            "Call"
                        ],
                        [
                            "model.get_params()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_39": {
                "input": {
                    "value": "accuracies",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(accuracies)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "std_39": {
                "input": {
                    "value": "accuracies",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(accuracies)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "randn_like_29": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.get_params()",
                            "Call"
                        ],
                        [
                            "model.get_params()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_inversion.py": {
        "torch": {
            "argmax_56": {
                "variable": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_marginal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_log_marginal(train_data, target_attribute, weights=weights, one_hot=one_hot)",
                            "Call"
                        ],
                        [
                            "compute_log_marginal(train_data, target_attribute, weights=weights, one_hot=one_hot)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_30": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[values, last_value]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_31": {
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([values, last_value], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_36": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "train_data['features'].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "target_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_values, last_value]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_57": {
                "size": {
                    "value": "(train_data['features'].shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(log_marginal)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[:, :target_attribute[0]], features[:, target_attribute[1]:], data['targets'][:, None].float()]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_95": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "train_data['features'].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_142": {
                "input": {
                    "value": "torch.stack(scores, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "self.thetas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "train_data['features'].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "target_attribute[1] - target_attribute[0] + (not one_hot)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "train_data['features'].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_256": {
                "variable": {
                    "value": "all_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "confusions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[matched[y == 0].sum(), (~matched)[y == 0].sum()], [(~matched)[y == 1].sum(), matched[y == 1].sum()]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_142": {
                "tensors": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "-(self.thetas - model.theta.view(1, 1, -1)).pow(2).sum(2)",
                            "UnaryOp"
                        ],
                        [
                            "0.5 * scores / gamma ** 2 + prior_lam * self.log_marginal.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_179": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "-(self.thetas - model.theta.view(1, 1, -1)).pow(2).sum(2)",
                            "UnaryOp"
                        ],
                        [
                            "0.5 * scores / gamma ** 2 + prior_lam * self.log_marginal.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_258": {
                "*size": {
                    "value": "len(data['targets'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "vstack_28": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(1, d - 1), torch.ones(d - 1, d - 1).tril()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_33": {
                "input": {
                    "value": "J",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "J[:, :, range(*target_attribute)]",
                            "Subscript"
                        ],
                        [
                            "J @ U",
                            "BinOp"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "diagonal_83": {
                "variable": {
                    "value": "XTXdiag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XTX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(weights[:, None] * X).T @ X",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_88": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XTX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(weights[:, None] * X).T @ X",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_151": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "X.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_155": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LBFGS_156": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[theta]",
                    "type": "List",
                    "possible_values": []
                },
                "line_search_fn": {
                    "value": "strong_wolfe",
                    "type": "str",
                    "possible_values": []
                }
            },
            "diagonal_198": {
                "variable": {
                    "value": "Hdiag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.weights.unsqueeze(1) * s * (1 - s) * X).T @ X",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_217": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(X.shape[1], c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LBFGS_218": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[theta]",
                    "type": "List",
                    "possible_values": []
                },
                "line_search_fn": {
                    "value": "strong_wolfe",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_219": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "vstack_30": {
                "tensors": {
                    "value": "[torch.eye(d - 1), torch.zeros(1, d - 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_72": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(data['targets'])",
                            "Call"
                        ],
                        [
                            "len(data['targets'])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_134": {
                "tensors": {
                    "value": "[JX, Jy.unsqueeze(2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_142": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(data['targets'])",
                            "Call"
                        ],
                        [
                            "len(data['targets'])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_208": {
                "tensors": {
                    "value": "[JX, JY]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_235": {
                "input": {
                    "value": "X @ self.theta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_183": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_215": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['targets'].float()",
                            "Call"
                        ],
                        [
                            "data['targets'].float()",
                            "Call"
                        ],
                        [
                            "data['targets'].float()",
                            "Call"
                        ],
                        [
                            "data['targets'].float()",
                            "Call"
                        ],
                        [
                            "data['targets'].float()",
                            "Call"
                        ],
                        [
                            "data['targets'].float()",
                            "Call"
                        ],
                        [
                            "data['targets']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "d - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "d - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "d - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_30": {
                "n": {
                    "value": "d - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "d - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "solve_86": {
                "input": {
                    "value": "b[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "XTX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(weights[:, None] * X).T @ X",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "private_model_inversion.py": {
        "torch": {
            "load_113": {
                "variable": {
                    "value": "all_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_115": {
                "*size": {
                    "value": "len(data['targets'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_73": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.get_params()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "reweighted.py": {
        "torch": {
            "ones_35": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data['targets'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_143": {
                "obj": {
                    "value": "torch.stack(all_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.results_file + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "len(updated_fi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_143": {
                "tensors": {
                    "value": "all_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.ones(len(updated_fi))]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "test_jacobians.py": {
        "torch": {
            "tensor_83": {
                "variable": {
                    "value": "steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 / s for s in steps]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_84": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_94": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_95": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_103": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_105": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_106": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_121": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_122": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                }
            },
            "inverse_125": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X.T @ X",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "jacobian_141": {
                "variable": {
                    "value": "(Jx_auto, Jy_auto)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "f_x_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(xi, yi)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "jacobian_155": {
                "variable": {
                    "value": "(Jx_auto2, Jy_auto2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "f_x_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(xi, yi)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "diag_168": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_169": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_170": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_200": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_201": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                }
            },
            "inverse_204": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X.T @ X",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_266": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(d, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_267": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "high": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(n,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "inverse_177": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X.T @ W @ X",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "jacobian_189": {
                "variable": {
                    "value": "(Jx_auto, Jy_auto)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "f_x_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(xi, yi)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_229": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w @ x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_233": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w @ x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_247": {
                "variable": {
                    "value": "si",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w.dot(xi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_263": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_98": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand(d, d)",
                            "Call"
                        ],
                        [
                            "torch.rand(d, d)",
                            "Call"
                        ],
                        [
                            "A + A.T + 5 * torch.eye(10)",
                            "BinOp"
                        ],
                        [
                            "torch.inverse(X.T @ X)",
                            "Call"
                        ],
                        [
                            "torch.inverse(X.T @ W @ X)",
                            "Call"
                        ],
                        [
                            "torch.inverse(X.T @ X)",
                            "Call"
                        ],
                        [
                            "(W.unsqueeze(1) * X).T @ X",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Aplus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rank_one_update(Aminus, x, step=1)",
                            "Call"
                        ],
                        [
                            "rank_two_update(Aminus, x1, x2, steps=[-1, -1])",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_109": {
                "input": {
                    "value": "Aone_one",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rank_one_update(rank_one_update(A, x1), x2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Atwo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rank_two_update(A, x1, x2, steps=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_114": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand(d, d)",
                            "Call"
                        ],
                        [
                            "torch.rand(d, d)",
                            "Call"
                        ],
                        [
                            "A + A.T + 5 * torch.eye(10)",
                            "BinOp"
                        ],
                        [
                            "torch.inverse(X.T @ X)",
                            "Call"
                        ],
                        [
                            "torch.inverse(X.T @ W @ X)",
                            "Call"
                        ],
                        [
                            "torch.inverse(X.T @ X)",
                            "Call"
                        ],
                        [
                            "(W.unsqueeze(1) * X).T @ X",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Aplus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rank_one_update(Aminus, x, step=1)",
                            "Call"
                        ],
                        [
                            "rank_two_update(Aminus, x1, x2, steps=[-1, -1])",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_146": {
                "input": {
                    "value": "Jy.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Jy_auto.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_147": {
                "input": {
                    "value": "Jx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t1 + t2 + t3",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Jx_auto",
                    "type": "Variable",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_156": {
                "input": {
                    "value": "Jy_auto.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Jy_auto2.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_157": {
                "input": {
                    "value": "Jx_auto",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "Jx_auto2",
                    "type": "Variable",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_161": {
                "input": {
                    "value": "Jy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c * Ax",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Jy_auto",
                    "type": "Variable",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_162": {
                "input": {
                    "value": "Jx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t1 + t2 + t3",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Jx_auto",
                    "type": "Variable",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_168": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                }
            },
            "allclose_211": {
                "input": {
                    "value": "batchJx",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.stack(singleJx)",
                    "type": "Call",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_212": {
                "input": {
                    "value": "batchJy",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.stack(singleJy)",
                    "type": "Call",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_215": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                }
            },
            "allclose_223": {
                "input": {
                    "value": "batchJx",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.stack(singleJx)",
                    "type": "Call",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_224": {
                "input": {
                    "value": "batchJy",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.stack(singleJy)",
                    "type": "Call",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "inverse_235": {
                "input": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s * (1 - s) * x @ x.T + x.shape[1] * l2 * torch.eye(x.shape[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_261": {
                "tensors": {
                    "value": "Jf_fd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_Jf_fd(x, y, l2, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_277": {
                "input": {
                    "value": "Jf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_Jf_exact(w_star, x, y, l2, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Jf_fd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_Jf_fd(x, y, l2, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "rtol": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "diag_86": {
                "input": {
                    "value": "steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([1 / s for s in steps])",
                            "Call"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_104": {
                "n": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_193": {
                "input": {
                    "value": "Jy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c * Ax",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Jy_auto",
                    "type": "Variable",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_194": {
                "input": {
                    "value": "Jx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t1 + t2 + t3",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Jx_auto",
                    "type": "Variable",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_211": {
                "tensors": {
                    "value": "singleJx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_212": {
                "tensors": {
                    "value": "singleJy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_223": {
                "tensors": {
                    "value": "singleJx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_224": {
                "tensors": {
                    "value": "singleJy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_238": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_234": {
                "n": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_248": {
                "n": {
                    "value": "xi.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}