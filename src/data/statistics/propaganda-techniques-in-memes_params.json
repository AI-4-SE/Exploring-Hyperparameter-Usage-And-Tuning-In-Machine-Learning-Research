{
    "mmf/modules/metrics.py": {
        "sklearn": {
            "f1_score_754": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "expected.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**self._sk_kwargs",
                    "type": null,
                    "possible_values": []
                }
            },
            "roc_auc_score_864": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "expected.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**self._sk_kwargs",
                    "type": null,
                    "possible_values": []
                }
            },
            "average_precision_score_922": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "expected.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**self._sk_kwargs",
                    "type": null,
                    "possible_values": []
                }
            },
            "average_precision_score_961": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "expected.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**self._sk_kwargs",
                    "type": null,
                    "possible_values": []
                }
            },
            "precision_recall_curve_1030": {
                "variable": {
                    "value": "(precision, recall, thresh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "expected.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "output.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "hamming_loss_1079": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "expected.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**self._sk_kwargs",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "one_hot_66": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "expected.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "output.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_332": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_334": {
                "variable": {
                    "value": "x1_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(x, dim=dim)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(x, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_385": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_387": {
                "variable": {
                    "value": "x1_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(x, dim=dim)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(x, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_658": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.sum(scores) / expected.size(0)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "float(sum(accuracy)) / len(accuracy)",
                            "BinOp"
                        ],
                        [
                            "self.evaluator.eval_pred_list(predictions)",
                            "Call"
                        ],
                        [
                            "torch.tensor(accuracy).to(sample_list.context_tokens.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_861": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_output['scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_919": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_output['scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_952": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_output['scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_586": {
                "input": {
                    "value": "ranks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ranked_idx.clone().fill_(0)",
                            "Call"
                        ],
                        [
                            "ranks + 1",
                            "BinOp"
                        ],
                        [
                            "self.score_to_ranks(output)",
                            "Call"
                        ],
                        [
                            "self.process_ranks(gt_ranks)",
                            "Call"
                        ],
                        [
                            "self.get_ranks(sample_list, model_output)",
                            "Call"
                        ],
                        [
                            "self.get_ranks(sample_list, model_output)",
                            "Call"
                        ],
                        [
                            "self.get_ranks(sample_list, model_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_613": {
                "input": {
                    "value": "ranks.reciprocal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_738": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['captions']",
                            "Subscript"
                        ],
                        [
                            "torch.max(model_output['scores'], dim=-1)[1]",
                            "Subscript"
                        ],
                        [
                            "scores.tolist()",
                            "Call"
                        ],
                        [
                            "one_hots * expected",
                            "BinOp"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "round_741": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "torch.max(output, 1)[1]",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "output[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self._masked_unk_softmax(output, 1, 0)",
                            "Call"
                        ],
                        [
                            "output.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "self._masked_unk_softmax(output, 1, 0)",
                            "Call"
                        ],
                        [
                            "output.argmax(dim=1).clone().tolist()",
                            "Call"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.round(output)",
                            "Call"
                        ],
                        [
                            "scores.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(model_output['scores'], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(model_output['scores'], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(model_output['scores'], dim=-1)",
                            "Call"
                        ],
                        [
                            "output[:, 1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.softmax(model_output['scores'], dim=-1)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.round(output)",
                            "Call"
                        ],
                        [
                            "scores.argmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1069": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['captions']",
                            "Subscript"
                        ],
                        [
                            "torch.max(model_output['scores'], dim=-1)[1]",
                            "Subscript"
                        ],
                        [
                            "scores.tolist()",
                            "Call"
                        ],
                        [
                            "one_hots * expected",
                            "BinOp"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "round_1070": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "torch.max(output, 1)[1]",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "output[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self._masked_unk_softmax(output, 1, 0)",
                            "Call"
                        ],
                        [
                            "output.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "self._masked_unk_softmax(output, 1, 0)",
                            "Call"
                        ],
                        [
                            "output.argmax(dim=1).clone().tolist()",
                            "Call"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.round(output)",
                            "Call"
                        ],
                        [
                            "scores.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(model_output['scores'], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(model_output['scores'], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(model_output['scores'], dim=-1)",
                            "Call"
                        ],
                        [
                            "output[:, 1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.softmax(model_output['scores'], dim=-1)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.round(output)",
                            "Call"
                        ],
                        [
                            "scores.argmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_362": {
                "input": {
                    "value": "scores",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['captions']",
                            "Subscript"
                        ],
                        [
                            "torch.max(model_output['scores'], dim=-1)[1]",
                            "Subscript"
                        ],
                        [
                            "scores.tolist()",
                            "Call"
                        ],
                        [
                            "one_hots * expected",
                            "BinOp"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_1023": {
                "input": {
                    "value": "model_output['scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "values[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "values[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_246": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "torch.max(output, 1)[1]",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "output[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self._masked_unk_softmax(output, 1, 0)",
                            "Call"
                        ],
                        [
                            "output.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "self._masked_unk_softmax(output, 1, 0)",
                            "Call"
                        ],
                        [
                            "output.argmax(dim=1).clone().tolist()",
                            "Call"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.round(output)",
                            "Call"
                        ],
                        [
                            "scores.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(model_output['scores'], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(model_output['scores'], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(model_output['scores'], dim=-1)",
                            "Call"
                        ],
                        [
                            "output[:, 1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.softmax(model_output['scores'], dim=-1)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.round(output)",
                            "Call"
                        ],
                        [
                            "scores.argmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_251": {
                "input": {
                    "value": "expected",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.nn.functional.one_hot(expected.long(), num_classes=output.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "torch.max(expected, 1)[1]",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['answers']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "_convert_to_one_hot(expected, output)",
                            "Call"
                        ],
                        [
                            "expected.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "_convert_to_one_hot(expected, output)",
                            "Call"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "_convert_to_one_hot(expected, output)",
                            "Call"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "expected.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "expected.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "_convert_to_one_hot(expected, output)",
                            "Call"
                        ],
                        [
                            "expected.argmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_303": {
                "input": {
                    "value": "model_output['scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_476": {
                "input": {
                    "value": "torch.le(ranks, k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "le_476": {
                "input": {
                    "value": "ranks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ranked_idx.clone().fill_(0)",
                            "Call"
                        ],
                        [
                            "ranks + 1",
                            "BinOp"
                        ],
                        [
                            "self.score_to_ranks(output)",
                            "Call"
                        ],
                        [
                            "self.process_ranks(gt_ranks)",
                            "Call"
                        ],
                        [
                            "self.get_ranks(sample_list, model_output)",
                            "Call"
                        ],
                        [
                            "self.get_ranks(sample_list, model_output)",
                            "Call"
                        ],
                        [
                            "self.get_ranks(sample_list, model_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/common/meter.py": {
        "torch": {
            "tensor_36": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.averaged_value_deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.batch_sizes)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/common/registry.py": {
        "torch": {}
    },
    "mmf/common/report.py": {
        "torch": {
            "cat_86": {
                "variable": {
                    "value": "self[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self[key], report[key])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/common/sample.py": {
        "torch": {
            "device_397": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_400": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_345": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_399": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmf/common/test_reporter.py": {
        "torch": {}
    },
    "mmf/common/typings.py": {
        "torch": {}
    },
    "mmf/datasets/base_dataset.py": {
        "torch": {}
    },
    "mmf/datasets/builders/clevr/dataset.py": {
        "torch": {
            "from_numpy_151": {
                "variable": {
                    "value": "current_sample.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/builders/coco/dataset.py": {
        "torch": {
            "tensor_31": {
                "variable": {
                    "value": "current_sample.caption_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_info['caption_id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "current_sample.caption_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "len(sample_info['caption_tokens'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_60": {
                "tensors": {
                    "value": "reference_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/datasets/builders/conceptual_captions/dataset.py": {
        "torch": {
            "tensor_18": {
                "variable": {
                    "value": "current_sample.caption_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "len(processed_caption['text'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_33": {
                "variable": {
                    "value": "current_sample.answers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[processed_caption['text']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "current_sample.image_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_info['image_id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/builders/gqa/dataset.py": {
        "torch": {
            "tensor_22": {
                "variable": {
                    "value": "current_sample.question_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_info['question_id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "current_sample.image_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_info['image_id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/builders/hateful_memes/dataset.py": {
        "torch": {
            "softmax_112": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "report.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_113": {
                "variable": {
                    "value": "(_, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(report.scores, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "current_sample.id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "int(sample_info['id'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "current_sample.id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "int(sample_info['id'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "current_sample.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_info['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "current_sample.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_info['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/builders/mmimdb/dataset.py": {
        "torch": {}
    },
    "mmf/datasets/builders/nlvr2/dataset.py": {
        "torch": {
            "tensor_48": {
                "variable": {
                    "value": "current_sample.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "is_correct",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 if sample_info['label'] == 'True' else 0",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/builders/okvqa/dataset.py": {
        "torch": {
            "tensor_44": {
                "variable": {
                    "value": "current_sample.id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "int(sample_info['question_id'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/builders/propaganda/dataset.py": {
        "torch": {
            "tensor_78": {
                "variable": {
                    "value": "current_sample.id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "id",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(sample_info['id'].split('_batch_2')[0]) + 2000",
                            "BinOp"
                        ],
                        [
                            "int(sample_info['id'].split('bg_mk_memes_')[1]) + 3000",
                            "BinOp"
                        ],
                        [
                            "int(sample_info['id'].split('bg_memes_')[1]) + 4000",
                            "BinOp"
                        ],
                        [
                            "int(sample_info['id'].split('mk_memes_')[1]) + 5000",
                            "BinOp"
                        ],
                        [
                            "int(sample_info['id'])",
                            "Call"
                        ],
                        [
                            "int(sample_info['id'].split('_batch_2')[0]) + 2000",
                            "BinOp"
                        ],
                        [
                            "int(sample_info['id'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "22",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "current_sample.id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "id",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(sample_info['id'].split('_batch_2')[0]) + 2000",
                            "BinOp"
                        ],
                        [
                            "int(sample_info['id'].split('bg_mk_memes_')[1]) + 3000",
                            "BinOp"
                        ],
                        [
                            "int(sample_info['id'].split('bg_memes_')[1]) + 4000",
                            "BinOp"
                        ],
                        [
                            "int(sample_info['id'].split('mk_memes_')[1]) + 5000",
                            "BinOp"
                        ],
                        [
                            "int(sample_info['id'])",
                            "Call"
                        ],
                        [
                            "int(sample_info['id'].split('_batch_2')[0]) + 2000",
                            "BinOp"
                        ],
                        [
                            "int(sample_info['id'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "22",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/builders/textvqa/dataset.py": {
        "torch": {
            "tensor_91": {
                "variable": {
                    "value": "current_sample.question_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_info['question_id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "sample.text_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "len(processed_question['tokens'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_193": {
                "variable": {
                    "value": "order_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "order_vectors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.eye(len(sample.ocr_tokens), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(order_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_162": {
                "variable": {
                    "value": "sample.image_feature_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "sample.image_feature_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/builders/visual_dialog/database.py": {
        "torch": {}
    },
    "mmf/datasets/builders/visual_dialog/dataset.py": {
        "torch": {}
    },
    "mmf/datasets/builders/visual_entailment/dataset.py": {
        "torch": {
            "tensor_46": {
                "variable": {
                    "value": "current_sample.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LABEL_TO_INT_MAPPING[sample_info['gold_label']]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/builders/visual_genome/dataset.py": {
        "torch": {}
    },
    "mmf/datasets/builders/vizwiz/dataset.py": {
        "torch": {}
    },
    "mmf/datasets/builders/vqa2/dataset.py": {
        "torch": {
            "tensor_73": {
                "variable": {
                    "value": "current_sample.question_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_info['question_id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "current_sample.image_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_info['image_id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "current_sample.text_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "len(sample_info['question_tokens'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_122": {
                "variable": {
                    "value": "order_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(sample.context_tokens)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/builders/vqacp_v2/dataset.py": {
        "torch": {
            "tensor_53": {
                "variable": {
                    "value": "current_sample.id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "int(sample_info['question_id'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/concat_dataset.py": {
        "torch": {}
    },
    "mmf/datasets/databases/annotation_database.py": {
        "torch": {}
    },
    "mmf/datasets/databases/image_database.py": {
        "torch": {}
    },
    "mmf/datasets/databases/readers/feature_readers.py": {
        "torch": {
            "from_numpy_128": {
                "variable": {
                    "value": "image_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.reshape(tmp, (-1, c_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "image_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.reshape(tmp, (-1, c_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "image_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tmp_image_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((self.max_loc, image_dim), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "image_feat_bbox.item().get('image_feature')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "image_info[max_features]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "image_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_257": {
                "variable": {
                    "value": "tmp_image_feat_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tmp_image_feat_2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((self.max_loc, image_dim), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmp_image_feat_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_260": {
                "variable": {
                    "value": "tmp_image_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tmp_image_box",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((self.max_loc, 4), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmp_image_box)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "padded_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, c, self.img_h, self.img_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_19": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.load(f, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(feat)",
                            "Call"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "load_feat(image_feat_path)",
                            "Call"
                        ],
                        [
                            "load_feat(image_feat_path, convert_to_tensor=True)",
                            "Call"
                        ],
                        [
                            "load_feat(image_feat_path, convert_to_tensor=True)",
                            "Call"
                        ],
                        [
                            "padded_feat",
                            "Name"
                        ],
                        [
                            "feat.squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_21": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "data": {
                    "value": "image_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_21": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/mmf_dataset_builder.py": {
        "torch": {
            "Generator_165": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_167": {
                "n": {
                    "value": "dataset_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ]
                    ]
                },
                "generator": {
                    "value": "generator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/datasets/processors/bert_processors.py": {
        "torch": {
            "tensor_112": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "torch.tensor(input_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * len(input_ids)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(input_mask, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "segment_ids",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[0] + [0] * len(tokens_a) + [0]",
                            "BinOp"
                        ],
                        [
                            "segment_ids + ([1] * len(tokens_b) + [1])",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(segment_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "lm_label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lm_label_ids",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[-1] + label_a + [-1] + label_b + [-1]",
                            "BinOp"
                        ],
                        [
                            "[-1] + label_a + [-1]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(lm_label_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "output[is_correct]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "item['is_correct']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_46": {
                "low": {
                    "value": "len(self._tokenizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/processors/image_processors.py": {
        "torch": {
            "cat_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/processors/processors.py": {
        "torch": {
            "tensor_315": {
                "variable": {
                    "value": "token_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "token_length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(len(tokens), self.max_length)",
                            "Call"
                        ],
                        [
                            "torch.tensor(token_length, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_340": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_390": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(indices), self.vocab.get_embedding_dim())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_513": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.max_length, self.model.get_dimension())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_623": {
                "variable": {
                    "value": "answers_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.DEFAULT_NUM_ANSWERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_691": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.get_vocab_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_723": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.get_vocab_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_1174": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.max_length, phoc_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1320": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_copy_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.get_vocab_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1354": {
                "variable": {
                    "value": "train_prev_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_copy_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1356": {
                "variable": {
                    "value": "train_loss_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_copy_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1453": {
                "variable": {
                    "value": "image_location",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bbox.shape[0], 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_1454": {
                "variable": {
                    "value": "image_location[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bbox[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_520": {
                "variable": {
                    "value": "output[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.stov[token]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1179": {
                "variable": {
                    "value": "output[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self._build_phoc(token)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1434": {
                "data": {
                    "value": "image_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_1198": {
                "ndarray": {
                    "value": "final_blob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((self.max_length,) + blob.shape[1:], blob.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1495": {
                "data": {
                    "value": "class_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.label_vocab.word2idx(label) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1310": {
                "*size": {
                    "value": "self.max_copy_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/datasets/subset_dataset.py": {
        "torch": {}
    },
    "mmf/models/ban.py": {
        "torch": {
            "ModuleList_68": {
                "variable": {
                    "value": "self.b_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "b_net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_69": {
                "variable": {
                    "value": "self.q_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "q_prj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/models/base_model.py": {
        "torch": {}
    },
    "mmf/models/butd.py": {
        "torch": {
            "pad_161": {
                "variable": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "results",
                    "type": "Call",
                    "possible_values": [
                        [
                            "decoder.get_result()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(results, (0, self.text_processor.max_length - results.size()[-1]), 'constant', 0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.text_processor.max_length - results.size()[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "model_output[losses][loss_key + /dummy_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_list.image_feature_0.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "sample_list.answers.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_97": {
                "variable": {
                    "value": "output_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_98": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.log_softmax(prev_output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "data[texts]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['texts'], indices.view(batch_size_t, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/models/cnn_lstm.py": {
        "torch": {
            "Embedding_55": {
                "variable": {
                    "value": "self.text_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_question_choices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "registry.get(_TEMPLATES['question_vocab_size'].format(self._datasets[0]))",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.config.text_embedding.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_58": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden[:, 0, :], hidden[:, 1, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "fused",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/models/fusions.py": {
        "torch": {
            "flatten_52": {
                "variable": {
                    "value": "modal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modal",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.modal(modal, *modal_args, **modal_kwargs)",
                            "Call"
                        ],
                        [
                            "torch.flatten(modal, start_dim=1)",
                            "Call"
                        ],
                        [
                            "sample_list.image_feature_0",
                            "Attribute"
                        ],
                        [
                            "sample_list.image",
                            "Attribute"
                        ],
                        [
                            "sample_list.image_feature_0",
                            "Attribute"
                        ],
                        [
                            "sample_list.image",
                            "Attribute"
                        ],
                        [
                            "sample_list.image_feature_0",
                            "Attribute"
                        ],
                        [
                            "sample_list.image",
                            "Attribute"
                        ],
                        [
                            "self.modal_classifier(modal_embedding)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_53": {
                "variable": {
                    "value": "text",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.text(text, *text_args, **text_kwargs)",
                            "Call"
                        ],
                        [
                            "text[1]",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(text, start_dim=1)",
                            "Call"
                        ],
                        [
                            "sample_list.input_ids",
                            "Attribute"
                        ],
                        [
                            "sample_list.text",
                            "Attribute"
                        ],
                        [
                            "sample_list.input_ids",
                            "Attribute"
                        ],
                        [
                            "self.text_classifier(text_embedding)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[text_embedding, modal_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[text_embedding, modal_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/models/interfaces/mmbt.py": {
        "torch": {
            "softmax_83": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_84": {
                "variable": {
                    "value": "(confidence, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.functional.softmax(output['scores'], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/models/lxmert.py": {
        "torch": {
            "Sequential_79": {
                "variable": {
                    "value": "self.logit_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, hid_dim * 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.logit_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, hid_dim * 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_157": {
                "variable": {
                    "value": "self.decoder_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{key: nn.Linear(config.hidden_size, config.visual_loss_config[key][0]) for key in self.visual_losses}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.visn_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.visual_feat_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_192": {
                "variable": {
                    "value": "self.visn_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.box_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "pos_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.visual_pos_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_196": {
                "variable": {
                    "value": "self.box_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_198": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_287": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(self.num_l_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_290": {
                "variable": {
                    "value": "self.x_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LXMERTXLayer(config) for _ in range(self.num_x_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_293": {
                "variable": {
                    "value": "self.r_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(self.num_r_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_663": {
                "variable": {
                    "value": "max_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image_feature_variable.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.logit_gqa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, hid_dim * 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_351": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_353": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_716": {
                "variable": {
                    "value": "image_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "params['visual_feats'].size(-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hid_dim * 2",
                            "BinOp"
                        ],
                        [
                            "hid_dim",
                            "Name"
                        ],
                        [
                            "hid_dim * 2",
                            "BinOp"
                        ],
                        [
                            "hid_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_82": {
                "normalized_shape": {
                    "value": "hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "num_labels",
                            "Name"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "num_labels[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hid_dim * 2",
                            "BinOp"
                        ],
                        [
                            "hid_dim",
                            "Name"
                        ],
                        [
                            "hid_dim * 2",
                            "BinOp"
                        ],
                        [
                            "hid_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_137": {
                "normalized_shape": {
                    "value": "hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "in_features": {
                    "value": "hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "num_labels",
                            "Name"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "num_labels[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SmoothL1Loss_440": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_441": {
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_442": {
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_682": {
                "variable": {
                    "value": "answers",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "answers",
                    "type": "Call",
                    "possible_values": [
                        [
                            "getattr(sample_list, 'targets', None)",
                            "Call"
                        ],
                        [
                            "getattr(sample_list, 'answers', None)",
                            "Call"
                        ],
                        [
                            "torch.tensor(answers)",
                            "Call"
                        ],
                        [
                            "answers.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_689": {
                "variable": {
                    "value": "is_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "is_correct",
                    "type": "Call",
                    "possible_values": [
                        [
                            "getattr(sample_list, 'is_correct', None)",
                            "Call"
                        ],
                        [
                            "is_correct.to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(is_correct).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hid_dim * 2",
                            "BinOp"
                        ],
                        [
                            "hid_dim",
                            "Name"
                        ],
                        [
                            "hid_dim * 2",
                            "BinOp"
                        ],
                        [
                            "hid_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_129": {
                "normalized_shape": {
                    "value": "hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.visual_loss_config[key][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_676": {
                "data": {
                    "value": "cls_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "getattr(image_info, 'cls_prob', None)",
                            "Call"
                        ],
                        [
                            "torch.tensor(cls_prob)[:, :max_features.item(), None].to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/models/m4c.py": {
        "torch": {
            "arange_541": {
                "variable": {
                    "value": "arange",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_541": {
                "variable": {
                    "value": "arange",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_550": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_inds.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_inds.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_568": {
                "variable": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inds_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_offsets + inds",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "x_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(batch_size * length, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.linear_obj_feat_to_mmt_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.obj.mmt_in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.linear_obj_bbox_to_mmt_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_107": {
                "variable": {
                    "value": "self.obj_feat_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_108": {
                "variable": {
                    "value": "self.obj_bbox_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_109": {
                "variable": {
                    "value": "self.obj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.config.obj.dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.linear_ocr_feat_to_mmt_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.ocr.mmt_in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.linear_ocr_bbox_to_mmt_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_137": {
                "variable": {
                    "value": "self.ocr_feat_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_138": {
                "variable": {
                    "value": "self.ocr_bbox_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_139": {
                "variable": {
                    "value": "self.ocr_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.config.ocr.dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_192": {
                "variable": {
                    "value": "obj_fc7",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_fc7",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.obj_faster_rcnn_fc7(obj_fc6)",
                            "Call"
                        ],
                        [
                            "F.normalize(obj_fc7, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_209": {
                "variable": {
                    "value": "ocr_fasttext",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ocr_fasttext",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_list.context_feature_0",
                            "Attribute"
                        ],
                        [
                            "F.normalize(ocr_fasttext, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(ocr_fasttext)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_214": {
                "variable": {
                    "value": "ocr_phoc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ocr_phoc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_list.context_feature_1",
                            "Attribute"
                        ],
                        [
                            "F.normalize(ocr_phoc, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(ocr_phoc)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_220": {
                "variable": {
                    "value": "ocr_fc7",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ocr_fc7",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ocr_faster_rcnn_fc7(ocr_fc6)",
                            "Call"
                        ],
                        [
                            "F.normalize(ocr_fc7, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(ocr_fc7)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_224": {
                "variable": {
                    "value": "ocr_order_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_list.order_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "ocr_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ocr_fasttext, ocr_phoc, ocr_fc7, ocr_order_vectors]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fixed_scores, dynamic_ocr_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_398": {
                "variable": {
                    "value": "dec_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dec_emb.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "dec_emb.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "dec_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_401": {
                "variable": {
                    "value": "encoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[txt_emb, obj_emb, ocr_emb, dec_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[txt_mask, obj_mask, ocr_mask, dec_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_464": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "query_key_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_465": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "query_key_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_480": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query(query_inputs)",
                            "Call"
                        ],
                        [
                            "query_layer.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_498": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "MAX_DEC_LENGTH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Embedding_499": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "MAX_TYPE_NUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "LayerNorm_501": {
                "variable": {
                    "value": "self.ans_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "ln_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.layer_norm_eps",
                            "Attribute"
                        ]
                    ]
                }
            },
            "LayerNorm_502": {
                "variable": {
                    "value": "self.ocr_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "ln_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.layer_norm_eps",
                            "Attribute"
                        ]
                    ]
                }
            },
            "LayerNorm_503": {
                "variable": {
                    "value": "self.emb_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "ln_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.layer_norm_eps",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_504": {
                "variable": {
                    "value": "self.emb_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_520": {
                "variable": {
                    "value": "ans_ocr_emb_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ans_emb, ocr_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_524": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_inds.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ocr_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.text_bert_out_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "TEXT_BERT_HIDDEN_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_89": {
                "variable": {
                    "value": "self.text_bert_out_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_227": {
                "variable": {
                    "value": "ocr_fasttext",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ocr_fasttext",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_list.context_feature_0",
                            "Attribute"
                        ],
                        [
                            "F.normalize(ocr_fasttext, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(ocr_fasttext)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_229": {
                "variable": {
                    "value": "ocr_phoc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ocr_phoc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_list.context_feature_1",
                            "Attribute"
                        ],
                        [
                            "F.normalize(ocr_phoc, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(ocr_phoc)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_231": {
                "variable": {
                    "value": "ocr_fc7",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ocr_fc7",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ocr_faster_rcnn_fc7(ocr_fc6)",
                            "Call"
                        ],
                        [
                            "F.normalize(ocr_fc7, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(ocr_fc7)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_237": {
                "variable": {
                    "value": "ocr_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ocr_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([ocr_fasttext, ocr_phoc, ocr_fc7, ocr_order_vectors], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(ocr_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_239": {
                "variable": {
                    "value": "ocr_bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ocr_bbox",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_list.ocr_bbox_coordinates",
                            "Attribute"
                        ],
                        [
                            "torch.zeros_like(ocr_bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_287": {
                "variable": {
                    "value": "fwd_results[prev_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_list.train_prev_inds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_564": {
                "start": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nums.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "prev_inds.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "inds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/models/mmbt.py": {
        "torch": {
            "Linear_65": {
                "variable": {
                    "value": "self.proj_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.modal_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_70": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "embedding_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[modal_embeddings, txt_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_342": {
                "variable": {
                    "value": "modal_end_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_list['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "gather_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_list['input_mask'].sum(1, keepdim=True) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_342": {
                "variable": {
                    "value": "modal_end_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clone_342": {
                "variable": {
                    "value": "modal_end_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_351": {
                "variable": {
                    "value": "sample_list[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_list['input_ids'][:, 1:], sample_list['input_ids'][:, -1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "sample_list[input_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_list['input_mask'][:, 1:], torch.zeros([batch_size, 1], dtype=torch.long, device=device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_453": {
                "variable": {
                    "value": "self.loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_524": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.encoder_config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_525": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BertPredictionHeadTransform(self.encoder_config)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_token_embeds.unsqueeze(1), token_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_embeddings, end_token_embeds.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_98": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "token_embeddings.size(1)",
                            "Call"
                        ],
                        [
                            "seq_length + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_modal.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input_modal.size(0), seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_modal.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_205": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_txt_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "sample_list['input_ids'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_221": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embedding_output.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "sample_list['input_ids'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_223": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(input_modal_shape, device=device, dtype=torch.long), attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_232": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embedding_output.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "sample_list['input_ids'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_234": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(input_modal_shape, device=device), encoder_attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_405": {
                "variable": {
                    "value": "modal_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_modal.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "token_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "max_segment",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_modal.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_253": {
                "variable": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "token_embeddings.size(1)",
                            "Call"
                        ],
                        [
                            "seq_length + 1",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "sample_list['input_ids'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_527": {
                "in_features": {
                    "value": "self.encoder_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_358": {
                "*size": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "sample_list['input_ids'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_225": {
                "*size": {
                    "value": "input_modal_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "modal_embeddings.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "sample_list['input_ids'].device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_235": {
                "*size": {
                    "value": "input_modal_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "modal_embeddings.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "sample_list['input_ids'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_396": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "max_id.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_403": {
                "data": {
                    "value": "max_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_max_segment - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "max_id.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/models/mmf_bert.py": {
        "torch": {
            "MultiheadAttention_80": {
                "variable": {
                    "value": "self.text_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "feature_embedding_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_embeddings",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(feature_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.bert_config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BertPredictionHeadTransform(self.bert_config)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "first_module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "second_module.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiheadAttention_111": {
                "variable": {
                    "value": "self.image_feature_intra_attention",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "feature_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "feature_embeddings",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(feature_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_like_295": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_list.input_ids",
                            "Attribute"
                        ],
                        [
                            "transform_to_batch_sequence(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_297": {
                "variable": {
                    "value": "input_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_list.input_ids",
                            "Attribute"
                        ],
                        [
                            "transform_to_batch_sequence(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_62": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.bert_config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BertPredictionHeadTransform(self.bert_config)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiheadAttention_120": {
                "variable": {
                    "value": "feature_embedding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_136": {
                "modules": {
                    "value": "feature_embeddings_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_352": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_384": {
                "variable": {
                    "value": "pooled_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.combine_embeddings(['image', 'text'], [image_embedding_total, text_embedding_total])",
                            "Call"
                        ],
                        [
                            "image_embedding_total",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "index_to_gather.unsqueeze(-1).unsqueeze(-1).expand(index_to_gather.size(0), 1, joint_embedding.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "self.bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.answer_space_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.bert_config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BertPredictionHeadTransform(self.bert_config)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "self.bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.answer_space_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "self.bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/models/mmf_transformer.py": {
        "torch": {
            "ModuleDict_39": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(transformer_config.hidden_dropout_prob)",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_112": {
                "variable": {
                    "value": "position_ids[modality]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "input_ids[modality].size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids[modality].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_112": {
                "variable": {
                    "value": "position_ids[modality]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "p": {
                    "value": "transformer_config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "transformer_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "segment_ids[modality]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids[modality].size()[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids[modality].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_152": {
                "variable": {
                    "value": "masks[modality]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids[modality].size()[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids[modality].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/models/movie_mcan.py": {
        "torch": {
            "zeros_224": {
                "variable": {
                    "value": "padded_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, c, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "encoded_feature.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/models/pythia.py": {
        "torch": {
            "cat_206": {
                "variable": {
                    "value": "text_embeddding_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "text_embeddings",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "feature_embedding_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_embeddings",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(feature_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "args[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(feature_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_500": {
                "variable": {
                    "value": "feature_embedding_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_embeddings",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(feature_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "args[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(feature_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "feature_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "feature_embeddings",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(feature_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "args[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(feature_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_417": {
                "variable": {
                    "value": "feature_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "feature_embeddings",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(feature_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "args[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(feature_embeddings)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_71": {
                "modules": {
                    "value": "text_embeddings",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_92": {
                "modules": {
                    "value": "feat_encoders",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_125": {
                "modules": {
                    "value": "feature_embeddings_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_396": {
                "modules": {
                    "value": "feature_projectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_427": {
                "modules": {
                    "value": "feature_embeddings_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/models/top_down_bottom_up.py": {
        "torch": {
            "cat_40": {
                "variable": {
                    "value": "text_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "text_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "image_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_55": {
                "variable": {
                    "value": "image_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention * image_feat_variable",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_45": {
                "variable": {
                    "value": "ques_embedding_each",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_embedding[idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "variable": {
                    "value": "image_feat_each",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_50": {
                "variable": {
                    "value": "image_embedding_each",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_each * image_feat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/models/transformers/backends/huggingface.py": {
        "torch": {
            "ModuleList_38": {
                "variable": {
                    "value": "self.token_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.pos_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.layer_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self.dropouts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_99": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.model_config.modalities)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.transformer_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.pos_embeddings[idx].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "deepcopy(transformer.embeddings.position_embeddings.weight.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "list_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_90": {
                "num_embeddings": {
                    "value": "position_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "modality.get('position_dim', self.transformer_config.max_position_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.transformer_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_93": {
                "normalized_shape": {
                    "value": "self.transformer_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "layer_norm_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "modality.get('layer_norm_eps', self.transformer_config.layer_norm_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_97": {
                "p": {
                    "value": "hidden_dropout_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "modality.get('hidden_dropout_prob', self.transformer_config.hidden_dropout_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_125": {
                "mean": {
                    "value": "self.model_config.token_noise_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "self.model_config.token_noise_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.token_type_embeddings.weight.data[idx].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_71": {
                "num_embeddings": {
                    "value": "self.transformer_config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.transformer_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.transformer_config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "*args": {
                    "value": "nn.Linear(modality.embedding_dim, self.transformer_config.hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "modality.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.transformer_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_83": {
                "normalized_shape": {
                    "value": "self.transformer_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "layer_norm_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "modality.get('layer_norm_eps', self.transformer_config.layer_norm_eps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/models/transformers/base.py": {
        "torch": {}
    },
    "mmf/models/unimodal.py": {
        "torch": {
            "flatten_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.encoder(x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "x[1]",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_98": {
                "variable": {
                    "value": "modal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modal",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "sample_list.image_feature_0",
                            "Attribute"
                        ],
                        [
                            "torch.mean(modal, dim=1)",
                            "Call"
                        ],
                        [
                            "sample_list.image",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/models/vilbert.py": {
        "torch": {
            "Linear_46": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_scores",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(query_layer, key_layer.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "attention_scores / math.sqrt(self.attention_head_size)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(query_layer, key_layer.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "attention_scores / math.sqrt(self.attention_head_size)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.softmax(attention_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(attention_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_164": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.v_attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_207": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_214": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_scores",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(query_layer, key_layer.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "attention_scores / math.sqrt(self.attention_head_size)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(query_layer, key_layer.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "attention_scores / math.sqrt(self.attention_head_size)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_220": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.softmax(attention_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(attention_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_241": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_242": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.v_hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_274": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.v_intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_289": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.v_intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_290": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_291": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.v_hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_353": {
                "variable": {
                    "value": "self.query1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_354": {
                "variable": {
                    "value": "self.key1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_355": {
                "variable": {
                    "value": "self.value1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_358": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.v_attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_360": {
                "variable": {
                    "value": "self.query2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_361": {
                "variable": {
                    "value": "self.key2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_362": {
                "variable": {
                    "value": "self.value2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_365": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_409": {
                "variable": {
                    "value": "attention_scores1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer1.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_416": {
                "variable": {
                    "value": "attention_probs1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_scores1",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(query_layer2, key_layer1.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "attention_scores1 / math.sqrt(self.attention_head_size)",
                            "BinOp"
                        ],
                        [
                            "attention_scores1 + attention_mask1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_422": {
                "variable": {
                    "value": "context_layer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.softmax(attention_scores1, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout1(attention_probs1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_429": {
                "variable": {
                    "value": "attention_scores2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer2.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_440": {
                "variable": {
                    "value": "attention_probs2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_scores2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(query_layer1, key_layer2.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "attention_scores2 / math.sqrt(self.attention_head_size)",
                            "BinOp"
                        ],
                        [
                            "attention_scores2 + attention_mask2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_446": {
                "variable": {
                    "value": "context_layer2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.softmax(attention_scores2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout2(attention_probs2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_470": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.bi_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_471": {
                "variable": {
                    "value": "self.LayerNorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_472": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.v_hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_474": {
                "variable": {
                    "value": "self.q_dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.bi_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_475": {
                "variable": {
                    "value": "self.q_dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.v_hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_477": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.bi_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_478": {
                "variable": {
                    "value": "self.LayerNorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_479": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_481": {
                "variable": {
                    "value": "self.q_dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.bi_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_482": {
                "variable": {
                    "value": "self.q_dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_570": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_573": {
                "variable": {
                    "value": "self.v_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[deepcopy(v_layer) for _ in range(config.v_num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_576": {
                "variable": {
                    "value": "self.c_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[deepcopy(connect_layer) for _ in range(len(config.v_biattention_id))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_794": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.bi_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_795": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_809": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.bi_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_810": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_824": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_829": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_845": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.v_target_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_857": {
                "variable": {
                    "value": "self.bi_seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.bi_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_860": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_891": {
                "variable": {
                    "value": "self.image_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.v_feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_892": {
                "variable": {
                    "value": "self.image_location_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_893": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.v_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_894": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1063": {
                "variable": {
                    "value": "self.loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_1251": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_1259": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BertPredictionHeadTransform(classifier_config)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.dyLinear_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_162": {
                "variable": {
                    "value": "self.dyLinear_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_951": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_txt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_953": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_txt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_955": {
                "variable": {
                    "value": "image_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "image_feature.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "image_feature.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_966": {
                "variable": {
                    "value": "mask_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_txt.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "input_txt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_967": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask_tokens, attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_999": {
                "variable": {
                    "value": "co_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_txt.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "image_feature.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_txt.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KLDivLoss_1066": {
                "variable": {
                    "value": "self.vis_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_1364": {
                "variable": {
                    "value": "bert_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bert_input_ids, bert_input_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1365": {
                "variable": {
                    "value": "bert_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bert_input_mask, bert_input_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1366": {
                "variable": {
                    "value": "bert_input_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bert_input_type_ids, bert_input_type_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1381": {
                "variable": {
                    "value": "image_feature_variable",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_feature_variable_0, image_feature_variable_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1384": {
                "variable": {
                    "value": "image_location_variable",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_location_variable_0, image_location_variable_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1387": {
                "variable": {
                    "value": "image_dim_variable",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_dim_variable_0, image_dim_variable_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1399": {
                "variable": {
                    "value": "image_target_variable",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(cls_prob, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "bert_input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1427": {
                "variable": {
                    "value": "image_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "params['image_feature'].size(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "params['image_feature'].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_1068": {
                "variable": {
                    "value": "self.vis_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_1261": {
                "in_features": {
                    "value": "classifier_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_195": {
                "input": {
                    "value": "self.dyLinear_q(pool_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_196": {
                "input": {
                    "value": "self.dyLinear_k(pool_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1070": {
                "variable": {
                    "value": "self.vis_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_1134": {
                "input": {
                    "value": "img_loss * torch.eq(image_label, 1).unsqueeze(2).float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_1158": {
                "variable": {
                    "value": "row_across_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_regions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1165": {
                "variable": {
                    "value": "col_across_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_regions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1178": {
                "variable": {
                    "value": "row_inside_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_regions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1185": {
                "variable": {
                    "value": "col_inside_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_regions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1201": {
                "variable": {
                    "value": "final_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(final_across_index, final_inside_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_1211": {
                "variable": {
                    "value": "sample_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(positive_v.unsqueeze(1), negative_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_1214": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((positive_v.unsqueeze(1), negative_v), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "predict_v.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_1214": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_1137": {
                "input": {
                    "value": "torch.eq(image_label, 1).unsqueeze(2).expand_as(img_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_1144": {
                "input": {
                    "value": "prediction_scores_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.imagePredictions(sequence_output_v)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_1147": {
                "input": {
                    "value": "img_loss * torch.eq(image_label, 1).unsqueeze(2).float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eq_1135": {
                "input": {
                    "value": "image_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_1135": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_1138": {
                "input": {
                    "value": "image_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_1138": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_1149": {
                "input": {
                    "value": "torch.eq(image_label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1217": {
                "*size": {
                    "value": "score.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eq_1148": {
                "input": {
                    "value": "image_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_1148": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_1149": {
                "input": {
                    "value": "image_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/models/visual_bert.py": {
        "torch": {
            "CrossEntropyLoss_205": {
                "variable": {
                    "value": "self.loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_314": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.bert.config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_317": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BertPredictionHeadTransform(self.bert.config)",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_431": {
                "variable": {
                    "value": "sample_list[visual_embeddings_type]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_list['image_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_434": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sample_list['input_mask'], sample_list['image_mask'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_532": {
                "variable": {
                    "value": "image_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "visual_embeddings.size(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "visual_embeddings.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_74": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "new_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sequence_output, visual_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "pooled_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pooled_output[:b // 2], pooled_output[b // 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_376": {
                "variable": {
                    "value": "pooled_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence_output",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "encoded_layers[0]",
                            "Subscript"
                        ],
                        [
                            "encoded_layers[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "index_to_gather.unsqueeze(-1).unsqueeze(-1).expand(index_to_gather.size(0), 1, sequence_output.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_319": {
                "in_features": {
                    "value": "self.bert.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_476": {
                "variable": {
                    "value": "bert_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bert_input_ids, bert_input_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_477": {
                "variable": {
                    "value": "bert_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bert_input_mask, bert_input_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_478": {
                "variable": {
                    "value": "bert_input_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bert_input_type_ids, bert_input_type_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_487": {
                "variable": {
                    "value": "image_feat_variable",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_feat_variable_0, image_feat_variable_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_495": {
                "variable": {
                    "value": "image_dim_variable",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_dim_variable_0, image_dim_variable_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_443": {
                "input": {
                    "value": "attention_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones_like(input_ids)",
                            "Call"
                        ],
                        [
                            "torch.cat((sample_list['input_mask'], sample_list['image_mask']), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/modules/attention.py": {
        "torch": {
            "Linear_46": {
                "variable": {
                    "value": "self.lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "question_embedding_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "concat_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_feat, question_embedding_expand)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_attention",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.lc(self.fa(concat_feature))",
                            "Call"
                        ],
                        [
                            "self.lc(joint_feature)",
                            "Call"
                        ],
                        [
                            "self.compute_raw_att(image_feat, question_embedding)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "question_fa_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_fa",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fa_txt(question_embedding)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_attention",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.lc(self.fa(concat_feature))",
                            "Call"
                        ],
                        [
                            "self.lc(joint_feature)",
                            "Call"
                        ],
                        [
                            "self.compute_raw_att(image_feat, question_embedding)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_attn_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "att1 + att2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_127": {
                "variable": {
                    "value": "tmp1[:num_loc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "attention.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_127": {
                "variable": {
                    "value": "tmp1[:num_loc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ge_134": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "attention.new_zeros(num_loc)",
                            "Call"
                        ],
                        [
                            "tmp1.expand(batch_size, num_loc)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tmp2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "image_locs.type(tmp1.type())",
                            "Call"
                        ],
                        [
                            "tmp2.unsqueeze(dim=1).expand(batch_size, num_loc)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_176": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(dim, dim) for _ in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_177": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_192": {
                "variable": {
                    "value": "p_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "variable": {
                    "value": "self.fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, 4 * dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_223": {
                "variable": {
                    "value": "self.drop_mha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_224": {
                "variable": {
                    "value": "self.ln_mha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_225": {
                "variable": {
                    "value": "self.drop_fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_226": {
                "variable": {
                    "value": "self.ln_fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_238": {
                "variable": {
                    "value": "self.multi_head_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MovieMcanMultiHeadAttention(dim, num_attn, dropout=0.1) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_241": {
                "variable": {
                    "value": "self.fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, 4 * dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_247": {
                "variable": {
                    "value": "self.drop_mha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Dropout(p=dropout) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_248": {
                "variable": {
                    "value": "self.ln_mha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LayerNorm(dim) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_249": {
                "variable": {
                    "value": "self.drop_fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_250": {
                "variable": {
                    "value": "self.ln_fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_146": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transform(joint_feature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_149": {
                "variable": {
                    "value": "masked_attention_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._mask_attentions(attention, image_locs)",
                            "Call"
                        ],
                        [
                            "masked_attention / masked_attention_sum",
                            "BinOp"
                        ],
                        [
                            "attention",
                            "Name"
                        ],
                        [
                            "attention",
                            "Name"
                        ],
                        [
                            "self._mask_attentions(attention, image_locs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_156": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transform(joint_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_188": {
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_196": {
                "input": {
                    "value": "p_attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(p_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_218": {
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_219": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_220": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_221": {
                "in_features": {
                    "value": "4 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_242": {
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_243": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_244": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_245": {
                "in_features": {
                    "value": "4 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_247": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_248": {
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/modules/bottleneck.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.se",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ChannelPool()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_cond_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_35": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim // sqrate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "dim // sqrate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/modules/decoders.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.emb_out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_49": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer_options * encoder_output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_58": {
                "variable": {
                    "value": "self.language_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "in_dim + kwargs['hidden_dim']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "kwargs['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_61": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(kwargs['hidden_dim'], out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "kwargs['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "[weighted_attn, h1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/modules/embeddings.py": {
        "torch": {
            "LSTM_140": {
                "variable": {
                    "value": "self.recurrent_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['embedding_dim']",
                            "Subscript"
                        ],
                        [
                            "self.out_dim",
                            "Attribute"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_dim // 2 if bidirectional else hidden_dim",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "kwargs['num_layers']",
                            "Subscript"
                        ],
                        [
                            "kwargs['num_layers']",
                            "Subscript"
                        ],
                        [
                            "kwargs['cbn_num_layers']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.get('bidirectional', False)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_148": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kwargs.get('dropout', 0.1)",
                            "Call"
                        ],
                        [
                            "kwargs.get('dropout', 0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_155": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kwargs.get('hidden_dim', 512)",
                            "Call"
                        ],
                        [
                            "kwargs.get('hidden_dim', 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv1_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['conv1_out']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['kernel_size']",
                            "Subscript"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['padding']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv1d_162": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv1_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['conv1_out']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv2_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['conv2_out']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['kernel_size']",
                            "Subscript"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['padding']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_169": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_185": {
                "variable": {
                    "value": "qtt_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qatt_conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv2(qatt_relu)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_187": {
                "variable": {
                    "value": "qtt_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qtt_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.functional.softmax(qatt_conv2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "lstm_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dropout(lstm_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_255": {
                "variable": {
                    "value": "tmp_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_reshape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "image_feat_variable",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([image_feat_variable, order_vectors], dim=-1)",
                            "Call"
                        ],
                        [
                            "image_feat_variable.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiheadAttention_267": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "question_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kdim": {
                    "value": "img_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "vdim": {
                    "value": "img_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bias.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_301": {
                "variable": {
                    "value": "i3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lc(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_308": {
                "variable": {
                    "value": "self.token_type_embeddings_visual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_311": {
                "variable": {
                    "value": "self.position_embeddings_visual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_315": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.visual_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_318": {
                "variable": {
                    "value": "self.token_type_embeddings_visual.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "deepcopy(self.token_type_embeddings.weight.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_321": {
                "variable": {
                    "value": "self.position_embeddings_visual.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "deepcopy(self.position_embeddings.weight.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_329": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_472": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['embedding_dim']",
                            "Subscript"
                        ],
                        [
                            "self.out_dim",
                            "Attribute"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kwargs.get('hidden_dim', 512)",
                            "Call"
                        ],
                        [
                            "kwargs.get('hidden_dim', 512)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_478": {
                "variable": {
                    "value": "self.self_attns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SelfAttention(hidden_dim, num_attn, dropout) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_514": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['embedding_dim']",
                            "Subscript"
                        ],
                        [
                            "self.out_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kwargs.get('hidden_dim', 512)",
                            "Call"
                        ],
                        [
                            "kwargs.get('hidden_dim', 512)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_515": {
                "variable": {
                    "value": "self.self_guided_attns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SelfGuidedAttention(hidden_dim, num_attn, dropout) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_554": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_582": {
                "variable": {
                    "value": "self.cbns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cbns",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "(forward_, backward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_125": {
                "tensors": {
                    "value": "embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "words_embeddings + position_embeddings + token_type_embeddings",
                            "BinOp"
                        ],
                        [
                            "torch.cat((text_embeddings, v_embeddings), dim=1)",
                            "Call"
                        ],
                        [
                            "text_embeddings",
                            "Name"
                        ],
                        [
                            "self.LayerNorm(embeddings)",
                            "Call"
                        ],
                        [
                            "self.dropout(embeddings)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bias.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_252": {
                "variable": {
                    "value": "image_feat_variable",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_feat_variable, order_vectors]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_334": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_392": {
                "variable": {
                    "value": "image_text_alignment_mask[image_text_alignment_mask == 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_399": {
                "variable": {
                    "value": "position_ids_visual",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "visual_embeddings.size()[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "visual_embeddings.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_410": {
                "variable": {
                    "value": "position_ids_visual",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "visual_embeddings.size()[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "visual_embeddings.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(text_embeddings, v_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_206": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_295": {
                "ndarray": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_296": {
                "ndarray": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(b)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_558": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['embedding_dim']",
                            "Subscript"
                        ],
                        [
                            "self.out_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_595": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(b, c, -1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self_guided_attn(x, y, x_mask, y_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(nn.functional.adaptive_avg_pool2d(x, (1, 1)).squeeze(3).squeeze(2))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_595": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_204": {
                "in_channels": {
                    "value": "last_out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "conv['out_channels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Embedding_48": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['vocab_size']",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['embedding_dim']",
                            "Subscript"
                        ],
                        [
                            "self.out_dim",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/modules/encoders.py": {
        "torch": {
            "Linear_131": {
                "variable": {
                    "value": "self.lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bias.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_164": {
                "variable": {
                    "value": "i3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lc(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Identity_177": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_241": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_266": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.pool(self.model(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, start_dim=2)",
                            "Call"
                        ],
                        [
                            "out.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_207": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_249": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_328": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "ndarray": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_133": {
                "ndarray": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(b)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_365": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "self.module(x)",
                            "Call"
                        ],
                        [
                            "x.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.prod(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_417": {
                "variable": {
                    "value": "new_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_segments",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.original_config.num_segments",
                            "Attribute"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "prod_367": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "self.module(x)",
                            "Call"
                        ],
                        [
                            "x.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.prod(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/modules/fusions.py": {
        "torch": {
            "Parameter_42": {
                "variable": {
                    "value": "self.sketch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.generate_sketch_matrix(torch.randint(output_dim, size=(input_dim1,)), 2 * torch.randint(2, size=(input_dim1,)) - 1, input_dim1, output_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.sketch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.generate_sketch_matrix(torch.randint(output_dim, size=(input_dim2,)), 2 * torch.randint(2, size=(input_dim2,)) - 1, input_dim2, output_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_82": {
                "variable": {
                    "value": "fft_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fft1[..., 0] * fft2[..., 0] - fft1[..., 1] * fft2[..., 1], fft1[..., 0] * fft2[..., 1] + fft1[..., 1] * fft2[..., 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_105": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_dim, dimensions[0])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_162": {
                "variable": {
                    "value": "self.merge_linears0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "merge_linears0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_163": {
                "variable": {
                    "value": "self.merge_linears1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "merge_linears1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_238": {
                "variable": {
                    "value": "self.bilinears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "bilinears",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mm_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_298": {
                "variable": {
                    "value": "self.merge_linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mm_dim * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_320": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "m0(x0_c) * m1(x1_c)",
                            "BinOp"
                        ],
                        [
                            "m.view(bsize, self.rank, -1)",
                            "Call"
                        ],
                        [
                            "m0 * m1",
                            "BinOp"
                        ],
                        [
                            "m.view(-1, self.rank, self.mm_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_358": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_363": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bilinear_364": {
                "variable": {
                    "value": "self.bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "in2_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_365": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_417": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_418": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_419": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_480": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_481": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_482": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_546": {
                "variable": {
                    "value": "self.linear0_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_547": {
                "variable": {
                    "value": "self.linear1_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_548": {
                "variable": {
                    "value": "self.linear0_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_549": {
                "variable": {
                    "value": "self.linear1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_550": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_605": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_0, z_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "cat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z_0.dim() - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_634": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_672": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_673": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_674": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_731": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "F.__dict__[self.activation](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "x[0].dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rfft_73": {
                "variable": {
                    "value": "fft1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1.permute(0, 2, 3, 1).matmul(self.sketch1)",
                    "type": "Call",
                    "possible_values": []
                },
                "signal_ndim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rfft_76": {
                "variable": {
                    "value": "fft2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2.permute(0, 2, 3, 1).matmul(self.sketch2)",
                    "type": "Call",
                    "possible_values": []
                },
                "signal_ndim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rfft_80": {
                "variable": {
                    "value": "fft1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1.matmul(self.sketch1)",
                    "type": "Call",
                    "possible_values": []
                },
                "signal_ndim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rfft_81": {
                "variable": {
                    "value": "fft2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2.matmul(self.sketch2)",
                    "type": "Call",
                    "possible_values": []
                },
                "signal_ndim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "ml0",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_172": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_173": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_184": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "m0(x0_c) * m1(x1_c)",
                            "BinOp"
                        ],
                        [
                            "m.view(bsize, self.rank, -1)",
                            "Call"
                        ],
                        [
                            "m0 * m1",
                            "BinOp"
                        ],
                        [
                            "m.view(-1, self.rank, self.mm_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_192": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_195": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_198": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_246": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_247": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_262": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_265": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_268": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_303": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_304": {
                "variable": {
                    "value": "self.merge_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mm_dim * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_313": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_314": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_323": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_326": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_331": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_362": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_373": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_374": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_380": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_383": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_388": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_431": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_432": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_438": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_441": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_449": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_494": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_495": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_500": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_507": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_515": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_562": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_563": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_568": {
                "variable": {
                    "value": "z_0_skip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_0_skip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z_0_skip, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_577": {
                "variable": {
                    "value": "z_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z_0_skip.view(z_0_skip.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z_0.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z_0)) - torch.sqrt(F.relu(-z_0))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_0, p=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_588": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_589": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_594": {
                "variable": {
                    "value": "z_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x0 * x1 * z_0_skip",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z_1, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "z_1.view(z_1.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z_1.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z_1)) - torch.sqrt(F.relu(-z_1))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_601": {
                "variable": {
                    "value": "z_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x0 * x1 * z_0_skip",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z_1, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "z_1.view(z_1.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z_1.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z_1)) - torch.sqrt(F.relu(-z_1))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_612": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_643": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_686": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_687": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_693": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_696": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_704": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "irfft_90": {
                "input": {
                    "value": "fft_product",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([fft1[..., 0] * fft2[..., 0] - fft1[..., 1] * fft2[..., 1], fft1[..., 0] * fft2[..., 1] + fft1[..., 1] * fft2[..., 0]], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "signal_ndim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "signal_sizes": {
                    "value": "(self.output_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "ml1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_187": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_257": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_44": {
                "low": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_dim1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_53": {
                "low": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_dim2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dimensions[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "din",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "F.__dict__[self.activation](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_191": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bilinear_237": {
                "in1_features": {
                    "value": "size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                },
                "in2_features": {
                    "value": "size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sqrt_261": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_322": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_379": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_437": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_506": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_576": {
                "input": {
                    "value": "F.relu(-z_0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_600": {
                "input": {
                    "value": "F.relu(-z_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_692": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_63": {
                "tensors": {
                    "value": "[torch.arange(input_dim, out=torch.LongTensor()), rand_h.long()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_186": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_191": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_256": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_261": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_322": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_379": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_437": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_506": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_576": {
                "input": {
                    "value": "-z_0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_600": {
                "input": {
                    "value": "-z_1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_692": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randint_45": {
                "low": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_dim1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_54": {
                "low": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_dim2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_186": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_256": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_64": {
                "start": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.LongTensor()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/modules/hf_layers.py": {
        "torch": {
            "matmul_149": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_scores",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(query_layer, key_layer.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "attention_scores / math.sqrt(self.attention_head_size)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.softmax(attention_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_273": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayerJit(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_83": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_380": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_382": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_468": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_length + self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_476": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ],
                        [
                            "inputs_embeds.device if inputs_embeds is not None else input_ids.device",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/modules/layers.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_29": {
                "variable": {
                    "value": "self.max_pool2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "pool_stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Name"
                        ],
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.gate_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Name"
                        ],
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_76": {
                "variable": {
                    "value": "y_tilda",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "gated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate_fc(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(config.hidden_dropout_prob)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_164": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.linear_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "text_non_linear_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['text_hidden_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_ans_candidates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.linear_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "image_non_linear_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['img_hidden_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_ans_candidates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "Sequential_225": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.lc_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "img_feat_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.lc_ques",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "txt_emb_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_265": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[0.2, 0.5]",
                            "List"
                        ],
                        [
                            "[0.2, 0.5]",
                            "List"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_283": {
                "variable": {
                    "value": "self.mfb_expand_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_284": {
                "variable": {
                    "value": "self.mfb_sqz_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_285": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "cat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(feature_list[0].size()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_344": {
                "variable": {
                    "value": "iatt_iq_sumpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_feature_reshape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "joint_feature.view(batch_size, num_loc, int(dim / self.pool_size), self.pool_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_351": {
                "variable": {
                    "value": "iatt_iq_l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iatt_iq_sqrt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(self.relu(iatt_iq_sumpool)) - torch.sqrt(self.relu(-iatt_iq_sumpool))",
                            "BinOp"
                        ],
                        [
                            "iatt_iq_sqrt.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_373": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "weight_norm_401": {
                "variable": {
                    "value": "self.fa_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(image_feat_dim, kwargs['attention_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_402": {
                "variable": {
                    "value": "self.fa_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(kwargs['hidden_dim'], kwargs['attention_dim'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_405": {
                "variable": {
                    "value": "self.top_down_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_dim + image_feat_dim + kwargs['hidden_dim']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "kwargs['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_410": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_411": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_448": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "weight_norm_491": {
                "variable": {
                    "value": "self.lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(in_features=in_dim, out_features=out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_503": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Name"
                        ],
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_506": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_520": {
                "variable": {
                    "value": "iatt_relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iatt_conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x_reshape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_550": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_596": {
                "input": {
                    "value": "v_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.v_net(v).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.v_net(v)).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.v_net(v)).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.v_net(v).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_635": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_647": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "BCNet(x_dim, y_dim, z_dim, glimpse, dropout=dropout, k=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "h_mat",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_669": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expanded_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, self.glimpse, v_num * q_num)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_683": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_dim, out_dim) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_701": {
                "variable": {
                    "value": "self.linear_cga",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(img_dim, self.out_dim) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_704": {
                "variable": {
                    "value": "self.linear_cbn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(img_dim, self.out_dim) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_707": {
                "variable": {
                    "value": "self.linear_ques",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(ques_dim, self.out_dim) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_710": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LayerNorm(self.out_dim) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_737": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_features, num_features // 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_756": {
                "variable": {
                    "value": "self.p_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.linear(query).transpose(-2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.batch_norm_2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_272": {
                "variable": {
                    "value": "ques1_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ques1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lc_ques(question_embed)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_328": {
                "variable": {
                    "value": "joint_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "image1 * ques1_expand",
                            "BinOp"
                        ],
                        [
                            "self.dropout(joint_feature)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(joint_feature, dim=1)",
                            "Call"
                        ],
                        [
                            "image_fa * question_fa_expand",
                            "BinOp"
                        ],
                        [
                            "torch.cat([joint_feature, context_text_joint_feaure], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(joint_feature)",
                            "Call"
                        ],
                        [
                            "self.relu(image_fa + hidden_fa.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "self.dropout(joint_feature)",
                            "Call"
                        ],
                        [
                            "image_fa * question_fa_expand",
                            "BinOp"
                        ],
                        [
                            "self.dropout(joint_feature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_355": {
                "variable": {
                    "value": "iatt_iq_l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iatt_iq_l2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.normalize(iatt_iq_sqrt)",
                            "Call"
                        ],
                        [
                            "iatt_iq_l2.view(batch_size, num_loc, int(dim / self.pool_size))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(iatt_iq_l2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "joint_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[joint_feature, context_text_joint_feaure]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_458": {
                "variable": {
                    "value": "question_fa_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_fa",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fa_txt(question_embedding)",
                            "Call"
                        ],
                        [
                            "self.fa_txt2(self.fa_txt1(question_embedding))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_514": {
                "variable": {
                    "value": "x_reshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_524": {
                "variable": {
                    "value": "iatt_conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iatt_conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv2(iatt_relu)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_524": {
                "variable": {
                    "value": "iatt_conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool1d_553": {
                "variable": {
                    "value": "self.p_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_570": {
                "variable": {
                    "value": "d_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.v_net(v).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.v_net(v)).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.v_net(v)).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.v_net(v).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "q_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.q_net(q).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.q_net(q)",
                            "Call"
                        ],
                        [
                            "self.q_net(q).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.q_net(q).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_758": {
                "input": {
                    "value": "self.p_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "leaky_relu_36": {
                "input": {
                    "value": "self.conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_91": {
                "module": {
                    "value": "nn.Linear(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_139": {
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Name"
                        ],
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_177": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Name"
                        ],
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "weight_norm_220": {
                "module": {
                    "value": "nn.Linear(in_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_222": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[0.2, 0.5]",
                            "List"
                        ],
                        [
                            "[0.2, 0.5]",
                            "List"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_223": {
                "module": {
                    "value": "nn.Linear(hidden_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_346": {
                "input": {
                    "value": "self.relu(-iatt_iq_sumpool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_401": {
                "in_features": {
                    "value": "image_feat_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "kwargs['attention_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_403": {
                "in_features": {
                    "value": "kwargs['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "kwargs['attention_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_423": {
                "tensors": {
                    "value": "[h2, image_feat_mean, embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_492": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Name"
                        ],
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_517": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.max_pool2d(nn.functional.leaky_relu(self.conv(x)))",
                            "Call"
                        ],
                        [
                            "self.batch_norm_2d(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_526": {
                "input": {
                    "value": "iatt_conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv2(iatt_relu)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_559": {
                "variable": {
                    "value": "self.h_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, h_out, 1, h_dim * self.k).normal_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_562": {
                "variable": {
                    "value": "self.h_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, h_out, 1, 1).normal_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_564": {
                "variable": {
                    "value": "self.h_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(h_dim * self.k, h_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_580": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v_ * self.h_mat",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "q_.unsqueeze(1).transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_589": {
                "variable": {
                    "value": "d_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.v_net(v).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.v_net(v)).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.v_net(v)).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.v_net(v).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "q_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.q_net(q).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.q_net(q)",
                            "Call"
                        ],
                        [
                            "self.q_net(q).transpose(1, 2).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.q_net(q).transpose(1, 2).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_630": {
                "module": {
                    "value": "nn.Linear(dims[-2], dims[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_688": {
                "tensors": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.linears[i](joint_embedding[:, i]) for i in range(3)]",
                            "ListComp"
                        ],
                        [
                            "[self.layer_norm[0](self.linear_ques[0](q) + self.linear_cbn[0](v_cbn) + self.linear_cga[0](v_cga)), self.layer_norm[1](self.linear_cbn[1](v_cbn)), self.layer_norm[2](self.linear_ques[1](q) + self.linear_cga[1](v_cga))]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_726": {
                "tensors": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.linears[i](joint_embedding[:, i]) for i in range(3)]",
                            "ListComp"
                        ],
                        [
                            "[self.layer_norm[0](self.linear_ques[0](q) + self.linear_cbn[0](v_cbn) + self.linear_cga[0](v_cga)), self.layer_norm[1](self.linear_cbn[1](v_cbn)), self.layer_norm[2](self.linear_ques[1](q) + self.linear_cga[1](v_cga))]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_738": {
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_739": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_740": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[0.2, 0.5]",
                            "List"
                        ],
                        [
                            "[0.2, 0.5]",
                            "List"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_741": {
                "in_features": {
                    "value": "num_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_attn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Name"
                        ],
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_170": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Name"
                        ],
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_174": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[0.2, 0.5]",
                            "List"
                        ],
                        [
                            "[0.2, 0.5]",
                            "List"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_200": {
                "ndarray": {
                    "value": "kwargs['pretrained_text']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_205": {
                "ndarray": {
                    "value": "kwargs['pretrained_image']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Name"
                        ],
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_223": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "weight_norm_622": {
                "module": {
                    "value": "nn.Linear(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_628": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[0.2, 0.5]",
                            "List"
                        ],
                        [
                            "[0.2, 0.5]",
                            "List"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_630": {
                "in_features": {
                    "value": "dims[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_683": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Name"
                        ],
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_702": {
                "in_features": {
                    "value": "img_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_705": {
                "in_features": {
                    "value": "img_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_708": {
                "in_features": {
                    "value": "ques_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_710": {
                "normalized_shape": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_172": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_dim",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_564": {
                "in_features": {
                    "value": "h_dim * self.k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_620": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[0.2, 0.5]",
                            "List"
                        ],
                        [
                            "[0.2, 0.5]",
                            "List"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_622": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Name"
                        ],
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Name"
                        ],
                        [
                            "dims[i]",
                            "Subscript"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/modules/losses.py": {
        "torch": {
            "eq_351": {
                "variable": {
                    "value": "y_is_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_353": {
                "variable": {
                    "value": "log_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_216": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(scores, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(targets, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_279": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(scores, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(targets, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_318": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(scores, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(targets, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nll_loss_345": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(scores, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_357": {
                "input": {
                    "value": "res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y * (log_y - log_x)",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_462": {
                "variable": {
                    "value": "tar_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_score",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_463": {
                "variable": {
                    "value": "tar_sum_is_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tar_sum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_467": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_score",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_483": {
                "variable": {
                    "value": "tar_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_score",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_484": {
                "variable": {
                    "value": "tar_sum_is_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tar_sum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_488": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_score",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_503": {
                "variable": {
                    "value": "tar_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_score",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_504": {
                "variable": {
                    "value": "tar_sum_is_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tar_sum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_508": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_score",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_509": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y * (log_y - log_x)",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tar",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "target_score / tar_sum",
                            "BinOp"
                        ],
                        [
                            "target_score / tar_sum",
                            "BinOp"
                        ],
                        [
                            "target_score / tar_sum",
                            "BinOp"
                        ],
                        [
                            "target_score / tar_sum",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_524": {
                "variable": {
                    "value": "tar_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_score",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_525": {
                "variable": {
                    "value": "tar_sum_is_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tar_sum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(target_score, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_529": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_score",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_533": {
                "variable": {
                    "value": "loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_score",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_score",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_547": {
                "variable": {
                    "value": "self.one",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_555": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(scores, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(targets, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_558": {
                "variable": {
                    "value": "count",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(loss_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_569": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_list",
                            "Name"
                        ],
                        [
                            "self.losses",
                            "Attribute"
                        ],
                        [
                            "self.loss_criterion(sample_list, model_output)",
                            "Call"
                        ],
                        [
                            "torch.tensor(loss, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "loss.view(1)",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(scores, targets, reduction='mean')",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(scores[:, 0], targets, reduction='mean') + F.binary_cross_entropy_with_logits(scores[:, 1], targets, reduction='mean') + F.binary_cross_entropy_with_logits(scores[:, 2], targets, reduction='mean')",
                            "BinOp"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(scores, targets, reduction='mean')",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy(scores, targets, reduction='mean')",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(scores, targets)",
                            "Call"
                        ],
                        [
                            "F.nll_loss(scores, idx, reduction='mean')",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss * target_score.size(1)",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(context_attentions[0], attention_supervision.float(), weight=attention_supervision.float())",
                            "Call"
                        ],
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "loss * tar_sum",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss) / loss.size(0)",
                            "BinOp"
                        ],
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss) / loss.size(0)",
                            "BinOp"
                        ],
                        [
                            "F.kl_div(res, tar, reduction='mean')",
                            "Call"
                        ],
                        [
                            "self.weight_softmax * loss1 + loss2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(losses) / count",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_255": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(scores, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(targets, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_315": {
                "variable": {
                    "value": "(scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(scores, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(caption_lengths - 1).tolist()",
                            "Call"
                        ],
                        [
                            "[targets.size(1)] * targets.size(0)",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_316": {
                "variable": {
                    "value": "(targets, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(targets, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(caption_lengths - 1).tolist()",
                            "Call"
                        ],
                        [
                            "[targets.size(1)] * targets.size(0)",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_425": {
                "input": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_470": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_list",
                            "Name"
                        ],
                        [
                            "self.losses",
                            "Attribute"
                        ],
                        [
                            "self.loss_criterion(sample_list, model_output)",
                            "Call"
                        ],
                        [
                            "torch.tensor(loss, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "loss.view(1)",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(scores, targets, reduction='mean')",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(scores[:, 0], targets, reduction='mean') + F.binary_cross_entropy_with_logits(scores[:, 1], targets, reduction='mean') + F.binary_cross_entropy_with_logits(scores[:, 2], targets, reduction='mean')",
                            "BinOp"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(scores, targets, reduction='mean')",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy(scores, targets, reduction='mean')",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(scores, targets)",
                            "Call"
                        ],
                        [
                            "F.nll_loss(scores, idx, reduction='mean')",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss * target_score.size(1)",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(context_attentions[0], attention_supervision.float(), weight=attention_supervision.float())",
                            "Call"
                        ],
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "loss * tar_sum",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss) / loss.size(0)",
                            "BinOp"
                        ],
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss) / loss.size(0)",
                            "BinOp"
                        ],
                        [
                            "F.kl_div(res, tar, reduction='mean')",
                            "Call"
                        ],
                        [
                            "self.weight_softmax * loss1 + loss2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(losses) / count",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_490": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_list",
                            "Name"
                        ],
                        [
                            "self.losses",
                            "Attribute"
                        ],
                        [
                            "self.loss_criterion(sample_list, model_output)",
                            "Call"
                        ],
                        [
                            "torch.tensor(loss, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "loss.view(1)",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(scores, targets, reduction='mean')",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(scores[:, 0], targets, reduction='mean') + F.binary_cross_entropy_with_logits(scores[:, 1], targets, reduction='mean') + F.binary_cross_entropy_with_logits(scores[:, 2], targets, reduction='mean')",
                            "BinOp"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(scores, targets, reduction='mean')",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy(scores, targets, reduction='mean')",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(scores, targets)",
                            "Call"
                        ],
                        [
                            "F.nll_loss(scores, idx, reduction='mean')",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss * target_score.size(1)",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(context_attentions[0], attention_supervision.float(), weight=attention_supervision.float())",
                            "Call"
                        ],
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "loss * tar_sum",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss) / loss.size(0)",
                            "BinOp"
                        ],
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss) / loss.size(0)",
                            "BinOp"
                        ],
                        [
                            "F.kl_div(res, tar, reduction='mean')",
                            "Call"
                        ],
                        [
                            "self.weight_softmax * loss1 + loss2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(losses) / count",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_531": {
                "input": {
                    "value": "loss1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kl_div(res, tar)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss1) / loss1.size(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_558": {
                "input": {
                    "value": "loss_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_list['train_loss_mask']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_559": {
                "input": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy_with_logits(scores, targets, reduction='none')",
                            "Call"
                        ],
                        [
                            "losses * loss_mask.unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_250": {
                "input": {
                    "value": "scores[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(targets, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_310": {
                "input": {
                    "value": "scores",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(scores, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ],
                        [
                            "model_output['scores']",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(caption_lengths - 1).tolist()",
                            "Call"
                        ],
                        [
                            "[targets.size(1)] * targets.size(0)",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_311": {
                "input": {
                    "value": "targets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(targets, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(caption_lengths - 1).tolist()",
                            "Call"
                        ],
                        [
                            "[targets.size(1)] * targets.size(0)",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_244": {
                "input": {
                    "value": "scores[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(targets, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_247": {
                "input": {
                    "value": "scores[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "pack_padded_sequence(targets, decode_lengths, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ],
                        [
                            "sample_list['targets']",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/modules/schedulers.py": {
        "torch": {}
    },
    "mmf/trainers/callbacks/logistics.py": {
        "torch": {
            "max_memory_allocated_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmf/trainers/core/device.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "self.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_51": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_55": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "check_reduction": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "self.config.training.find_unused_parameters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_33": {
                "device": {
                    "value": "self.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_35": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_36": {
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmf/trainers/core/evaluation_loop.py": {
        "torch": {
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_64": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "autocast_65": {
                "enabled": {
                    "value": "self.training_config.fp16",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/trainers/core/reporting.py": {
        "torch": {
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_50": {
                "obj": {
                    "value": "val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "val.mean()",
                            "Call"
                        ],
                        [
                            "val.item()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/trainers/core/training_loop.py": {
        "torch": {
            "set_detect_anomaly_27": {
                "mode": {
                    "value": "self.training_config.detect_anomaly",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_171": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "autocast_175": {
                "enabled": {
                    "value": "self.training_config.fp16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmf/trainers/mmf_trainer.py": {
        "torch": {
            "GradScaler_111": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "enabled": {
                    "value": "self.training_config.fp16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_109": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/utils/build.py": {
        "torch": {
            "DataLoader_155": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_instance",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "training_config.pin_memory",
                            "Attribute"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "BatchCollator(dataset_instance.dataset_name, dataset_instance.dataset_type)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "training_config.num_workers",
                            "Attribute"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedSampler_191": {
                "variable": {
                    "value": "other_args[sampler]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_instance",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "other_args['shuffle']",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "_add_extra_args_for_dataloader(dataset_instance, other_args)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/utils/checkpoint.py": {
        "torch": {
            "load_46": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_92": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_509": {
                "obj": {
                    "value": "ckpt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(f, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "ckpt.get('model', ckpt)",
                            "Call"
                        ],
                        [
                            "torch.load(f, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "ckpt.get('model', ckpt)",
                            "Call"
                        ],
                        [
                            "self._torch_load(file)",
                            "Call"
                        ],
                        [
                            "{'model': ckpt}",
                            "Dict"
                        ],
                        [
                            "{'model': model.state_dict(), 'optimizer': self.trainer.optimizer.state_dict(), 'best_iteration': best_iteration, 'current_iteration': iteration, 'current_epoch': self.trainer.current_epoch, 'num_updates': update, 'best_update': best_update, 'best_metric_value': best_metric, 'fp16_scaler': fp16_scaler_dict, 'config': OmegaConf.to_container(self.config, resolve=True)}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_517": {
                "obj": {
                    "value": "ckpt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(f, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "ckpt.get('model', ckpt)",
                            "Call"
                        ],
                        [
                            "torch.load(f, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "ckpt.get('model', ckpt)",
                            "Call"
                        ],
                        [
                            "self._torch_load(file)",
                            "Call"
                        ],
                        [
                            "{'model': ckpt}",
                            "Dict"
                        ],
                        [
                            "{'model': model.state_dict(), 'optimizer': self.trainer.optimizer.state_dict(), 'best_iteration': best_iteration, 'current_iteration': iteration, 'current_epoch': self.trainer.current_epoch, 'num_updates': update, 'best_update': best_update, 'best_metric_value': best_metric, 'fp16_scaler': fp16_scaler_dict, 'config': OmegaConf.to_container(self.config, resolve=True)}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_424": {
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_426": {
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_513": {
                "obj": {
                    "value": "ckpt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(f, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "ckpt.get('model', ckpt)",
                            "Call"
                        ],
                        [
                            "torch.load(f, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "ckpt.get('model', ckpt)",
                            "Call"
                        ],
                        [
                            "self._torch_load(file)",
                            "Call"
                        ],
                        [
                            "{'model': ckpt}",
                            "Dict"
                        ],
                        [
                            "{'model': model.state_dict(), 'optimizer': self.trainer.optimizer.state_dict(), 'best_iteration': best_iteration, 'current_iteration': iteration, 'current_epoch': self.trainer.current_epoch, 'num_updates': update, 'best_update': best_update, 'best_metric_value': best_metric, 'fp16_scaler': fp16_scaler_dict, 'config': OmegaConf.to_container(self.config, resolve=True)}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_541": {
                "obj": {
                    "value": "self.trainer.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/utils/configuration.py": {
        "torch": {
            "device_count_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmf/utils/dataset.py": {
        "torch": {
            "zeros_12": {
                "variable": {
                    "value": "coord_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_length, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "width_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_14": {
                "variable": {
                    "value": "height_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/utils/distributed.py": {
        "torch": {
            "tensor_77": {
                "variable": {
                    "value": "scalar_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "scalar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "byte_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4094",
                            "MethodArgument"
                        ],
                        [
                            "4094",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "tensor_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensor_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(tensor_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_123": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_initialized_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_69": {
                "tensor": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor.div(world_size)",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_244": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_106": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor.div(world_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/utils/early_stopping.py": {
        "torch": {}
    },
    "mmf/utils/env.py": {
        "torch": {
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.getpid() + int(datetime.now().strftime('%S%f')) + int.from_bytes(os.urandom(2), 'big')",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/utils/general.py": {
        "torch": {
            "is_available_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_308": {
                "variable": {
                    "value": "device_name",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__33": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_grad_l2_norm * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_325": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "memory_allocated_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_cached_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_cached_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_242": {
                "obj": {
                    "value": "obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gc.get_objects()",
                            "Call"
                        ]
                    ]
                }
            },
            "current_device_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_243": {
                "obj": {
                    "value": "obj.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/utils/logger.py": {
        "torch": {
            "SummaryWriter_270": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tensorboard_folder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.log_folder, f'tensorboard_{current_time}')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmf/utils/modeling.py": {
        "torch": {}
    },
    "mmf/utils/text.py": {
        "torch": {
            "log_softmax_295": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "self.top_k_scores.expand_as(scores) + scores",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_315": {
                "variable": {
                    "value": "self.top_k_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "top_k_scores",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_334": {
                "variable": {
                    "value": "prev_word_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_word_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(prev_word_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_335": {
                "variable": {
                    "value": "next_word_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_word_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(next_word_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_422": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "self.top_k_scores.expand_as(scores) + scores",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_439": {
                "variable": {
                    "value": "top_m_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_m_scores[:last_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "score_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "score_sum + score",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_444": {
                "variable": {
                    "value": "prev_word_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_252": {
                "tensors": {
                    "value": "[seqs[prev_word_inds], next_word_inds.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_465": {
                "variable": {
                    "value": "captions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_467": {
                "variable": {
                    "value": "captions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_446": {
                "input": {
                    "value": "top_m_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.div(top_m_scores[:last_index], score_sum)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/utils/torchscript.py": {
        "torch": {}
    },
    "mmf/utils/transform.py": {
        "torch": {}
    },
    "mmf/utils/visualize.py": {
        "torch": {
            "stack_43": {
                "variable": {
                    "value": "img_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[transform(image) for image in images]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "mmf/utils/vocab.py": {
        "torch": {
            "from_numpy_243": {
                "variable": {
                    "value": "embedding_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(embedding_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_303": {
                "variable": {
                    "value": "self.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.get_size(), len(embedding.vectors[0]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_193": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.get_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "vector_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.vectors[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_207": {
                "*args": {
                    "value": "[embedding, torch.nn.Linear(vector_dim, embedding_dim)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_208": {
                "in_features": {
                    "value": "vector_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.vectors[0])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embedding_kwargs['embedding_dim']",
                            "Subscript"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_248": {
                "input": {
                    "value": "self.vectors[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_310": {
                "input": {
                    "value": "self.vectors[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_370": {
                "input": {
                    "value": "self.vectors[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmf_cli/run.py": {
        "torch": {
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_29": {
                "device": {
                    "value": "config.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "init_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/m4c/scripts/extract_ocr_frcn_feature.py": {
        "torch": {
            "load_29": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "yaml_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(img).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.tile(im[:, :, None], (1, 1, 3))",
                            "Call"
                        ],
                        [
                            "im[:, :, :3]",
                            "Subscript"
                        ],
                        [
                            "im[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "im - np.array([102.9801, 115.9465, 122.7717])",
                            "BinOp"
                        ],
                        [
                            "cv2.resize(im, None, None, fx=im_scale, fy=im_scale, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_59": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "max_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "scores.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_67": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_83": {
                "variable": {
                    "value": "max_conf[keep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "cls_scores[keep] > max_conf[keep]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_scores[keep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "max_conf[keep]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "input_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_boxes.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_29": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argsort_87": {
                "input": {
                    "value": "max_conf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(scores.shape[0]).to(cur_device)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/common/test_batch_collator.py": {
        "torch": {
            "tensor_22": {
                "variable": {
                    "value": "sample.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "data": {
                    "value": "[[1, 2], [1, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/common/test_sample.py": {
        "torch": {
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_80": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_82": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_83": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_88": {
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_90": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/datasets/test_multi_dataset_loader.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/datasets/test_prediction_processors.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_18": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "[1, 2, 3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/datasets/test_processors.py": {
        "torch": {
            "zeros_69": {
                "variable": {
                    "value": "expected_answers_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "19",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "expected_answers_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "19",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "expected_answers_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "19",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_155": {
                "input": {
                    "value": "processed_box",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bbox_processor(item)['bbox']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor([[1, 1, 1, 1, 0]], dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[5] * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "[2, 3, 15, 2, 3, 15, 2, 3, 15, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "data": {
                    "value": "[0, 0, 2, 0, 0, 2, 0, 0, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "[[1, 1, 1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/interfaces/test_interfaces.py": {
        "torch": {
            "load_59": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_61": {
                "obj": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/test_cnn_lstm.py": {
        "torch": {
            "randint_48": {
                "variable": {
                    "value": "test_sample.text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "79",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "test_sample.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "320",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "480",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_50": {
                "variable": {
                    "value": "test_sample.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/test_mmbt.py": {
        "torch": {
            "randint_42": {
                "variable": {
                    "value": "test_sample.input_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "30255",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(128,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_43": {
                "variable": {
                    "value": "test_sample.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "test_sample.segment_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_45": {
                "variable": {
                    "value": "test_sample.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 300, 300)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "script_52": {
                "variable": {
                    "value": "script_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "self.finetune_model.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_67": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "30255",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_68": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "randint_71": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "test_sample.segment_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_80": {
                "variable": {
                    "value": "test_sample.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 300, 300)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "expected_modal_end_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_56": {
                "input": {
                    "value": "model_output['scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "script_output['scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_88": {
                "input": {
                    "value": "actual_modal_end_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mmbt_base.extract_modal_end_token(test_sample_list)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_modal_end_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([1]).fill_(SEP).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_89": {
                "input": {
                    "value": "test_sample_list.input_ids[0, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "input_ids[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_91": {
                "input": {
                    "value": "test_sample_list.input_mask[0, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "input_mask[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/test_vilbert.py": {
        "torch": {
            "randint_51": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "BERT_VOCAB_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "30255",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(1, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_52": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_54": {
                "variable": {
                    "value": "visual_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, num_bbox_per_image, self.vision_feature_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "image_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, num_bbox_per_image)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_58": {
                "variable": {
                    "value": "visual_locations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, num_bbox_per_image, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "masked_lm_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "image_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bbox_per_image",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.vision_target_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_61": {
                "variable": {
                    "value": "image_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bbox_per_image",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "script_76": {
                "variable": {
                    "value": "script_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "self.pretrain_model.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_96": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "BERT_VOCAB_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "30255",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(1, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_97": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_99": {
                "variable": {
                    "value": "visual_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, num_bbox_per_image, self.vision_feature_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "image_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, num_bbox_per_image)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_103": {
                "variable": {
                    "value": "visual_locations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, num_bbox_per_image, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "script_115": {
                "variable": {
                    "value": "script_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "self.finetune_model.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_125": {
                "input": {
                    "value": "model_output['scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "script_output['scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/test_visual_bert.py": {
        "torch": {
            "randint_62": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "BERT_VOCAB_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "30255",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(1, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_64": {
                "*size": {
                    "value": "(1, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_66": {
                "*size": {
                    "value": "(1, 100, 2048)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "(1, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/test_encoders.py": {
        "torch": {}
    },
    "tests/modules/test_fusions.py": {
        "torch": {
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_12": {
                "*size": {
                    "value": "bsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/test_layers.py": {
        "torch": {
            "randn_20": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "150",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_40": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_50": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*size_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_58": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "60",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_64": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_74": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_89": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_108": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "768",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/test_losses.py": {
        "torch": {
            "tensor_12": {
                "variable": {
                    "value": "RETURN_VALUE",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_78": {
                "variable": {
                    "value": "expected[targets]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "predicted[scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 10, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_87": {
                "variable": {
                    "value": "expected[targets]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "9491",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(5, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_88": {
                "variable": {
                    "value": "predicted[scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 10, 9491)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/test_metrics.py": {
        "torch": {
            "empty_35": {
                "variable": {
                    "value": "expected.answers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 5, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "predicted[scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 10, 19)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_43": {
                "variable": {
                    "value": "expected.answers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 5, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "predicted[scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 10, 19)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "sample.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [1, 0], [1, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "predicted[scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.9332, 0.8149], [-0.8391, 0.6797], [-0.7235, 0.722], [-0.9043, 0.3078]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "sample.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "sample.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0], [0, 0, 1], [1, 0, 0], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "predicted[scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.9332, 0.8149, 0.3491], [-0.8391, 0.6797, -0.341], [-0.7235, 0.722, 0.9104], [0.9043, 0.3078, -0.421]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "sample.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "sample.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 1], [1, 0, 1], [1, 0, 1], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "predicted[scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.9332, 0.8149, 0.3491], [-0.8391, 0.6797, -0.341], [-0.7235, 0.722, 0.9104], [0.9043, 0.3078, -0.421]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/test_optimizers.py": {
        "torch": {}
    },
    "tests/test_utils.py": {
        "torch": {
            "is_available_42": {
                "variable": {
                    "value": "CUDA_AVAILBLE",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_85": {
                "variable": {
                    "value": "first.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_88": {
                "variable": {
                    "value": "first.z.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_92": {
                "variable": {
                    "value": "second.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_95": {
                "variable": {
                    "value": "second.z.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_146": {
                "variable": {
                    "value": "test_sample.input_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(128,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_147": {
                "variable": {
                    "value": "test_sample.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "test_sample.segment_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_149": {
                "variable": {
                    "value": "test_sample.image_feature_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 100, 2048)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_150": {
                "variable": {
                    "value": "test_sample.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 300, 300)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "script_156": {
                "variable": {
                    "value": "script_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cnn_lstm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "script_165": {
                "variable": {
                    "value": "script_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cnn_lstm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "equal_17": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_160": {
                "input": {
                    "value": "model_output['scores']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "script_output['scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_168": {
                "variable": {
                    "value": "loaded_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "tmp.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "script_model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.jit.script(model)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(model)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_110": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_124": {
                "input": {
                    "value": "self.linear(batch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/trainers/callbacks/test_logistics.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(5, 4)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(5, 4)",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_32": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "self.trainer.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainer.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/trainers/callbacks/test_lr_scheduler.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(5, 4)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(5, 4)",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_25": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "self.trainer.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainer.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/trainers/test_device.py": {
        "torch": {
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_25": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/trainers/test_fp16.py": {
        "torch": {
            "sum_20": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_list[list(sample_list.keys())[0]]",
                            "Subscript"
                        ],
                        [
                            "self.linear(batch_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_34": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SGD_41": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/trainers/test_training_loop.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NumbersDataset(num_train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/utils/test_checkpoint.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(5, 4)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(5, 4)",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_45": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.base_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(5, 4)",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradScaler_106": {
                "variable": {
                    "value": "self.trainer.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_108": {
                "variable": {
                    "value": "self.trainer.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainer.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_200": {
                "variable": {
                    "value": "self.trainer.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.trainer.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_423": {
                "variable": {
                    "value": "self.trainer.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradScaler_439": {
                "variable": {
                    "value": "self.trainer.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_207": {
                "input": {
                    "value": "weight_to_be_tested",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.trainer.model.module.base[0].weight",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "base_0_weight_current.to(weight_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_212": {
                "input": {
                    "value": "weight_to_be_tested",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.trainer.model.module.base[0].weight",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "base_0_weight_best.to(weight_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_574": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_575": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_587": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_589": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_590": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/utils/test_model.py": {
        "torch": {
            "rand_44": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_list.get_batch_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3127",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_60": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "self.vocab.get_size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_63": {
                "*size": {
                    "value": "batch_size_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "self.vocab.get_size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/utils/test_text.py": {
        "torch": {
            "randn_149": {
                "variable": {
                    "value": "sample.image_feature_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "sample.answers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_195": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_234": {
                "variable": {
                    "value": "sample.image_feature_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "sample.answers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/scripts/bert/extract_bert_embeddings.py": {
        "torch": {
            "Tensor_22": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_23": {
                "variable": {
                    "value": "segments_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/scripts/features/extract_features_vmb.py": {
        "torch": {
            "load_121": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.model_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(img).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(img.convert('RGB')).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.repeat(im[:, :, np.newaxis], 3, axis=2)",
                            "Call"
                        ],
                        [
                            "im[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "im - np.array([102.9801, 115.9465, 122.7717])",
                            "BinOp"
                        ],
                        [
                            "cv2.resize(im, None, None, fx=im_scale, fy=im_scale, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_159": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "max_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "scores.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "full_like_182": {
                "variable": {
                    "value": "conf_thresh_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_conf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(scores.shape[0]).to(cur_device)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "conf_thresh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_199": {
                "variable": {
                    "value": "(sorted_scores, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "max_conf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(scores.shape[0]).to(cur_device)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_205": {
                "variable": {
                    "value": "objects",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[keep_boxes][:, start_index:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_190": {
                "variable": {
                    "value": "max_conf[keep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "(cls_scores[keep] > max_conf[keep]) & (cls_scores[keep] > conf_thresh_tensor[keep])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_scores[keep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "max_conf[keep]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_121": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tools/scripts/features/extract_resnet152_feat.py": {
        "torch": {
            "is_available_27": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.feature_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}