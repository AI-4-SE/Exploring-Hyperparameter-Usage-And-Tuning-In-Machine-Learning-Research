{
    "KD/test.py": {
        "sklearn": {
            "f1_score_623": {
                "variable": {
                    "value": "f1",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "matthews_corrcoef_644": {
                "y_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_672": {
                "variable": {
                    "value": "all_seq_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.seq_length for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_673": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_674": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_675": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_676": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_763": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_764": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_889": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_890": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_669": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_901": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_671": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_704": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_903": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_697": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_707": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_738": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_889": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "KD/train.py": {
        "sklearn": {
            "f1_score_534": {
                "variable": {
                    "value": "f1",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "matthews_corrcoef_555": {
                "y_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_584": {
                "variable": {
                    "value": "all_seq_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.seq_length for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_585": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_586": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_587": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_588": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_761": {
                "variable": {
                    "value": "dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(data) if set_type == 'eval' else RandomSampler(data)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.eval_batch_size if set_type == 'eval' else args.train_batch_size",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_939": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_940": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_580": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_662": {
                "obj": {
                    "value": "score_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'taylor.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_701": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_951": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_1059": {
                "variable": {
                    "value": "loss_mse",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_582": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_616": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_759": {
                "data_source": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "RandomSampler_759": {
                "data_source": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "manual_seed_all_953": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_1002": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(args.data_dir, 'train_aug.pt'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(args.data_dir, 'train.pt'))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_1003": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(args.data_dir, 'train_aug.pt'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(args.data_dir, 'train.pt'))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_1037": {
                "variable": {
                    "value": "student_model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "student_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PrunTinyBertForSequenceClassification.from_pretrained(args.student_model, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(student_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_1038": {
                "variable": {
                    "value": "teacher_model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "teacher_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TinyBertForSequenceClassification.from_pretrained(args.teacher_model, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(teacher_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_1061": {
                "variable": {
                    "value": "student_likelihood",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "predicts",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1062": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_609": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_619": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_999": {
                "variable": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.data_dir, 'train_aug.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_1001": {
                "variable": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.data_dir, 'train.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_1244": {
                "obj": {
                    "value": "score_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'%s/taylor.pkl' % args.output_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_939": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1007": {
                "obj": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(args.data_dir, 'train_aug.pt'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(args.data_dir, 'train.pt'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.data_dir, 'train_aug.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_1009": {
                "obj": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(args.data_dir, 'train_aug.pt'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(args.data_dir, 'train.pt'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.data_dir, 'train.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_1105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_1131": {
                "variable": {
                    "value": "loss_mse",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1223": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, model_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "KD/train_with_subset.py": {
        "sklearn": {
            "f1_score_538": {
                "variable": {
                    "value": "f1",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "matthews_corrcoef_559": {
                "y_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_588": {
                "variable": {
                    "value": "all_seq_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.seq_length for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_589": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_590": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_591": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_592": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_763": {
                "variable": {
                    "value": "dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "file.readlines()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(data) if set_type == 'eval' else RandomSampler(data)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.eval_batch_size if set_type == 'eval' else args.train_batch_size",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_950": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_951": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_584": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_666": {
                "obj": {
                    "value": "score_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'taylor.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_705": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_962": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_1068": {
                "variable": {
                    "value": "loss_mse",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_586": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_620": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_761": {
                "data_source": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "file.readlines()",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_761": {
                "data_source": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "file.readlines()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_964": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_1046": {
                "variable": {
                    "value": "student_model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "student_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PrunTinyBertForSequenceClassification.from_pretrained(args.student_model, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(student_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_1047": {
                "variable": {
                    "value": "teacher_model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "teacher_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TinyBertForSequenceClassification.from_pretrained(args.teacher_model, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(teacher_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_1070": {
                "variable": {
                    "value": "student_likelihood",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "predicts",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1071": {
                "variable": {
                    "value": "targets_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_613": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_623": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_950": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_1102": {
                "variable": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.data_dir, 'train_aug%d.pt' % subset_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomSampler_1103": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(args.data_dir, 'train_aug%d.pt' % subset_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_1104": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(args.data_dir, 'train_aug%d.pt' % subset_id))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_1107": {
                "obj": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(args.data_dir, 'train_aug%d.pt' % subset_id))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.data_dir, 'train_aug%d.pt' % subset_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_1129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_1155": {
                "variable": {
                    "value": "loss_mse",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1269": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, model_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/data/metrics/__init__.py": {
        "sklearn": {
            "f1_score_37": {
                "variable": {
                    "value": "f1",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matthews_corrcoef_56": {
                "y_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "KD/transformer/modeling.py": {
        "tensorflow": {
            "list_variables_70": {
                "variable": {
                    "value": "init_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_75": {
                "variable": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_123": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_180": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_212": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_337": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_339": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_341": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_347": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_351": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_379": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_380": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_381": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_383": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_401": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_415": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_439": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_441": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_478": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_506": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_525": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_526": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_544": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_565": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_569": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_592": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_604": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_935": {
                "variable": {
                    "value": "self.fit_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fit_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1094": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1095": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_1124": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1125": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_1126": {
                "variable": {
                    "value": "self.fit_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fit_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_137": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_223": {
                "variable": {
                    "value": "pad_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*pad_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_layer, pad_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_355": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_454": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_457": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "intermediate_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3072",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_473": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_476": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "intermediate_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3072",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_696": {
                "variable": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(pretrained_model_name_or_path, WEIGHTS_NAME)",
                            "Call"
                        ],
                        [
                            "os.path.join(pretrained_model_name_or_path, TF_WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_812": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_814": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_912": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1011": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1081": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1112": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "erf_133": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_206": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_409": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_569": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_920": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_1108": {
                "input": {
                    "value": "torch.cat((a_pooled_output, b_pooled_output, torch.abs(a_pooled_output - b_pooled_output)), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1135": {
                "input": {
                    "value": "pooled_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_states[-1][:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.dense(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.activation(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.pooler(encoded_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1108": {
                "tensors": {
                    "value": "(a_pooled_output, b_pooled_output, torch.abs(a_pooled_output - b_pooled_output))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_151": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_158": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1109": {
                "input": {
                    "value": "a_pooled_output - b_pooled_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "KD/transformer/modeling_prun.py": {
        "tensorflow": {
            "list_variables_70": {
                "variable": {
                    "value": "init_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_75": {
                "variable": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_123": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_180": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_212": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_350": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_352": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_359": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_363": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_395": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_396": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_397": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_399": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_417": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_431": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_455": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.prun_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_457": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_494": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_522": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_541": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_542": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_560": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_581": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_585": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_608": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_620": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_951": {
                "variable": {
                    "value": "self.fit_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fit_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1110": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1111": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_1140": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1141": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sigmoid_137": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_223": {
                "variable": {
                    "value": "pad_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*pad_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_layer, pad_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_344": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_347": {
                "variable": {
                    "value": "self.word_embeddings1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.word_embeddings2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.emb_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_367": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_470": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.prun_intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_473": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "intermediate_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3072",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_489": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.prun_intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_492": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "intermediate_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3072",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_712": {
                "variable": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(pretrained_model_name_or_path, WEIGHTS_NAME)",
                            "Call"
                        ],
                        [
                            "os.path.join(pretrained_model_name_or_path, TF_WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_828": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_830": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_928": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1027": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1097": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1128": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "erf_133": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_206": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_425": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_585": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_936": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_1124": {
                "input": {
                    "value": "torch.cat((a_pooled_output, b_pooled_output, torch.abs(a_pooled_output - b_pooled_output)), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1151": {
                "input": {
                    "value": "pooled_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_states[-1][:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.dense(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.activation(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.pooler(encoded_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1124": {
                "tensors": {
                    "value": "(a_pooled_output, b_pooled_output, torch.abs(a_pooled_output - b_pooled_output))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_151": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_158": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1125": {
                "input": {
                    "value": "a_pooled_output - b_pooled_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/benchmark_utils.py": {
        "tensorflow": {},
        "torch": {}
    },
    "Pruning/hg_transformers/commands/env.py": {
        "tensorflow": {
            "is_gpu_available_36": {
                "variable": {
                    "value": "tf_cuda_available",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_physical_devices_39": {
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_26": {
                "variable": {
                    "value": "pt_cuda_available",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_bert_pytorch_checkpoint_to_original_tf.py": {
        "tensorflow": {
            "as_dtype_70": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "Name",
                    "possible_values": []
                },
                "type_value": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "tf_var",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.dtypes.as_dtype(tensor.dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "name.replace(patt, repl)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_88": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_72": {
                "var_list": {
                    "value": "[tf_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_104": {
                "f": {
                    "value": "args.pytorch_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_graph_to_onnx.py": {
        "tensorflow": {},
        "torch": {
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/data/processors/glue.py": {
        "tensorflow": {
            "TensorShape_102": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_98": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_99": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_100": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/data/processors/squad.py": {
        "tensorflow": {
            "TensorShape_425": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_426": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_427": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_428": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_429": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_432": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_433": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_434": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_435": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_436": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_355": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_356": {
                "variable": {
                    "value": "all_attention_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_358": {
                "variable": {
                    "value": "all_cls_index",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.cls_index for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_359": {
                "variable": {
                    "value": "all_p_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_360": {
                "variable": {
                    "value": "all_is_impossible",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.is_impossible for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_363": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_364": {
                "variable": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_368": {
                "variable": {
                    "value": "all_start_positions",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_369": {
                "variable": {
                    "value": "all_end_positions",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_370": {
                "variable": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/data/processors/utils.py": {
        "tensorflow": {
            "TensorShape_327": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_336": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_337": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_343": {
                "variable": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_339": {
                "variable": {
                    "value": "all_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_341": {
                "variable": {
                    "value": "all_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/file_utils.py": {
        "tensorflow": {},
        "torch": {}
    },
    "Pruning/hg_transformers/modeling_albert.py": {
        "tensorflow": {
            "list_variables_61": {
                "variable": {
                    "value": "init_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_66": {
                "variable": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "name.replace('module/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('ffn_1', 'ffn')",
                            "Call"
                        ],
                        [
                            "name.replace('bert/', 'albert/')",
                            "Call"
                        ],
                        [
                            "name.replace('attention_1', 'attention')",
                            "Call"
                        ],
                        [
                            "name.replace('transform/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('LayerNorm_1', 'full_layer_layer_norm')",
                            "Call"
                        ],
                        [
                            "name.replace('LayerNorm', 'attention/LayerNorm')",
                            "Call"
                        ],
                        [
                            "name.replace('transformer/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('intermediate/dense/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('ffn/intermediate/output/dense/', 'ffn_output/')",
                            "Call"
                        ],
                        [
                            "name.replace('/output/', '/')",
                            "Call"
                        ],
                        [
                            "name.replace('/self/', '/')",
                            "Call"
                        ],
                        [
                            "name.replace('pooler/dense', 'pooler')",
                            "Call"
                        ],
                        [
                            "name.replace('cls/predictions', 'predictions')",
                            "Call"
                        ],
                        [
                            "name.replace('predictions/attention', 'predictions')",
                            "Call"
                        ],
                        [
                            "name.replace('embeddings/attention', 'embeddings')",
                            "Call"
                        ],
                        [
                            "name.replace('inner_group_', 'albert_layers/')",
                            "Call"
                        ],
                        [
                            "name.replace('group_', 'albert_layer_groups/')",
                            "Call"
                        ],
                        [
                            "'classifier/' + name",
                            "BinOp"
                        ],
                        [
                            "name.replace('seq_relationship/output_', 'sop_classifier/classifier/')",
                            "Call"
                        ],
                        [
                            "name.replace('weights', 'weight')",
                            "Call"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_165": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_178": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_179": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_180": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_181": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_192": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_194": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_200": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_230": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_247": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_270": {
                "variable": {
                    "value": "self.full_layer_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_272": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_273": {
                "variable": {
                    "value": "self.ffn_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_292": {
                "variable": {
                    "value": "self.albert_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AlbertLayer(config) for _ in range(config.inner_group_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_323": {
                "variable": {
                    "value": "self.embedding_hidden_mapping_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_324": {
                "variable": {
                    "value": "self.albert_layer_groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AlbertLayerGroup(config) for _ in range(config.num_hidden_groups)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_452": {
                "variable": {
                    "value": "self.pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_453": {
                "variable": {
                    "value": "self.pooler_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_685": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_686": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_687": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_688": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_709": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.classifier_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_710": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_817": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.classifier_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_818": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_912": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_913": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1009": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_548": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_550": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_672": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_799": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_984": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1099": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_237": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_259": {
                "equation": {
                    "value": "bfnd,ndh->bfh",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "context_layer.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_686": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_891": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_894": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_207": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_bert.py": {
        "tensorflow": {
            "list_variables_77": {
                "variable": {
                    "value": "init_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_82": {
                "variable": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_129": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_149": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_150": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_151": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_201": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_234": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_251": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_266": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_285": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_324": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_339": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_341": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_390": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_429": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_430": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_444": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_465": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_467": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_491": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_502": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_1079": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1080": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1175": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1176": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_1276": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1277": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1374": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_134": {
                "input": {
                    "value": "nn.functional.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_167": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_700": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_702": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_840": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_946": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_954": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_971": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, attention_mask.new_zeros((attention_mask.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_975": {
                "variable": {
                    "value": "dummy_token",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_978": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, dummy_token]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1061": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1258": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1347": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1468": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_134": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_241": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_714": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_hidden_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_1155": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1158": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_1352": {
                "variable": {
                    "value": "active_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_292": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1353": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_electra.py": {
        "tensorflow": {
            "list_variables_43": {
                "variable": {
                    "value": "init_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_48": {
                "variable": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "name.replace('electra/embeddings/', 'generator/embeddings/')",
                            "Call"
                        ],
                        [
                            "name.replace('electra/', 'discriminator/')",
                            "Call"
                        ],
                        [
                            "name.replace('generator/', 'electra/')",
                            "Call"
                        ],
                        [
                            "name.replace('dense_1', 'dense_prediction')",
                            "Call"
                        ],
                        [
                            "name.replace('generator_predictions/output_bias', 'generator_lm_head/bias')",
                            "Call"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Embedding_113": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_114": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_115": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.dense_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_339": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_340": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_549": {
                "variable": {
                    "value": "self.generator_lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_639": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_640": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_242": {
                "variable": {
                    "value": "self.embeddings_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_315": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_317": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_518": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_618": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_704": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_430": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_433": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_gpt2.py": {
        "tensorflow": {
            "list_variables_58": {
                "variable": {
                    "value": "init_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_63": {
                "variable": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "name[6:]",
                            "Subscript"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_94": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_116": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_117": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_123": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "index_attn",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_148": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask.bool()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / float(v.size(-1)) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask.bool(), w, self.masked_bias.to(w.dtype))",
                            "Call"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.masked_bias.to(w.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_213": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_225": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_227": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_346": {
                "variable": {
                    "value": "self.wte",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_347": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_348": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_349": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_350": {
                "variable": {
                    "value": "self.ln_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_538": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_647": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_191": {
                "variable": {
                    "value": "present",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key.transpose(-2, -1), value)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_447": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_shape[-1] + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_627": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_752": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_758": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tril_107": {
                "input": {
                    "value": "torch.ones((n_ctx, n_ctx), dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "-10000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_154": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "input": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / float(v.size(-1)) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask.bool(), w, self.masked_bias.to(w.dtype))",
                            "Call"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "arange_130": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_107": {
                "*size": {
                    "value": "(n_ctx, n_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_t5.py": {
        "tensorflow": {
            "list_variables_68": {
                "variable": {
                    "value": "init_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_73": {
                "variable": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "txt_name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_127": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_148": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_166": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.wi(hidden_states)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "self.wo(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_181": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_205": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_217": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_kv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_277": {
                "variable": {
                    "value": "val_if_large",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_363": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.q(input))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_379": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_380": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_386": {
                "variable": {
                    "value": "context",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.v(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_405": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_436": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_470": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_564": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "DUMMY_INPUTS",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_565": {
                "variable": {
                    "value": "input_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "DUMMY_MASK",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_636": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[T5Block(config, has_relative_attention_bias=bool(i == 0)) for i in range(config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_640": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_849": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_971": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_980": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_211": {
                "variable": {
                    "value": "self.relative_attention_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.relative_attention_num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_264": {
                "variable": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_266": {
                "variable": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_279": {
                "condition": {
                    "value": "is_small",
                    "type": "Name",
                    "possible_values": [
                        [
                            "n < max_exact",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "val_if_large",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "all_622": {
                "input": {
                    "value": "shifted_input_ids >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_695": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "mask_seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seq_length",
                            "Name"
                        ],
                        [
                            "past_key_value_states[0][0].shape[2] + seq_length",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_698": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "encoder_seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_hidden_states.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "inputs_embeds.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1107": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_148": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sqrt_154": {
                "input": {
                    "value": "variance + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_like_277": {
                "input": {
                    "value": "val_if_large",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "num_buckets - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_284": {
                "start": {
                    "value": "qlen",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_285": {
                "start": {
                    "value": "klen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "real_qlen",
                            "Name"
                        ],
                        [
                            "kv.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_266": {
                "input": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_223": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_275": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_albert.py": {
        "tensorflow": {
            "Embedding_52": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_58": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_67": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.config.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.config.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_158": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "query",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_161": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "key",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_164": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_168": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.config.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_attention_heads, self.attention_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_188": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_190": {
                "variable": {
                    "value": "dk",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(key_layer)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_198": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_210": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_211": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.all_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_222": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_225": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_226": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_242": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_245": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_265": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_267": {
                "variable": {
                    "value": "dk",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(key_layer)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_275": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_285": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_287": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_288": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.all_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_310": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ffn",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_319": {
                "variable": {
                    "value": "self.ffn_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ffn_output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_322": {
                "variable": {
                    "value": "self.full_layer_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "full_layer_layer_norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_325": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_385": {
                "variable": {
                    "value": "self.embedding_hidden_mapping_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_hidden_mapping_in",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_452": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_460": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_491": {
                "variable": {
                    "value": "self.pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pooler",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_567": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_776": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.classifier_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_777": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_850": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.classifier_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_851": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_907": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_953": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(dropout_pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_954": {
                "variable": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_955": {
                "variable": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_972": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_973": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1079": {
                "variable": {
                    "value": "reshaped_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(dropout_pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_choices)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "fill_117": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_120": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_140": {
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(dropout_pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.config.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_172": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.config.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_550": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fill_552": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_72": {
                "name": {
                    "value": "word_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_191": {
                "x": {
                    "value": "dk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_268": {
                "x": {
                    "value": "dk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_984": {
                "value": {
                    "value": "MULTIPLE_CHOICE_DUMMY_INPUTS",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_1059": {
                "tensor": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1060": {
                "tensor": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.fill(input_shape, 1)",
                            "Call"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1061": {
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill(input_shape, 0)",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.fill(input_shape, 0)",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1062": {
                "tensor": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(seq_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_115": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_bert.py": {
        "tensorflow": {
            "Activation_86": {
                "activation": {
                    "value": "gelu",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Activation_88": {
                "activation": {
                    "value": "swish",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Activation_89": {
                "activation": {
                    "value": "gelu_new",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Embedding_103": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_109": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_118": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_190": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_191": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_211": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "query",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_214": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "key",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_217": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_221": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_attention_heads, self.attention_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_240": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_243": {
                "variable": {
                    "value": "dk",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(key_layer)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_251": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_261": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_263": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.all_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_275": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_278": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_279": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_311": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_328": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_331": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_332": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_398": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_416": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_423": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_466": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_relationship",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_556": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_886": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_887": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_943": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_944": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1045": {
                "variable": {
                    "value": "reshaped_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_choices)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_1063": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_1064": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_1121": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_1168": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1169": {
                "variable": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1170": {
                "variable": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_82": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_168": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_171": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_193": {
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_225": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_539": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fill_541": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "erf_64": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_77": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_123": {
                "name": {
                    "value": "word_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_244": {
                "x": {
                    "value": "dk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_955": {
                "value": {
                    "value": "MULTIPLE_CHOICE_DUMMY_INPUTS",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_1025": {
                "tensor": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1026": {
                "tensor": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.fill(input_shape, 1)",
                            "Call"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1027": {
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill(input_shape, 0)",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.fill(input_shape, 0)",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1028": {
                "tensor": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(seq_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_166": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_64": {
                "x": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_77": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_ctrl.py": {
        "tensorflow": {
            "cast_48": {
                "variable": {
                    "value": "pos_encoding",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "np.concatenate([sines, cosines], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "matmul_qk",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(q, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Wk(k)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(k, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.concat((past_key, k), axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_56": {
                "variable": {
                    "value": "dk",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "scaled_attention_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "matmul_qk / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + mask * -10000.0",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "attention_weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Wv(v)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(v, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.concat((past_value, v), axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_86": {
                "variable": {
                    "value": "self.Wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Wq",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_87": {
                "variable": {
                    "value": "self.Wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Wk",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_88": {
                "variable": {
                    "value": "self.Wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Wv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_90": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_heads, self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "variable": {
                    "value": "scaled_attention",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "original_size_attention",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scaled_attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(output[0], perm=[0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.d_model_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "layers": {
                    "value": "[tf.keras.layers.Dense(dff, activation='relu', name='0'), tf.keras.layers.Dense(d_model_size, name='2')]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ffn",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_157": {
                "variable": {
                    "value": "self.layernorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-06",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "layernorm1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_158": {
                "variable": {
                    "value": "self.layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-06",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "layernorm2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_160": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_161": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_200": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_213": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layernorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_327": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_336": {
                "variable": {
                    "value": "pos_embeds",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self.pos_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_359": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds + pos_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.layernorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "self.input_embeddings(hidden_states, mode='linear')",
                            "Call"
                        ],
                        [
                            "hidden_states + self.bias",
                            "BinOp"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_57": {
                "x": {
                    "value": "dk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_94": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_109": {
                "variable": {
                    "value": "(past_key, past_value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_past",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_110": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "(past_key, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "(past_value, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_116": {
                "x": {
                    "value": "use_cache",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bool(use_cache.numpy())",
                            "Call"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "inputs[7] if len(inputs) > 7 else use_cache",
                            "IfExp"
                        ],
                        [
                            "inputs.get('use_cache', use_cache)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_123": {
                "variable": {
                    "value": "present",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_290": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[input_shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_307": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_322": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "token_type_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_334": {
                "x": {
                    "value": "tf.cast(self.d_model_size, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_550": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_141": {
                "units": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "input_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_324": {
                "x": {
                    "value": "tf.cast(self.d_model_size, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "band_part_332": {
                "input": {
                    "value": "tf.ones((seq_len, seq_len))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_lower": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_334": {
                "x": {
                    "value": "self.d_model_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_289": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_324": {
                "x": {
                    "value": "self.d_model_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_332": {
                "shape": {
                    "value": "(seq_len, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_371": {
                "tensor": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_348": {
                "tensor": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds + pos_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.layernorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "self.input_embeddings(hidden_states, mode='linear')",
                            "Call"
                        ],
                        [
                            "hidden_states + self.bias",
                            "BinOp"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_distilbert.py": {
        "tensorflow": {
            "Embedding_78": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_85": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_177": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_182": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "q_lin",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_185": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "k_lin",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_188": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "v_lin",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_191": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "out_lin",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_239": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.q_lin(query))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.k_lin(key))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_240": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "mask_reshape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[bs, 1, 1, k_length]",
                            "List"
                        ]
                    ]
                }
            },
            "softmax_244": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "scores - 1e+30 * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_251": {
                "variable": {
                    "value": "context",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.v_lin(value))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_264": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_265": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_268": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_293": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_300": {
                "variable": {
                    "value": "self.sa_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "sa_layer_norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_303": {
                "variable": {
                    "value": "self.output_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer_norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_445": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.ones(input_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_607": {
                "variable": {
                    "value": "self.vocab_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "vocab_transform",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_610": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "gelu",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LayerNormalization_611": {
                "variable": {
                    "value": "self.vocab_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "vocab_layer_norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_671": {
                "variable": {
                    "value": "self.pre_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pre_classifier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_677": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_680": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.seq_classif_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_735": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_736": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_791": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_795": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.qa_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_834": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_835": {
                "variable": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_836": {
                "variable": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_147": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_444": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "erf_52": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_65": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "word_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_228": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, dim_per_head))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_232": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads * dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_275": {
                "activation": {
                    "value": "gelu",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "range_144": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_232": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_52": {
                "x": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_65": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_electra.py": {
        "tensorflow": {
            "Embedding_36": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_42": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_51": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_133": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_134": {
                "variable": {
                    "value": "self.dense_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_prediction",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_140": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense_prediction(hidden_states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNormalization_149": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_150": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_183": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "self.get_extended_attention_mask(attention_mask, input_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_565": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_566": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fill_101": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_104": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_126": {
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(self.dense_prediction(hidden_states))",
                            "Call"
                        ],
                        [
                            "self.discriminator_predictions(discriminator_sequence_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(discriminator_sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_168": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_206": {
                "variable": {
                    "value": "self.embeddings_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings_project",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fill_262": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fill_264": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_56": {
                "name": {
                    "value": "word_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_99": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_flaubert.py": {
        "tensorflow": {
            "assert_equal_177": {
                "x": {
                    "value": "shape_list(lengths)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "expand_dims_192": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(slen)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_170": {
                "variable": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.not_equal(input_ids, self.pad_index), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_172": {
                "variable": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[slen] * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_195": {
                "x": {
                    "value": "shape_list(position_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_equal_201": {
                "x": {
                    "value": "shape_list(langs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_170": {
                "x": {
                    "value": "tf.not_equal(input_ids, self.pad_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_170": {
                "x": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "input_ids[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_gpt2.py": {
        "tensorflow": {
            "Dropout_77": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_78": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.causal_attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_125": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_140": {
                "variable": {
                    "value": "(query, key, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_181": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_194": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_196": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_230": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "wpe",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_236": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_238": {
                "variable": {
                    "value": "self.ln_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_f",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_345": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_377": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_734": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shapes + shape_list(hidden_states)[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_739": {
                "variable": {
                    "value": "mc_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mc_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.multiple_choice_head([hidden_states, mc_token_ids], training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(mc_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_92": {
                "x": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "self.ln_2(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(m, training=training)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_99": {
                "variable": {
                    "value": "dk",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_134": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unstack_145": {
                "variable": {
                    "value": "(past_key, past_value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_past",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[past_key, key]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_147": {
                "variable": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[past_value, value]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_152": {
                "x": {
                    "value": "use_cache",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bool(use_cache.numpy())",
                            "Call"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "inputs[7] if len(inputs) > 7 else use_cache",
                            "IfExp"
                        ],
                        [
                            "inputs.get('use_cache', use_cache)",
                            "Call"
                        ],
                        [
                            "inputs[8] if len(inputs) > 8 else use_cache",
                            "IfExp"
                        ],
                        [
                            "inputs.get('use_cache', use_cache)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_159": {
                "variable": {
                    "value": "present",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[key, value]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_329": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_351": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "token_type_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_544": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_89": {},
            "matmul_119": {
                "a": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_301": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "input_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_715": {
                "tensor": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "input_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_716": {
                "tensor": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_717": {
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "token_type_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_718": {
                "tensor": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_100": {
                "x": {
                    "value": "dk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_313": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_391": {
                "tensor": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_365": {
                "tensor": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_58": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_openai.py": {
        "tensorflow": {
            "Activation_60": {
                "activation": {
                    "value": "gelu",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Activation_62": {
                "activation": {
                    "value": "swish",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_82": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.causal_attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_116": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_129": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_144": {
                "variable": {
                    "value": "(query, key, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_167": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_181": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_183": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_211": {
                "variable": {
                    "value": "self.positions_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "positions_embed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_217": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_304": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(input_shape[-1], dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_330": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_651": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shapes + shape_list(hidden_states)[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_656": {
                "variable": {
                    "value": "mc_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mc_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.multiple_choice_head([hidden_states, mc_token_ids], training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(mc_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_96": {
                "x": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "self.mlp(n, training=training)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_103": {
                "variable": {
                    "value": "dk",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_138": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_288": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_310": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_51": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_93": {},
            "matmul_123": {
                "a": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_265": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_634": {
                "tensor": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_635": {
                "tensor": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_636": {
                "tensor": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_637": {
                "tensor": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(input_shape[-1], dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_104": {
                "x": {
                    "value": "dk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_272": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_341": {
                "tensor": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_323": {
                "tensor": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_51": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_pytorch_utils.py": {
        "tensorflow": {},
        "torch": {
            "load_89": {
                "variable": {
                    "value": "pt_state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(pytorch_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_313": {
                "variable": {
                    "value": "new_pt_params_dict[pt_weight_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pt_state_dict[name].numpy()",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_314": {
                "variable": {
                    "value": "loaded_pt_weights_data_ptr[pt_weight.data_ptr()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pt_state_dict[name].numpy()",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_roberta.py": {
        "tensorflow": {
            "cast_55": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.not_equal(x, self.padding_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_234": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_237": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_238": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "gelu",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dense_315": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_321": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_322": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "out_proj",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_400": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_401": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_457": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_503": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(sequence_output, training=kwargs.get('training', False))",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_504": {
                "variable": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_505": {
                "variable": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_55": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x, mode='linear') + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_56": {
                "x": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.not_equal(x, self.padding_idx), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_67": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_t5.py": {
        "tensorflow": {
            "reduce_mean_62": {
                "variable": {
                    "value": "variance",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_70": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "wi",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_71": {
                "variable": {
                    "value": "self.wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "wo",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_114": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_115": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_116": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_117": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "o",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_164": {
                "variable": {
                    "value": "is_small",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_exact",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_171": {
                "variable": {
                    "value": "val_if_large",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "val_if_large",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_exact + tf.dtypes.cast(tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact), tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.math.minimum(val_if_large, num_buckets - 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_buckets - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_184": {
                "variable": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(values, [2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_264": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.q(input))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.k(input))",
                            "Call"
                        ],
                        [
                            "shape(self.k(k))",
                            "Call"
                        ],
                        [
                            "tf.concat([k_, k], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_280": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ],
                        [
                            "scores + position_bias",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_287": {
                "variable": {
                    "value": "context",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.v(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v(v))",
                            "Call"
                        ],
                        [
                            "tf.concat([v_, v], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_308": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_343": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_521": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_589": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, mask_seq_length), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "kwargs.get('attention_mask', None)",
                            "Call"
                        ],
                        [
                            "kwargs.get('attention_mask', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_728": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "DUMMY_INPUTS",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_729": {
                "variable": {
                    "value": "input_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "DUMMY_MASK",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Embedding_121": {
                "variable": {
                    "value": "self.relative_attention_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.relative_attention_num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "relative_attention_bias",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_159": {
                "variable": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_161": {
                "variable": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_172": {
                "condition": {
                    "value": "is_small",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "val_if_large",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_exact + tf.dtypes.cast(tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact), tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.math.minimum(val_if_large, num_buckets - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_253": {
                "x": {
                    "value": "use_cache",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bool(use_cache.numpy())",
                            "Call"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "kwargs.get('use_cache', True)",
                            "Call"
                        ],
                        [
                            "kwargs.get('use_cache', True)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fill_578": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, mask_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fill_581": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, encoder_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_626": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, encoder_seq_length), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(encoder_attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_62": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rsqrt_63": {
                "x": {
                    "value": "variance + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_165": {
                "x": {
                    "value": "tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "a": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.relative_attention_bias(rp_bucket)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.transpose(values, [2, 0, 1]), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_226": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, self.d_kv))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.inner_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_245": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_486": {
                "name_or_scope": {
                    "value": "self._abs_scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "auxiliary_name_scope": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_495": {
                "name_or_scope": {
                    "value": "self._abs_scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "auxiliary_name_scope": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_555": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, (-1, input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "tf.constant(DUMMY_INPUTS)",
                            "Call"
                        ],
                        [
                            "kwargs.get('inputs', None)",
                            "Call"
                        ],
                        [
                            "kwargs.get('inputs', None)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, input_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_834": {
                "name_or_scope": {
                    "value": "shared",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_955": {
                "name_or_scope": {
                    "value": "shared",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_158": {
                "x": {
                    "value": "tf.math.less(n, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_226": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, self.d_kv)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_230": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_487": {
                "name": {
                    "value": "abs_scope_name.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_496": {
                "name": {
                    "value": "abs_scope_name.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_598": {
                "variable": {
                    "value": "seq_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "less_equal_599": {
                "variable": {
                    "value": "causal_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(seq_ids[None, None, :], (batch_size, mask_seq_length, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "seq_ids[None, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_602": {
                "variable": {
                    "value": "causal_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "causal_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less_equal(tf.tile(seq_ids[None, None, :], (batch_size, mask_seq_length, 1)), seq_ids[None, :, None])",
                            "Call"
                        ],
                        [
                            "tf.cast(causal_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_158": {
                "x": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_166": {
                "x": {
                    "value": "tf.dtypes.cast(n, tf.float32) / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_600": {
                "input": {
                    "value": "seq_ids[None, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(batch_size, mask_seq_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_1115": {
                "params": {
                    "value": "layer_past_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layer_past_states",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "beam_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_166": {
                "x": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_transfo_xl.py": {
        "tensorflow": {
            "einsum_45": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "pos_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(klen - 1, -1, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(pos_seq, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_46": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_62": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_inner",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "CoreNet_._0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.drop_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dense_66": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "CoreNet_._3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.drop_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LayerNormalization_69": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "layer_norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_124": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "qkv_net",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_128": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_129": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropatt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_130": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "o_net",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_134": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "layer_norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_147": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "r_net",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_164": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_size[1] + 1, x_size[0], x_size[2], x_size[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_166": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "w_head_q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w_head_q[-qlen:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(w_head_q, (qlen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(qlen, bsz, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "w_head_k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w_head_k, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(klen, bsz, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "w_head_v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w_head_v, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(klen, bsz, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "r_head_k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r_head_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r_head_k, (rlen, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(rlen, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_204": {
                "variable": {
                    "value": "AC",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "rw_head_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w_head_q + self.r_w_bias",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w_head_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w_head_k, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_207": {
                "variable": {
                    "value": "BD",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "rr_head_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w_head_q + self.r_r_bias",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "r_head_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r_head_k, (rlen, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_220": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score * (1 - attn_mask_t) - 1e+30 * attn_mask_t",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_228": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, axis=1)",
                            "Call"
                        ],
                        [
                            "self.dropatt(attn_prob, training=training)",
                            "Call"
                        ],
                        [
                            "attn_prob * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w_head_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w_head_v, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_232": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.einsum('ijbn,jbnd->ibnd', attn_prob, w_head_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_vec, (attn_vec_sizes[0], attn_vec_sizes[1], self.n_head * self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(attn_vec_sizes[0], attn_vec_sizes[1], self.n_head * self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_409": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_566": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "band_part_567": {
                "variable": {
                    "value": "mask_u",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "band_part_568": {
                "variable": {
                    "value": "mask_dia",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_569": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_570": {
                "variable": {
                    "value": "dec_attn_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_pad, mask_u - mask_dia]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_176": {
                "variable": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_183": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "w_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_192": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "w_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_360": {
                "variable": {
                    "value": "inp_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_361": {
                "variable": {
                    "value": "emb_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape_list(inp_flat)[0], self.d_proj]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_375": {
                "variable": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([shape_list(inp_flat)[0], self.d_proj])",
                            "Call"
                        ],
                        [
                            "emb_flat + tf.scatter_nd(mask_idx, emb_i, tf.cast(shape_list(emb_flat), dtype=tf.int64))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "embed_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(inp) + [self.d_proj]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_510": {
                "variable": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "band_part_572": {
                "variable": {
                    "value": "mask_l",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_573": {
                "variable": {
                    "value": "dec_attn_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[dec_attn_mask[:, :qlen] + mask_l - mask_dia, dec_attn_mask[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_49": {
                "input": {
                    "value": "pos_emb[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, bsz, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_369": {
                "variable": {
                    "value": "emb_i",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "id,de->ie",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "emb_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "tf.einsum('id,de->ie', emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_371": {
                "variable": {
                    "value": "mask_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(mask_i)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_485": {
                "variable": {
                    "value": "empty",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.mem_len, bsz, self.d_model]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_511": {
                "input": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([mems, w], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([mems[i], hids[i]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_537": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(input_ids, perm=(1, 0))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "minimum_593": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "pos_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(klen - 1, -1, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(pos_seq, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_614": {
                "a": {
                    "value": "core_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layer_norm(inp)",
                            "Call"
                        ],
                        [
                            "self.layer_1(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_1(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_2(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_1(inp)",
                            "Call"
                        ],
                        [
                            "self.drop_1(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_2(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.drop(word_emb, training=training)",
                            "Call"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.drop(core_out, training=training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sin_46": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.einsum('i,j->ij', pos_seq, self.inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_46": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.einsum('i,j->ij', pos_seq, self.inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_372": {
                "indices": {
                    "value": "mask_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(mask_i), dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "emb_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "tf.einsum('id,de->ie', emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.cast(shape_list(emb_flat), dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_540": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs_embeds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs_embeds, perm=(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_42": {},
            "Embedding_335": {
                "input_dim": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "d_emb_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ],
                        [
                            "self.d_embed // self.div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "embeddings_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'emb_layers_._{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_367": {
                "tensor": {
                    "value": "inp_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(inp_flat >= l_idx) & (inp_flat < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_371": {
                "condition": {
                    "value": "mask_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(inp_flat >= l_idx) & (inp_flat < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_372": {
                "x": {
                    "value": "shape_list(emb_flat)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_618": {
                "a": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_622": {
                "a": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "perm": {
                    "value": "(2, 3, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_transfo_xl_utilities.py": {
        "tensorflow": {
            "range_113": {
                "variable": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[r, target]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_107": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibd,ed->ibe",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.einsum('ibd,ed->ibe', y, proj)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "proj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_nd_115": {
                "params": {
                    "value": "logprob",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([r, target], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_124": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._logit(hidden, self.out_layers[0][0], self.out_layers[0][1], self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "hidden_sizes[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.log_softmax(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(out, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_108": {
                "equation": {
                    "value": "ibd,nd->ibn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.einsum('ibd,ed->ibe', y, proj)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_123": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._logit(hidden, self.out_layers[0][0], self.out_layers[0][1], self.out_projs[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_170": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros(hidden_sizes[:2], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=target, logits=output)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + tf.scatter_nd(mask_idx, -cur_logprob, tf.cast(shape_list(loss), dtype=tf.int64))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_133": {
                "variable": {
                    "value": "mask_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_144": {
                "variable": {
                    "value": "cur_W",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur_W, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "cur_b",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur_b, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_148": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "head_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._logit(hidden, cur_W, cur_b, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_155": {
                "variable": {
                    "value": "tail_logprob",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "tail_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._logit(hidden, cur_W, cur_b, self.out_projs[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_151": {
                "variable": {
                    "value": "cur_head_logprob",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "head_logprob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.nn.log_softmax(head_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_160": {
                "variable": {
                    "value": "cur_head_logprob",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "head_logprob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.nn.log_softmax(head_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_161": {
                "variable": {
                    "value": "cur_tail_logprob",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tail_logprob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(tail_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scatter_nd_165": {
                "indices": {
                    "value": "mask_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "-cur_logprob",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.cast(shape_list(loss), dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_134": {
                "tensor": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_165": {
                "x": {
                    "value": "shape_list(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_utils.py": {
        "tensorflow": {
            "reshape_1433": {
                "variable": {
                    "value": "broad_casted_batch_dims",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.broadcast_to(tf.expand_dims(tf.range(shape[0]), axis=-1), shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1435": {
                "variable": {
                    "value": "pair_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat([broad_casted_batch_dims, tf.reshape(batch_indices, [1, -1])], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1694": {
                "variable": {
                    "value": "dynamic",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_847": {
                "variable": {
                    "value": "unfinished_sents",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_961": {
                "variable": {
                    "value": "min_sent_length",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_962": {
                "variable": {
                    "value": "max_sent_length",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1026": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beam_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([beam_scores_begin, beam_scores_end], -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros((batch_size, num_beams), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(beam_scores, (batch_size * num_beams,))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([x[0] for x in next_batch_beam], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_beams,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1264": {
                "variable": {
                    "value": "sent_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "sent_lengths_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1318": {
                "value": {
                    "value": "token_penalties",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones(shape_list(logits))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_1399": {
                "variable": {
                    "value": "sorted_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1400": {
                "variable": {
                    "value": "sorted_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "sorted_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argsort(logits, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_1404": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(sorted_logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "roll_1420": {
                "variable": {
                    "value": "sorted_indices_to_remove",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_indices_to_remove",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cumulative_probs > top_p",
                            "Compare"
                        ],
                        [
                            "tf.concat([tf.zeros_like(sorted_indices_to_remove[:, :min_tokens_to_keep]), sorted_indices_to_remove[:, min_tokens_to_keep:]], -1)",
                            "Call"
                        ],
                        [
                            "tf.roll(sorted_indices_to_remove, 1, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros_like(sorted_indices_to_remove[:, :1]), sorted_indices_to_remove[:, 1:]], -1)",
                            "Call"
                        ]
                    ]
                },
                "shift": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_1421": {
                "variable": {
                    "value": "sorted_indices_to_remove",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(sorted_indices_to_remove[:, :1]), sorted_indices_to_remove[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scatter_nd_1437": {
                "indices": {
                    "value": "pair_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.concat([broad_casted_batch_dims, tf.reshape(batch_indices, [1, -1])], 0))",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "tf.reshape(values, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(batch_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1443": {
                "condition": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "value_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_like(tensor) + value",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_1515": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.nx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1518": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bz, sl, self.nf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1578": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1579": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TruncatedNormal_1705": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fill_670": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bos_token_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bos_token_id if bos_token_id is not None else self.config.bos_token_id",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_691": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.not_equal(input_ids, pad_token_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_731": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, effective_batch_mult * num_beams, input_ids_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "broadcast_to_734": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(attention_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, effective_batch_mult * num_beams, input_ids_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_737": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(effective_batch_size * num_beams, input_ids_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_740": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.not_equal(input_ids, pad_token_id), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(input_ids)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(attention_mask, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_mask, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.concat([attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(effective_batch_size * num_beams, input_ids_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_755": {
                "variable": {
                    "value": "expanded_batch_idxs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.repeat(tf.expand_dims(tf.range(batch_size), -1), repeats=num_beams * effective_batch_mult, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_933": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, tf.expand_dims(tokens_to_add, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "broadcast_to_969": {
                "variable": {
                    "value": "broad_casted_sent_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sent_lengths, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, max_sent_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_972": {
                "variable": {
                    "value": "broad_casted_range",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.broadcast_to(tf.expand_dims(tf.range(max_sent_length), -1), [max_sent_length, batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_976": {
                "variable": {
                    "value": "decoded",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "broad_casted_range < broad_casted_sent_lengths",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones([batch_size, max_sent_length.numpy()], dtype=tf.int32) * pad_token_id",
                            "BinOp"
                        ],
                        [
                            "pad_token_id * tf.ones((num_pad_tokens,), dtype=tf.int32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_1020": {
                "variable": {
                    "value": "beam_scores_begin",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1022": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[beam_scores_begin, beam_scores_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1024": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_1057": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "next_token_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1204": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[x[0] for x in next_batch_beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1205": {
                "variable": {
                    "value": "beam_tokens",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[x[1] for x in next_batch_beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1206": {
                "variable": {
                    "value": "beam_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[x[2] for x in next_batch_beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1209": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.identity(input_ids[x, :]) for x in beam_idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_1210": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, tf.expand_dims(beam_tokens, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1294": {
                "variable": {
                    "value": "decoded",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "decoded_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_1298": {
                "variable": {
                    "value": "decoded",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "best",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_1411": {
                "variable": {
                    "value": "sorted_indices_to_remove",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(sorted_indices_to_remove[:, :min_tokens_to_keep]), sorted_indices_to_remove[:, min_tokens_to_keep:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_to_1433": {
                "input": {
                    "value": "tf.expand_dims(tf.range(shape[0]), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(batch_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1435": {
                "values": {
                    "value": "[broad_casted_batch_dims, tf.reshape(batch_indices, [1, -1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1437": {
                "tensor": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_1442": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gather_1567": {
                "params": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_1581": {
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "first_dims + [self.vocab_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_1616": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_1626": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1630": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "register_keras_serializable_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_135": {
                "value": {
                    "value": "DUMMY_INPUTS",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ones_like_693": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_848": {
                "input": {
                    "value": "input_ids[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_868": {
                "variable": {
                    "value": "next_token_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "next_token_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "next_token_logits_penalties",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ],
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_902": {
                "variable": {
                    "value": "is_token_logit_eos_token",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[True if token is eos_token_id else False for token in range(vocab_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_905": {
                "variable": {
                    "value": "eos_token_indices_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "is_token_logit_eos_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_918": {
                "variable": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.random.categorical(next_token_logits, dtype=tf.int32, num_samples=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_923": {
                "variable": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_939": {
                "variable": {
                    "value": "is_sents_unfinished_and_token_to_add_is_eos",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "unfinished_sents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ],
                        [
                            "unfinished_sents - is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(eos_in_sents, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_956": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_1050": {
                "variable": {
                    "value": "next_token_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "next_token_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "next_token_logits_penalties",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ],
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1064": {
                "variable": {
                    "value": "is_token_logit_eos_token",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[True if token is eos_token_id else False for token in range(vocab_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_1067": {
                "variable": {
                    "value": "eos_token_indices_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "is_token_logit_eos_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_batch_hypotheses, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1115": {
                "variable": {
                    "value": "_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams * vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "categorical_1117": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1121": {
                "variable": {
                    "value": "next_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random.categorical(_scores, dtype=tf.int32, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_tokens, next_scores_indices, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argsort_1124": {
                "variable": {
                    "value": "next_scores_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "next_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1125": {
                "variable": {
                    "value": "next_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "next_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_scores_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argsort(next_scores, direction='DESCENDING', axis=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1126": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "next_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random.categorical(_scores, dtype=tf.int32, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_tokens, next_scores_indices, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_scores_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argsort(next_scores, direction='DESCENDING', axis=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1134": {
                "variable": {
                    "value": "next_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams * vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "top_k_1138": {
                "variable": {
                    "value": "(next_scores, next_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_1219": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_min_1267": {
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_1267": {
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1404": {
                "logits": {
                    "value": "sorted_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(logits, sorted_indices, axis=-1, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1433": {
                "input": {
                    "value": "tf.range(shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_1516": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_691": {
                "x": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "pad_token_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_token_id if pad_token_id is not None else self.config.pad_token_id",
                            "IfExp"
                        ],
                        [
                            "eos_token_id",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_732": {
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_735": {
                "input": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.not_equal(input_ids, pad_token_id), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(input_ids)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(attention_mask, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_mask, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.concat([attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_747": {
                "shape": {
                    "value": "(effective_batch_size * num_beams, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_756": {
                "input": {
                    "value": "tf.expand_dims(tf.range(batch_size), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "num_beams * effective_batch_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_760": {
                "params": {
                    "value": "encoder_outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "expanded_batch_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.repeat(tf.expand_dims(tf.range(batch_size), -1), repeats=num_beams * effective_batch_mult, axis=1), shape=(-1,))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_951": {
                "input_tensor": {
                    "value": "unfinished_sents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ],
                        [
                            "unfinished_sents - is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_966": {
                "shape": {
                    "value": "[batch_size, max_sent_length.numpy()]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_970": {
                "input": {
                    "value": "sent_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_to_973": {
                "input": {
                    "value": "tf.expand_dims(tf.range(max_sent_length), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_sent_length, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1021": {
                "shape": {
                    "value": "(batch_size, num_beams - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_1232": {
                "input_tensor": {
                    "value": "next_scores[batch_idx, :num_beams] == tf.reshape(beam_scores, (batch_size, num_beams))[batch_idx]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "concat_1282": {
                "variable": {
                    "value": "decoded_slice",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[hypo, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1304": {
                "params": {
                    "value": "layer_past",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "beam_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([x[2] for x in next_batch_beam], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_1422": {
                "input": {
                    "value": "sorted_indices_to_remove[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_1435": {
                "tensor": {
                    "value": "batch_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_1510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_1655": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('hidden_states')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_756": {
                "input": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_882": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_896": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "categorical_919": {
                "logits": {
                    "value": "next_token_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_933": {
                "input": {
                    "value": "tokens_to_add",
                    "type": "Name",
                    "possible_values": [
                        [
                            "next_token * unfinished_sents + pad_token_id * (1 - unfinished_sents)",
                            "BinOp"
                        ],
                        [
                            "next_token",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_940": {
                "x": {
                    "value": "eos_in_sents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tokens_to_add == eos_token_id",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_973": {
                "input": {
                    "value": "tf.range(max_sent_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1086": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1100": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_1106": {
                "input": {
                    "value": "beam_scores[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size * num_beams, vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "broadcast_to_1129": {
                "input": {
                    "value": "beam_scores[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size * num_beams, vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "identity_1209": {
                "input": {
                    "value": "input_ids[x, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_1210": {
                "input": {
                    "value": "beam_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([x[1] for x in next_batch_beam], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_1269": {
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1286": {
                "variable": {
                    "value": "decoded_slice",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.range(sent_max_len, dtype=tf.int32) == sent_lengths[i]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "eos_token_id * tf.ones((sent_max_len,), dtype=tf.int32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "decoded_slice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hypo",
                            "Name"
                        ],
                        [
                            "tf.concat([hypo, padding], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.range(sent_max_len, dtype=tf.int32) == sent_lengths[i], eos_token_id * tf.ones((sent_max_len,), dtype=tf.int32), decoded_slice)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_1395": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(max(top_k, min_tokens_to_keep), logits_shape[-1])",
                            "Call"
                        ],
                        [
                            "top_k if top_k is not None else self.config.top_k",
                            "IfExp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_1413": {
                "input": {
                    "value": "sorted_indices_to_remove[:, :min_tokens_to_keep]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_1669": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('hidden_states')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cls_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else None",
                            "IfExp"
                        ],
                        [
                            "inputs.get('cls_index', None)",
                            "Call"
                        ],
                        [
                            "tf.fill(hidden_shape[:-2], hidden_shape[-2] - 1)",
                            "Call"
                        ],
                        [
                            "cls_index[..., tf.newaxis]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "len(hidden_shape) - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_1670": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._generate_beam_search(input_ids, cur_len=cur_len, max_length=max_length, min_length=min_length, do_sample=do_sample, early_stopping=early_stopping, temperature=temperature, top_k=top_k, top_p=top_p, repetition_penalty=repetition_penalty, no_repeat_ngram_size=no_repeat_ngram_size, bad_words_ids=bad_words_ids, bos_token_id=bos_token_id, pad_token_id=pad_token_id, eos_token_id=eos_token_id, decoder_start_token_id=decoder_start_token_id, batch_size=effective_batch_size, num_return_sequences=num_return_sequences, length_penalty=length_penalty, num_beams=num_beams, vocab_size=vocab_size, encoder_outputs=encoder_outputs, attention_mask=attention_mask, use_cache=use_cache)",
                            "Call"
                        ],
                        [
                            "self._generate_no_beam_search(input_ids, cur_len=cur_len, max_length=max_length, min_length=min_length, do_sample=do_sample, temperature=temperature, top_k=top_k, top_p=top_p, repetition_penalty=repetition_penalty, no_repeat_ngram_size=no_repeat_ngram_size, bad_words_ids=bad_words_ids, bos_token_id=bos_token_id, pad_token_id=pad_token_id, eos_token_id=eos_token_id, decoder_start_token_id=decoder_start_token_id, batch_size=effective_batch_size, vocab_size=vocab_size, encoder_outputs=encoder_outputs, attention_mask=attention_mask, use_cache=use_cache)",
                            "Call"
                        ],
                        [
                            "hidden_states[:, -1]",
                            "Subscript"
                        ],
                        [
                            "hidden_states[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.first_dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(hidden_states, axis=1)",
                            "Call"
                        ],
                        [
                            "self.summary(output)",
                            "Call"
                        ],
                        [
                            "self.activation(output)",
                            "Call"
                        ],
                        [
                            "self.last_dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "tf.gather(hidden_states, cls_index, batch_dims=len(hidden_shape) - 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=len(hidden_shape) - 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "len(hidden_shape) - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_957": {
                "shape": {
                    "value": "(shape_list(attention_mask)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_1190": {
                "input_tensor": {
                    "value": "next_scores[batch_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_1220": {
                "shape": {
                    "value": "(shape_list(attention_mask)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1235": {
                "tensor": {
                    "value": "beam_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([beam_scores_begin, beam_scores_end], -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros((batch_size, num_beams), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(beam_scores, (batch_size * num_beams,))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([x[0] for x in next_batch_beam], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_1281": {
                "shape": {
                    "value": "(num_pad_tokens,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_1659": {
                "variable": {
                    "value": "cls_index",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "hidden_shape[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_1178": {
                "input": {
                    "value": "input_ids[effective_beam_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_1233": {
                "tensor": {
                    "value": "beam_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([beam_scores_begin, beam_scores_end], -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros((batch_size, num_beams), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(beam_scores, (batch_size * num_beams,))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([x[0] for x in next_batch_beam], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_1287": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1288": {
                "shape": {
                    "value": "(sent_max_len,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_xlm.py": {
        "tensorflow": {
            "constant_50": {
                "variable": {
                    "value": "out[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "np.sin(position_enc[:, 0::2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "out[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "np.cos(position_enc[:, 1::2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_90": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding_mask",
                            "Name"
                        ],
                        [
                            "tf.math.less(alen, lengths[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ],
                        [
                            "mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_91": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less_equal(tf.tile(alen[tf.newaxis, tf.newaxis, :], (bs, slen, 1)), alen[tf.newaxis, :, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.cast(attn_mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_75": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "alen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(slen)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lengths[:, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "less_equal_79": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(alen[tf.newaxis, tf.newaxis, :], (bs, slen, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alen[tf.newaxis, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assert_equal_87": {
                "x": {
                    "value": "shape_list(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_108": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "q_lin",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_109": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "k_lin",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_110": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "v_lin",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_111": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "out_lin",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.k_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.k_lin(k))",
                            "Call"
                        ],
                        [
                            "tf.concat([k_, k], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding_mask",
                            "Name"
                        ],
                        [
                            "tf.math.less(alen, lengths[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ],
                        [
                            "mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "mask_reshape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(bs, 1, qlen, klen) if len(shape_list(mask)) == 3 else (bs, 1, 1, klen)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "scores - 1e+30 * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_175": {
                "variable": {
                    "value": "context",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "tf.concat([v_, v], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_187": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_hidden",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_188": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_190": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_234": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_235": {
                "variable": {
                    "value": "self.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_237": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.embed_init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_256": {
                "variable": {
                    "value": "self.layer_norm_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm_emb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_479": {
                "variable": {
                    "value": "inputs_list",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_480": {
                "variable": {
                    "value": "attns_list",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_667": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, mask_token]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_778": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_820": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.sequence_summary(output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_821": {
                "variable": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_822": {
                "variable": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_247": {
                "variable": {
                    "value": "self.lang_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.n_langs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.embed_init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lang_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assert_equal_360": {
                "x": {
                    "value": "shape_list(lengths)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(lengths)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_375": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(slen)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_482": {
                "variable": {
                    "value": "langs_list",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "erf_61": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_80": {
                "input": {
                    "value": "alen[tf.newaxis, tf.newaxis, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(bs, slen, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_137": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, dim_per_head))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads * dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_189": {
                "activation": {
                    "value": "gelu",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_sum_353": {
                "variable": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.not_equal(input_ids, self.pad_index), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_355": {
                "variable": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[slen] * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_378": {
                "x": {
                    "value": "shape_list(position_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_equal_384": {
                "x": {
                    "value": "shape_list(langs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_666": {
                "shape": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_156": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_157": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_272": {
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'layer_norm1_._{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNormalization_281": {
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'layer_norm2_._{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_375": {},
            "ones_like_670": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([inputs, mask_token], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_61": {
                "x": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_353": {
                "x": {
                    "value": "tf.not_equal(input_ids, self.pad_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_353": {
                "x": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "input_ids[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_tf_xlnet.py": {
        "tensorflow": {
            "Activation_60": {
                "activation": {
                    "value": "gelu",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Activation_62": {
                "activation": {
                    "value": "swish",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LayerNormalization_83": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x_size[1], x_size[0], x_size[2], x_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_138": {
                "variable": {
                    "value": "ac",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_w_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "k_head_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.k)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.k)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_141": {
                "variable": {
                    "value": "bd",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_r_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "k_head_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', r, self.r)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', r, self.r)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_161": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 65500 * attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * attn_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_170": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, axis=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob, training=training)",
                            "Call"
                        ],
                        [
                            "attn_prob * head_mask",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "v_head_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.v)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.v)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_182": {
                "variable": {
                    "value": "attn_out",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.einsum('ijbn,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core([q_head_h, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_h, head_mask], training=training)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_292": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_293": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_296": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_299": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_321": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_377": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_413": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_416": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_417": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_pad, mask_u - mask_dia]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_437": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "pos_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "inv_freq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 / 10000 ** (freq_seq / self.d_model)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_438": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_448": {
                "variable": {
                    "value": "freq_seq",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_859": {
                "variable": {
                    "value": "dummy_token",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_860": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, dummy_token]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_864": {
                "variable": {
                    "value": "perm_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, sequence_length, sequence_length - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_865": {
                "variable": {
                    "value": "perm_mask_seq_end",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, sequence_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_866": {
                "variable": {
                    "value": "perm_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[perm_mask, perm_mask_seq_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_869": {
                "variable": {
                    "value": "target_mapping",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, 1, sequence_length - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_870": {
                "variable": {
                    "value": "target_mapping_seq_end",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_871": {
                "variable": {
                    "value": "target_mapping",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_mapping, target_mapping_seq_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_952": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_proj",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_1013": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_1070": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_1118": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lm_loss(hidden_state)",
                            "Call"
                        ],
                        [
                            "self.logits_proj(output)",
                            "Call"
                        ],
                        [
                            "self.classifier(output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1119": {
                "variable": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1120": {
                "variable": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_148": {
                "variable": {
                    "value": "ef",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_s_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.seg_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_149": {
                "variable": {
                    "value": "ef",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->ijbn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "seg_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :])), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg_mat, 2, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "ef",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.einsum('ibnd,snd->ibns', q_head + self.r_s_bias, self.seg_embed)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ijbs,ibns->ijbn', seg_mat, ef)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_204": {
                "variable": {
                    "value": "k_head_h",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_207": {
                "variable": {
                    "value": "v_head_h",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_210": {
                "variable": {
                    "value": "k_head_r",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_214": {
                "variable": {
                    "value": "q_head_h",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_229": {
                "variable": {
                    "value": "q_head_g",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_264": {
                "variable": {
                    "value": "q_head_h",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_265": {
                "variable": {
                    "value": "k_head_h",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_266": {
                "variable": {
                    "value": "v_head_h",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_269": {
                "variable": {
                    "value": "k_head_r",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_420": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[ret[:, :qlen] + mask_l - mask_dia, ret[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_433": {
                "input": {
                    "value": "new_mem",
                    "type": "Name",
                    "possible_values": [
                        [
                            "curr_out[-self.mem_len:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([prev_mem, curr_out], 0)[-self.mem_len:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_442": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)], axis=-1)",
                            "Call"
                        ],
                        [
                            "pos_emb[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pos_emb, [1, bsz, 1])",
                            "Call"
                        ],
                        [
                            "self.positional_embedding(fwd_pos_seq, inv_freq, bsz)",
                            "Call"
                        ],
                        [
                            "tf.concat([fwd_pos_emb, bwd_pos_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "self.relative_positional_encoding(qlen, klen, bsz=bsz, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "self.dropout(pos_emb, training=training)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, bsz, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_450": {
                "variable": {
                    "value": "freq_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "freq_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, self.d_model, 2.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(freq_seq, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "range_463": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "range_464": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "concat_483": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_485": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_589": {
                "variable": {
                    "value": "mems_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape_list(data_mask)[0], mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_590": {
                "variable": {
                    "value": "data_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems_mask, data_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_597": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_601": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([qlen, mlen], dtype=dtype_float), non_tgt_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_602": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask + non_tgt_mask[:, :, None, None] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tile_613": {
                "variable": {
                    "value": "word_emb_q",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[shape_list(target_mapping)[0], bsz, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_624": {
                "variable": {
                    "value": "mem_pad",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_625": {
                "variable": {
                    "value": "cat_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[mem_pad, token_type_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_628": {
                "variable": {
                    "value": "seg_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_629": {
                "variable": {
                    "value": "seg_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "seg_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :])), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg_mat, 2, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tanh_51": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_199": {
                "variable": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_233": {
                "variable": {
                    "value": "q_head_g",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "tf.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "target_mapping",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.zeros((effective_batch_size, 1, sequence_length - 1), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([target_mapping, target_mapping_seq_end], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_241": {
                "variable": {
                    "value": "attn_vec_g",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_vec_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.rel_attn_core([q_head_g, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_g, head_mask], training=training)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core([q_head_g, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_g, head_mask], training=training)",
                            "Call"
                        ],
                        [
                            "tf.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "target_mapping",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.zeros((effective_batch_size, 1, sequence_length - 1), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([target_mapping, target_mapping_seq_end], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_259": {
                "variable": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_467": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "fwd_pos_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_468": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "bwd_pos_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(-beg, -end, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(bwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(bwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_471": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "fwd_pos_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_472": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "bwd_pos_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(-beg, -end, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(bwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(bwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_487": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "fwd_pos_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_489": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "fwd_pos_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_542": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(input_ids, perm=(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_550": {
                "a": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[5] if len(inputs) > 5 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(token_type_ids, perm=(1, 0)) if token_type_ids is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_551": {
                "a": {
                    "value": "input_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[6] if len(inputs) > 6 else input_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('input_mask', input_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(input_mask, perm=(1, 0)) if input_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "1.0 - tf.cast(attention_mask, dtype=dtype_float)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_552": {
                "a": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(attention_mask, perm=(1, 0)) if attention_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_553": {
                "a": {
                    "value": "perm_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else perm_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('perm_mask', perm_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(perm_mask, perm=(1, 2, 0)) if perm_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.zeros((effective_batch_size, sequence_length, sequence_length - 1), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([perm_mask, perm_mask_seq_end], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_554": {
                "a": {
                    "value": "target_mapping",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.zeros((effective_batch_size, 1, sequence_length - 1), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([target_mapping, target_mapping_seq_end], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_682": {
                "a": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layer_norm(attn_out)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "self.layer_1(output)",
                            "Call"
                        ],
                        [
                            "self.activation_function(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(output + inp)",
                            "Call"
                        ],
                        [
                            "self.dropout(output_g if output_g is not None else output_h, training=training)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.sequence_summary(output)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_431": {
                "values": {
                    "value": "[prev_mem, curr_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_438": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_438": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_545": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs_embeds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[8] if len(inputs) > 8 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs_embeds, perm=(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_577": {
                "x": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(attention_mask, perm=(1, 0)) if attention_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "eye_600": {
                "num_rows": {
                    "value": "qlen",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "logical_not_628": {
                "x": {
                    "value": "tf.equal(token_type_ids[:, None], cat_ids[None, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_601": {
                "shape": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "equal_628": {
                "x": {
                    "value": "token_type_ids[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "cat_ids[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_694": {
                "a": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "perm": {
                    "value": "(2, 3, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_689": {
                "a": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_691": {
                "a": {
                    "value": "hs",
                    "type": "Name",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_51": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_transfo_xl.py": {
        "tensorflow": {
            "list_variables_124": {
                "variable": {
                    "value": "init_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "load_variable_128": {
                "variable": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "ger_176": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "self.CoreNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_inner)",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_201": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "layer_norm_epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_247": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_249": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_250": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_251": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_253": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "layer_norm_epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "zero_pad_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x.size(0), 1) + x.size()[2:]",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "x_padded",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_312": {
                "variable": {
                    "value": "AC",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_315": {
                "variable": {
                    "value": "BD",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rr_head_q, r_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_339": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_347": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_405": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_406": {
                "variable": {
                    "value": "self.emb_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_569": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_584": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_260": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_261": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_291": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_300": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_426": {
                "variable": {
                    "value": "emb_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp_flat.size(0), self.d_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_581": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_582": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_763": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_194": {
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_inner",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_196": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "d_inner",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_198": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_323": {
                "input": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_422": {
                "variable": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.emb_layers[0](inp)",
                            "Call"
                        ],
                        [
                            "F.linear(embed, self.emb_projs[0])",
                            "Call"
                        ],
                        [
                            "emb_flat.view(embed_shape)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_438": {
                "variable": {
                    "value": "emb_i",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_641": {
                "variable": {
                    "value": "empty",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mem_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_661": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_667": {
                "variable": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_408": {
                "num_embeddings": {
                    "value": "n_token",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "sparse": {
                    "value": "sample_softmax > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "triu_756": {
                "input": {
                    "value": "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_172": {
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "Name",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_410": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_415": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_416": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_754": {
                "input": {
                    "value": "all_ones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_754": {
                "input": {
                    "value": "all_ones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-mask_shift_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_835": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[0].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_840": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[i].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_xlnet.py": {
        "tensorflow": {
            "list_variables_137": {
                "variable": {
                    "value": "init_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "load_variable_141": {
                "variable": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Parameter_208": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_209": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_210": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_211": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_212": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_214": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_215": {
                "variable": {
                    "value": "self.r_s_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_217": {
                "variable": {
                    "value": "self.seg_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(2, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_220": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_234": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_248": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_257": {
                "variable": {
                    "value": "ac",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->bnij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_w_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_260": {
                "variable": {
                    "value": "bd",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->bnij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_r_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_280": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 65500 * torch.einsum('ijbn->bnij', attn_mask)",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * torch.einsum('ijbn->bnij', attn_mask)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_288": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnij,jbnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=3)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * torch.einsum('ijbn->bnij', head_mask)",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "einsum_298": {
                "variable": {
                    "value": "attn_out",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('bnij,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_h, head_mask=head_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_406": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_408": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_430": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_583": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_584": {
                "variable": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, 1, config.d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_585": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[XLNetLayer(config) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_586": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_618": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "triu_619": {
                "variable": {
                    "value": "mask_up",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_620": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_621": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask_pad, mask_up]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_643": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_seq",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_644": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(sinusoid_inp), torch.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_654": {
                "variable": {
                    "value": "freq_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_934": {
                "variable": {
                    "value": "self.lm_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_945": {
                "variable": {
                    "value": "dummy_token",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_946": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, dummy_token]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_950": {
                "variable": {
                    "value": "perm_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, sequence_length, sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_956": {
                "variable": {
                    "value": "target_mapping",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, 1, sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1090": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1195": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1304": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_1417": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_267": {
                "variable": {
                    "value": "ef",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_s_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_268": {
                "variable": {
                    "value": "ef",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->bnij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "seg_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_317": {
                "variable": {
                    "value": "k_head_h",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_320": {
                "variable": {
                    "value": "v_head_h",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_323": {
                "variable": {
                    "value": "k_head_r",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "einsum_327": {
                "variable": {
                    "value": "q_head_h",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "einsum_342": {
                "variable": {
                    "value": "q_head_g",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "einsum_377": {
                "variable": {
                    "value": "q_head_h",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "einsum_378": {
                "variable": {
                    "value": "k_head_h",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_379": {
                "variable": {
                    "value": "v_head_h",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_382": {
                "variable": {
                    "value": "k_head_r",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tril_623": {
                "variable": {
                    "value": "mask_lo",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_624": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret[:, :qlen] + mask_lo, ret[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_667": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "Name",
                    "possible_values": []
                },
                "end": {
                    "value": "end",
                    "type": "Name",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_668": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "-beg",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-end",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_681": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_683": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "Name",
                    "possible_values": []
                },
                "end": {
                    "value": "end",
                    "type": "Name",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_838": {
                "variable": {
                    "value": "seg_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seg_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1071": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1277": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1399": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1520": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1654": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1673": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_logits.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1675": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1679": {
                "variable": {
                    "value": "start_states",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1687": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_logits.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_1689": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_1695": {
                "variable": {
                    "value": "start_states",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_234": {
                "start": {
                    "value": "klen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_248": {
                "start": {
                    "value": "klen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_346": {
                "variable": {
                    "value": "q_head_g",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "torch.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_354": {
                "variable": {
                    "value": "attn_vec_g",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "torch.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_372": {
                "variable": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_655": {
                "input": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                },
                "exponent": {
                    "value": "freq_seq / self.d_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_794": {
                "variable": {
                    "value": "mems_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[data_mask.shape[0], mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_795": {
                "variable": {
                    "value": "data_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems_mask, data_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_807": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([qlen, mlen]).to(attn_mask), non_tgt_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_831": {
                "variable": {
                    "value": "mem_pad",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_832": {
                "variable": {
                    "value": "cat_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem_pad, token_type_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_1174": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1177": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_1282": {
                "variable": {
                    "value": "active_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1662": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_285": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "head_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[None] * self.n_layer",
                            "BinOp"
                        ],
                        [
                            "head_mask.unsqueeze(0).unsqueeze(0).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "head_mask.expand(self.n_layer, -1, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "head_mask.to(dtype=next(self.parameters()).dtype)",
                            "Call"
                        ],
                        [
                            "head_mask.unsqueeze(1).unsqueeze(1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_291": {
                "equation": {
                    "value": "bnij->ijbn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=3)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * torch.einsum('ijbn->bnij', head_mask)",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cat_637": {
                "tensors": {
                    "value": "[prev_mem, curr_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_644": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_644": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_805": {
                "n": {
                    "value": "qlen",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_1283": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_275": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_277": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_807": {
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/optimization_tf.py": {
        "tensorflow": {
            "PolynomialDecay_64": {
                "variable": {
                    "value": "lr_schedule",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "init_lr",
                    "type": "Name",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "Name",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "end_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_120": {
                "variable": {
                    "value": "apply_state[var_device, var_dtype][weight_decay_rate]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.weight_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "adam_weight_decay_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_40": {
                "variable": {
                    "value": "global_step_float",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_41": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self.warmup_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_206": {
                "variable": {
                    "value": "self._accum_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "synchronization": {
                    "value": "tf.VariableSynchronization.ON_READ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "aggregation": {
                    "value": "tf.VariableAggregation.ONLY_FIRST_REPLICA",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_37": {
                "name": {
                    "value": "self.name or 'WarmUp'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cond_44": {
                "pred": {
                    "value": "global_step_float < warmup_steps_float",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : warmup_learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.decay_schedule_fn(step)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'AdamWeightDecay'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "control_dependencies_153": {
                "control_inputs": {
                    "value": "[decay]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_159": {
                "control_inputs": {
                    "value": "[decay]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_43": {
                "x": {
                    "value": "warmup_percent_done",
                    "type": "Name",
                    "possible_values": [
                        [
                            "global_step_float / warmup_steps_float",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.power",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_207": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_255": {
                "input": {
                    "value": "gradient",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._gradients",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Variable_228": {
                "initial_value": {
                    "value": "tf.zeros_like(gradient)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "synchronization": {
                    "value": "tf.VariableSynchronization.ON_READ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "aggregation": {
                    "value": "tf.VariableAggregation.ONLY_FIRST_REPLICA",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_229": {
                "input": {
                    "value": "gradient",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._gradients",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/pipelines.py": {
        "tensorflow": {
            "where_795": {
                "variable": {
                    "value": "masked_index",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "input_ids == self.tokenizer.mask_token_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_797": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[i, masked_index, :]",
                            "Subscript"
                        ],
                        [
                            "outputs[i, masked_index, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "top_k_798": {
                "variable": {
                    "value": "topk",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits.softmax(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.topk",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_441": {
                "device_name": {
                    "value": "'/CPU:0' if self.device == -1 else '/device:GPU:{}'.format(self.device)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "constant_1181": {
                "value": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_1422": {
                "input": {
                    "value": "inputs['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_1541": {
                "input": {
                    "value": "inputs['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_389": {
                "type": {
                    "value": "'cpu' if device < 0 else 'cuda:{}'.format(device)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_device_445": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_488": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_908": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1187": {
                "data": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/tokenization_utils.py": {
        "tensorflow": {
            "constant_1994": {
                "variable": {
                    "value": "encoded_inputs[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['input_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1997": {
                "variable": {
                    "value": "encoded_inputs[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['token_type_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_2000": {
                "variable": {
                    "value": "encoded_inputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['attention_mask']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_2544": {
                "variable": {
                    "value": "stack",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "stack",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[e for item in tokens for e in item[key]]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(stack, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(stack, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_1795": {
                "variable": {
                    "value": "batch_outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_2350": {
                "variable": {
                    "value": "encoding_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_2003": {
                "variable": {
                    "value": "encoded_inputs[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['input_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2006": {
                "variable": {
                    "value": "encoded_inputs[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['token_type_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2009": {
                "variable": {
                    "value": "encoded_inputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['attention_mask']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_2546": {
                "variable": {
                    "value": "stack",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stack",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[e for item in tokens for e in item[key]]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(stack, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(stack, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1803": {
                "variable": {
                    "value": "batch_outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_2352": {
                "variable": {
                    "value": "encoding_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/trainer_tf.py": {
        "tensorflow": {
            "create_file_writer_88": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.args.logging_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Checkpoint_154": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CheckpointManager_156": {
                "variable": {
                    "value": "self.model.ckpt_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(optimizer=self.optimizer, model=self.model)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "PREFIX_CHECKPOINT_DIR",
                    "type": "Name",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "max_to_keep",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_374": {
                "variable": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": []
                },
                "ys": {
                    "value": "per_example_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.model.trainable_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_73": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "{'class_name': self.args.loss_name, 'config': {'from_logits': True, 'reduction': tf.keras.losses.Reduction.NONE}}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "convert_to_tensor_194": {
                "variable": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "tf.convert_to_tensor(step, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ],
                        [
                            "iterations.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_196": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "self.loss(labels, reduced_logits)",
                            "Call"
                        ],
                        [
                            "loss + sum(self.model.losses) * (1.0 / self.args.n_gpu)",
                            "BinOp"
                        ],
                        [
                            "(start_loss + end_loss) / 2.0",
                            "BinOp"
                        ],
                        [
                            "self.loss(labels, logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_398": {
                "variable": {
                    "value": "reduced_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(logits, (-1, shape_list(logits)[2]))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "active_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, (-1,)) != -1",
                            "Compare"
                        ]
                    ]
                }
            },
            "boolean_mask_399": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(labels, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "active_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, (-1,)) != -1",
                            "Compare"
                        ]
                    ]
                }
            },
            "get_80": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "{'class_name': self.args.loss_name, 'config': {'reduction': tf.keras.losses.Reduction.NONE}}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_133": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "{'class_name': self.args.optimizer_name, 'config': {'learning_rate': self.args.learning_rate, 'epsilon': self.args.adam_epsilon}}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "trace_on_255": {
                "graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "profiler": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_337": {
                "t": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-self.args.max_grad_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_141": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "{'class_name': self.args.optimizer_name, 'config': {'learning_rate': self.args.learning_rate}}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_335": {
                "x": {
                    "value": "gradient_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gradient_accumulator.step * self.args.strategy.num_replicas_in_sync",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "gradient.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_376": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_397": {
                "tensor": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tf.reshape(labels, (-1,)), active_loss)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_398": {
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(features, training=training)[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(features, training=training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, shape_list(logits)[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_399": {
                "tensor": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tf.reshape(labels, (-1,)), active_loss)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_95": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_282": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "training_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._training_steps()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "tf.convert_to_tensor(step, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ],
                        [
                            "iterations.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_export_286": {
                "name": {
                    "value": "training",
                    "type": "Constant",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "tf.convert_to_tensor(step, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ],
                        [
                            "iterations.numpy()",
                            "Call"
                        ]
                    ]
                },
                "profiler_outdir": {
                    "value": "self.args.logging_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_305": {
                "name": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "tf.convert_to_tensor(step, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ],
                        [
                            "iterations.numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/training_args_tf.py": {
        "tensorflow": {
            "list_physical_devices_48": {
                "variable": {
                    "value": "gpus",
                    "type": "Name",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "OneDeviceStrategy_51": {
                "variable": {
                    "value": "strategy",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TPUStrategy_65": {
                "variable": {
                    "value": "strategy",
                    "type": "Name",
                    "possible_values": []
                },
                "tpu_cluster_resolver": {
                    "value": "tpu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(self.tpu_name)",
                            "Call"
                        ],
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver()",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUClusterResolver_55": {
                "variable": {
                    "value": "tpu",
                    "type": "Name",
                    "possible_values": []
                },
                "tpu": {
                    "value": "self.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_57": {
                "variable": {
                    "value": "tpu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "experimental_connect_to_cluster_62": {
                "cluster_spec_or_resolver": {
                    "value": "tpu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(self.tpu_name)",
                            "Call"
                        ],
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver()",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_tpu_system_63": {
                "enable_coordination_service": {
                    "value": "tpu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(self.tpu_name)",
                            "Call"
                        ],
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver()",
                            "Call"
                        ]
                    ]
                }
            },
            "OneDeviceStrategy_67": {
                "variable": {
                    "value": "strategy",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "OneDeviceStrategy_69": {
                "variable": {
                    "value": "strategy",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "/gpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MirroredStrategy_72": {
                "variable": {
                    "value": "strategy",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/modeling_bert_prun.py": {
        "tensorflow": {
            "list_variables_77": {
                "variable": {
                    "value": "init_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_82": {
                "variable": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_129": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_157": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_158": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_163": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_209": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_210": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_211": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_213": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_246": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_263": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_276": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.prun_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_278": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_297": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_336": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.prun_intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_351": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.prun_intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_353": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_407": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_463": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_464": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_478": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_499": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_501": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_525": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_536": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_1115": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1116": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1211": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1212": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_1312": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1313": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1410": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_134": {
                "input": {
                    "value": "nn.functional.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_152": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_154": {
                "variable": {
                    "value": "self.word_embeddings1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.word_embeddings2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.emb_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_175": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_734": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_736": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_876": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_982": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_990": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1007": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, attention_mask.new_zeros((attention_mask.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_1011": {
                "variable": {
                    "value": "dummy_token",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1014": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, dummy_token]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1097": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1294": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1383": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1504": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_134": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_253": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_501": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_750": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_hidden_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_1191": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1194": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_1388": {
                "variable": {
                    "value": "active_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_304": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1389": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/transformer/modeling.py": {
        "tensorflow": {
            "list_variables_70": {
                "variable": {
                    "value": "init_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_75": {
                "variable": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_123": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_180": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_212": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_337": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_339": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_341": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_347": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_351": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_379": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_380": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_381": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_383": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_401": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_415": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_439": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_441": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_478": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_506": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_525": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_526": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_544": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_565": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_569": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_592": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_604": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_935": {
                "variable": {
                    "value": "self.fit_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fit_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1094": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1095": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_1124": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1125": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_1126": {
                "variable": {
                    "value": "self.fit_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fit_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_137": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_223": {
                "variable": {
                    "value": "pad_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*pad_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_layer, pad_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_355": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_454": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_457": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "intermediate_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3072",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_473": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_476": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "intermediate_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3072",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_696": {
                "variable": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(pretrained_model_name_or_path, WEIGHTS_NAME)",
                            "Call"
                        ],
                        [
                            "os.path.join(pretrained_model_name_or_path, TF_WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_812": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_814": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_912": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1011": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1081": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1112": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "erf_133": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_206": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_409": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_569": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_920": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_1108": {
                "input": {
                    "value": "torch.cat((a_pooled_output, b_pooled_output, torch.abs(a_pooled_output - b_pooled_output)), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1135": {
                "input": {
                    "value": "pooled_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_states[-1][:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.dense(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.activation(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.pooler(encoded_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1108": {
                "tensors": {
                    "value": "(a_pooled_output, b_pooled_output, torch.abs(a_pooled_output - b_pooled_output))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_151": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_158": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1109": {
                "input": {
                    "value": "a_pooled_output - b_pooled_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/transformer/modeling_prun.py": {
        "tensorflow": {
            "list_variables_70": {
                "variable": {
                    "value": "init_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_75": {
                "variable": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_123": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_180": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_212": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_350": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_352": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_359": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_363": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_395": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_396": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_397": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_399": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_417": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_431": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_455": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.prun_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_457": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_494": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_522": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_541": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_542": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_560": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_581": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_585": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_608": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_620": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_951": {
                "variable": {
                    "value": "self.fit_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fit_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_1110": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1111": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_1140": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1141": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sigmoid_137": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_223": {
                "variable": {
                    "value": "pad_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*pad_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "context_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_layer, pad_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_344": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_347": {
                "variable": {
                    "value": "self.word_embeddings1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.word_embeddings2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.emb_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_367": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_470": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.prun_intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_473": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "intermediate_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3072",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_489": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.prun_intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_492": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "intermediate_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3072",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_712": {
                "variable": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(pretrained_model_name_or_path, WEIGHTS_NAME)",
                            "Call"
                        ],
                        [
                            "os.path.join(pretrained_model_name_or_path, TF_WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_828": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_830": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_928": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1027": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1097": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1128": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "erf_133": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_206": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_425": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_585": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_936": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_1124": {
                "input": {
                    "value": "torch.cat((a_pooled_output, b_pooled_output, torch.abs(a_pooled_output - b_pooled_output)), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1151": {
                "input": {
                    "value": "pooled_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_states[-1][:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.dense(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.activation(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.pooler(encoded_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1124": {
                "tensors": {
                    "value": "(a_pooled_output, b_pooled_output, torch.abs(a_pooled_output - b_pooled_output))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_151": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_158": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1125": {
                "input": {
                    "value": "a_pooled_output - b_pooled_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "KD/pruning.py": {
        "torch": {
            "load_63": {
                "variable": {
                    "value": "taylor_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "taylor_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_166": {
                "variable": {
                    "value": "model.bert.encoder.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[model.bert.encoder.layer[i] for i in range(args.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "topk_42": {
                "variable": {
                    "value": "topk",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(self.score).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "nparams_toprune",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prune._compute_nparams_toprune(self.prun_ratio, tensor_size)",
                            "Call"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_73": {
                "variable": {
                    "value": "attn_score_chunks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "score_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score_attn_output.sum(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([chunk.sum() for chunk in attn_score_chunks])",
                            "Call"
                        ],
                        [
                            "attn_scores[layer_id]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "score_attn",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[chunk.sum() for chunk in attn_score_chunks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "manual_seed_158": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_43": {
                "input": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "new_word_emb1",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.dot(u[:, :emb_hidden_dim], s[:emb_hidden_dim, :emb_hidden_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "new_word_emb2",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v[:emb_hidden_dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_88": {
                "variable": {
                    "value": "model.bert.embeddings.word_embeddings1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_hidden_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "model.bert.embeddings.word_embeddings2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_hidden_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_104": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score_attn_output.sum(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([chunk.sum() for chunk in attn_score_chunks])",
                            "Call"
                        ],
                        [
                            "attn_scores[layer_id]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "keep_heads",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "split_106": {
                "variable": {
                    "value": "weight_chunks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(attn_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_107": {
                "variable": {
                    "value": "bias_chunks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "module.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(attn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "module.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_chunks[i] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_chunks[i] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_111": {
                "variable": {
                    "value": "weight_chunks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(attn_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_chunks[i] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remove_121": {
                "module": {
                    "value": "module",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remove_122": {
                "module": {
                    "value": "module",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remove_127": {
                "module": {
                    "value": "module",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "KD/pruning_one_step.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "taylor_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "taylor_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_169": {
                "variable": {
                    "value": "model.bert.encoder.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[model.bert.encoder.layer[i] for i in range(args.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "topk_39": {
                "variable": {
                    "value": "topk",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(self.score).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "nparams_toprune",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prune._compute_nparams_toprune(self.prun_ratio, tensor_size)",
                            "Call"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_70": {
                "variable": {
                    "value": "attn_score_chunks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "score_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score_attn_output.sum(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([chunk.sum() for chunk in attn_score_chunks])",
                            "Call"
                        ],
                        [
                            "attn_scores[layer_id]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "score_attn",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[chunk.sum() for chunk in attn_score_chunks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "manual_seed_157": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_40": {
                "input": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "new_word_emb1",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.dot(u[:, :emb_hidden_dim], s[:emb_hidden_dim, :emb_hidden_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "new_word_emb2",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v[:emb_hidden_dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_85": {
                "variable": {
                    "value": "model.bert.embeddings.word_embeddings1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_hidden_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "model.bert.embeddings.word_embeddings2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_hidden_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_101": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score_attn_output.sum(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([chunk.sum() for chunk in attn_score_chunks])",
                            "Call"
                        ],
                        [
                            "attn_scores[layer_id]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "keep_heads",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "split_103": {
                "variable": {
                    "value": "weight_chunks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(attn_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_104": {
                "variable": {
                    "value": "bias_chunks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "module.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(attn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "module.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_chunks[i] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_chunks[i] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_108": {
                "variable": {
                    "value": "weight_chunks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(attn_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_chunks[i] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remove_118": {
                "module": {
                    "value": "module",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remove_119": {
                "module": {
                    "value": "module",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remove_124": {
                "module": {
                    "value": "module",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "KD/transformer/optimization.py": {
        "torch": {
            "full_like_235": {
                "variable": {
                    "value": "self.data_accumulator_grad[p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_like_264": {
                "variable": {
                    "value": "self.data_accumulator_grad[p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_270": {
                "variable": {
                    "value": "taylor[p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.data_accumulator_grad[p].mul(p.data).div(total_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_300": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_302": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__309": {
                "parameters": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/activations.py": {
        "torch": {
            "sigmoid_12": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "erf_22": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_29": {
                "input": {
                    "value": "math.sqrt(2.0 / math.pi) * (x + 0.044715 * torch.pow(x, 3.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_39": {
                "input": {
                    "value": "x * 0.7978845608 * (1.0 + 0.044715 * x * x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_29": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "exponent": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_albert_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_bart_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "load_75": {
                "variable": {
                    "value": "sd",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "hub_interface",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/fairseq",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "bart.large.cnn",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "bart",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/fairseq",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "eq_110": {
                "input": {
                    "value": "tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bart.encode(SAMPLE_TEXT).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tokens2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BartTokenizer.from_pretrained(hf_checkpoint_name).encode(SAMPLE_TEXT, return_tensors='pt').unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_82": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_bert_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_dialogpt_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "load_16": {
                "variable": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.dialogpt_path, f'{MODEL}_ft.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_19": {
                "obj": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_electra_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_48": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_gpt2_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_marian_to_pytorch.py": {
        "torch": {
            "tensor_31": {
                "variable": {
                    "value": "sd[converter[stripped]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opus_dict[k].T",
                            "Attribute"
                        ],
                        [
                            "ln.split('(')[-1][:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_31": {
                "variable": {
                    "value": "sd[converter[stripped]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_461": {
                "variable": {
                    "value": "wemb_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.wemb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_462": {
                "variable": {
                    "value": "bias_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.final_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_470": {
                "variable": {
                    "value": "wpos_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "state_dict['Wpos']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_openai_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_pytorch_checkpoint_to_tf2.py": {
        "torch": {
            "load_371": {
                "variable": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cached_path(aws_model_maps[pytorch_checkpoint_path], force_download=not use_cached_models)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_reformer_trax_checkpoint_to_pytorch.py": {
        "torch": {
            "Parameter_34": {
                "variable": {
                    "value": "torch_layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "torch_layer.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_187": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "np_query_key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(weights[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_48": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "np_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(weights[1])",
                            "Call"
                        ],
                        [
                            "np.asarray(weights[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_51": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "np_dense",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(weights[2])",
                            "Call"
                        ],
                        [
                            "np.asarray(weights[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_54": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "np_query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(weights[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_66": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "np_key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(weights[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_69": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "np_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(weights[1])",
                            "Call"
                        ],
                        [
                            "np.asarray(weights[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_72": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "np_dense",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(weights[2])",
                            "Call"
                        ],
                        [
                            "np.asarray(weights[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_75": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "layer_norm_1_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(layer_norm_1[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_106": {
                "data": {
                    "value": "layer_norm_2_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(intermediate_weights[0][1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_114": {
                "data": {
                    "value": "inter_dense_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(intermediate_weights[1][0])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_114": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "data": {
                    "value": "inter_dense_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(intermediate_weights[1][1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_123": {
                "data": {
                    "value": "out_dense_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(intermediate_weights[4][0])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_123": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "out_dense_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(intermediate_weights[4][1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_135": {
                "data": {
                    "value": "word_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(weights[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "position_embeddings.weights[emb_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(emb_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "data": {
                    "value": "layer_norm_out_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(weights[7][0])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_161": {
                "data": {
                    "value": "layer_norm_out_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(weights[7][1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_169": {
                "data": {
                    "value": "output_embed_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(weights[9][0])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_169": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "data": {
                    "value": "output_embed_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(weights[9][1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_145": {
                "data": {
                    "value": "emb_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(weights[3][emb_idx][0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_roberta_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "zeros_like_72": {
                "variable": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_145": {
                "variable": {
                    "value": "max_absolute_diff",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(our_output - their_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_147": {
                "variable": {
                    "value": "success",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "our_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "their_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "roberta.model.classification_heads['mnli'](roberta.extract_features(input_ids))",
                            "Call"
                        ],
                        [
                            "roberta.model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_145": {
                "input": {
                    "value": "our_output - their_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_t5_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_transfo_xl_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_58": {
                "obj": {
                    "value": "corpus_vocab_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "corpus.vocab.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_vocab_dump_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + VOCAB_FILES_NAMES['pretrained_vocab_file']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_64": {
                "obj": {
                    "value": "corpus_dict_no_vocab",
                    "type": "Name",
                    "possible_values": [
                        [
                            "corpus.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_dataset_dump_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + CORPUS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_85": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_xlm_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "chkpt",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "xlm_checkpoint_path",
                    "type": "Name",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_58": {
                "obj": {
                    "value": "two_levels_state_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/convert_xlnet_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_76": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/data/data_collator.py": {
        "torch": {
            "full_123": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.mlm_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_131": {
                "variable": {
                    "value": "masked_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, self.mlm_probability)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_140": {
                "variable": {
                    "value": "random_words",
                    "type": "Name",
                    "possible_values": []
                },
                "low": {
                    "value": "len(self.tokenizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[getattr(f, k) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_102": {
                "tensors": {
                    "value": "examples",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_sequence_109": {
                "sequences": {
                    "value": "examples",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "special_tokens_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_135": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_139": {
                "input": {
                    "value": "torch.full(labels.shape, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_135": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_139": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/data/datasets/glue.py": {
        "torch": {
            "load_97": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_127": {
                "obj": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/data/datasets/language_modeling.py": {
        "torch": {
            "tensor_75": {
                "data": {
                    "value": "self.examples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "data": {
                    "value": "self.examples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_bart.py": {
        "torch": {
            "triu_112": {
                "variable": {
                    "value": "causal_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fill_with_neg_inf(torch.zeros(tgt_len, tgt_len))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "lin_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 6, 10, 4, 2], [0, 8, 12, 2, pad_token]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.encoder_ffn_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.encoder_ffn_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_215": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_224": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_226": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_264": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(config) for _ in range(config.encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_295": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_347": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.decoder_ffn_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_348": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.decoder_ffn_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_376": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_392": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_402": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_404": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_442": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderLayer(config) for _ in range(config.decoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_492": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_568": {
                "variable": {
                    "value": "self.k_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_569": {
                "variable": {
                    "value": "self.v_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_570": {
                "variable": {
                    "value": "self.q_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_571": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_631": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.q_proj(query) * self.scaling",
                            "BinOp"
                        ],
                        [
                            "self._shape(q, tgt_len, bsz)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_648": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(reshaped, float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_649": {
                "variable": {
                    "value": "attn_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(reshaped, float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_652": {
                "variable": {
                    "value": "attn_output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.v_proj(query)",
                            "Call"
                        ],
                        [
                            "self.v_proj(key)",
                            "Call"
                        ],
                        [
                            "self._shape(v, -1, bsz)",
                            "Call"
                        ],
                        [
                            "prev_value",
                            "Name"
                        ],
                        [
                            "torch.cat([prev_value, v], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_726": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_727": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pooler_dropout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_728": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tanh_733": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_767": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_774": {
                "normalized_shape": {
                    "value": "normalized_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "elementwise_affine": {
                    "value": "elementwise_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_802": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_956": {
                "variable": {
                    "value": "lm_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.model.shared.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.final_logits_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_994": {
                "variable": {
                    "value": "all_but_token_ids_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[x for x in range(self.config.vocab_size) if x not in token_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_889": {
                "variable": {
                    "value": "extra_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, new_num_tokens - old_num_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.final_logits_bias.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_890": {
                "variable": {
                    "value": "new_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.final_logits_bias, extra_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_959": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_1102": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, self.config.num_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_1140": {
                "variable": {
                    "value": "positions",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_445": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_672": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_681": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_value, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_702": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask, key_padding_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_705": {
                "variable": {
                    "value": "filler",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "src_len - key_padding_mask.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "key_padding_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_711": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[filler, key_padding_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_876": {
                "*size": {
                    "value": "(1, self.model.shared.num_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unique_1095": {
                "input": {
                    "value": "eos_mask.sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "*size": {
                    "value": "tgt_len",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "tgt_len",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_ctrl.py": {
        "torch": {
            "sin_49": {
                "variable": {
                    "value": "sines",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_rads[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_50": {
                "variable": {
                    "value": "cosines",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_rads[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "pos_encoding",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sines, cosines]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "variable": {
                    "value": "matmul_qk",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(q, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_attention_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "matmul_qk / np.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + mask[ns - nd:ns, :ns] * -10000.0",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.softmax(scaled_attention_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "attention_weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Wv(v)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(v, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.cat((past_value, v), dim=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.Wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.Wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.Wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "*args": {
                    "value": "torch.nn.Linear(d_model_size, dff)",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_144": {
                "variable": {
                    "value": "self.layernorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_145": {
                "variable": {
                    "value": "self.layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_147": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_148": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_274": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_276": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_277": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(config.n_embd, config.n_head, config.dff, config.resid_pdrop, config.output_attentions) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_283": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_413": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(seq_len + past_length, seq_len + past_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_472": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_37": {
                "input": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2 * (i // 2) / d_model_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_44": {
                "start": {
                    "value": "position",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_45": {
                "start": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "unsqueeze_45": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_117": {
                "variable": {
                    "value": "present",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "dff",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_376": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_shape[-1] + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_563": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_413": {
                "*size": {
                    "value": "seq_len + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len + past_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_distilbert.py": {
        "torch": {
            "Embedding_64": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_65": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_71": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_87": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_121": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_176": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.q_lin(query))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "variable": {
                    "value": "context",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.v_lin(value))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_200": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_225": {
                "variable": {
                    "value": "self.sa_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_228": {
                "variable": {
                    "value": "self.output_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_271": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_484": {
                "variable": {
                    "value": "self.vocab_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_485": {
                "variable": {
                    "value": "self.vocab_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_486": {
                "variable": {
                    "value": "self.vocab_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_490": {
                "variable": {
                    "value": "self.mlm_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_564": {
                "variable": {
                    "value": "self.pre_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_565": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_566": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.seq_classif_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_643": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_645": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.qa_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_746": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_747": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_460": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_726": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_801": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_180": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_616": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_623": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_626": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_806": {
                "variable": {
                    "value": "active_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_127": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_807": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_flaubert.py": {
        "torch": {
            "dropout_226": {
                "variable": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds + self.position_embeddings(position_ids).expand_as(inputs_embeds)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.embeddings(token_type_ids)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor_normalized)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_192": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_247": {
                "variable": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_256": {
                "variable": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_longformer.py": {
        "torch": {
            "Linear_52": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.query_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.key_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.value_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_77": {
                "variable": {
                    "value": "x_padded",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(x, (0, M + 1))",
                            "Call"
                        ],
                        [
                            "x.view(B, C, -1)",
                            "Call"
                        ],
                        [
                            "x[:, :, :-M]",
                            "Subscript"
                        ],
                        [
                            "x.view(B, C, M, M + L)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :-1]",
                            "Subscript"
                        ],
                        [
                            "x.view(x.size(0), x.size(1) // (w * 2), w * 2, x.size(2))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "direction",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "pad_86": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(x, (0, M + 1))",
                            "Call"
                        ],
                        [
                            "x.view(B, C, -1)",
                            "Call"
                        ],
                        [
                            "x[:, :, :-M]",
                            "Subscript"
                        ],
                        [
                            "x.view(B, C, M, M + L)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :-1]",
                            "Subscript"
                        ],
                        [
                            "x.view(x.size(0), x.size(1) // (w * 2), w * 2, x.size(2))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, M + 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_142": {
                "variable": {
                    "value": "chunk_attn",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcxd,bcyd->bcxy",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(chunk_q, chunk_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_183": {
                "variable": {
                    "value": "padded_v",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v.transpose(1, 2).reshape(batch_size * num_heads, seqlen, head_dim)",
                            "Call"
                        ],
                        [
                            "self.value(hidden_states)",
                            "Call"
                        ],
                        [
                            "v.view(seqlen, batch_size, self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.value_global(hidden_states)",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, batch_size * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_193": {
                "variable": {
                    "value": "context",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcwd,bcdh->bcwh",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(skewed_prob, chunk_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_294": {
                "variable": {
                    "value": "attn_weights_fp32",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._sliding_chunks_matmul_qk(q, k, self.one_sided_attention_window_size)",
                            "Call"
                        ],
                        [
                            "attn_weights + d_mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat((selected_attn_weights, attn_weights), dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_weights_fp32.type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "torch.masked_fill(attn_weights, key_padding_mask.unsqueeze(-1).unsqueeze(-1), 0.0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(batch_size, self.num_heads, max_num_extra_indices_per_batch, seqlen)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), -10000.0)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(batch_size * self.num_heads, max_num_extra_indices_per_batch, seqlen)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(batch_size, self.num_heads, max_num_extra_indices_per_batch, seqlen)",
                            "Call"
                        ],
                        [
                            "attn_weights.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_301": {
                "variable": {
                    "value": "attn_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._sliding_chunks_matmul_qk(q, k, self.one_sided_attention_window_size)",
                            "Call"
                        ],
                        [
                            "attn_weights + d_mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat((selected_attn_weights, attn_weights), dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_weights_fp32.type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "torch.masked_fill(attn_weights, key_padding_mask.unsqueeze(-1).unsqueeze(-1), 0.0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(batch_size, self.num_heads, max_num_extra_indices_per_batch, seqlen)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), -10000.0)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(batch_size * self.num_heads, max_num_extra_indices_per_batch, seqlen)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(batch_size, self.num_heads, max_num_extra_indices_per_batch, seqlen)",
                            "Call"
                        ],
                        [
                            "attn_weights.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_288": {
                "variable": {
                    "value": "selected_attn_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "blhd,bshd->blhs",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(q, selected_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(selected_attn_weights, attn_weights)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_310": {
                "variable": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "selected_attn_probs.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "selected_v.transpose(1, 2).type_as(selected_attn_probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_310": {
                "variable": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_349": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q.transpose(1, 2).reshape(batch_size * num_heads, seqlen, head_dim)",
                            "Call"
                        ],
                        [
                            "self.query(hidden_states)",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(self.head_dim)",
                            "BinOp"
                        ],
                        [
                            "q.view(seqlen, batch_size, self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.query_global(selected_hidden_states)",
                            "Call"
                        ],
                        [
                            "q.contiguous().view(max_num_extra_indices_per_batch, batch_size * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_357": {
                "variable": {
                    "value": "attn_weights_float",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._sliding_chunks_matmul_qk(q, k, self.one_sided_attention_window_size)",
                            "Call"
                        ],
                        [
                            "attn_weights + d_mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat((selected_attn_weights, attn_weights), dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_weights_fp32.type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "torch.masked_fill(attn_weights, key_padding_mask.unsqueeze(-1).unsqueeze(-1), 0.0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(batch_size, self.num_heads, max_num_extra_indices_per_batch, seqlen)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), -10000.0)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(batch_size * self.num_heads, max_num_extra_indices_per_batch, seqlen)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(batch_size, self.num_heads, max_num_extra_indices_per_batch, seqlen)",
                            "Call"
                        ],
                        [
                            "attn_weights.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_360": {
                "variable": {
                    "value": "attn_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights_float.type_as(attn_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_361": {
                "variable": {
                    "value": "selected_attn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attn_probs.narrow(-1, max_num_extra_indices_per_batch, attn_probs.size(-1) - max_num_extra_indices_per_batch).contiguous()",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights_float.type_as(attn_weights), p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v.transpose(1, 2).reshape(batch_size * num_heads, seqlen, head_dim)",
                            "Call"
                        ],
                        [
                            "self.value(hidden_states)",
                            "Call"
                        ],
                        [
                            "v.view(seqlen, batch_size, self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.value_global(hidden_states)",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, batch_size * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_705": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_235": {
                "variable": {
                    "value": "zero_to_max_range",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_num_extra_indices_per_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_extra_indices_per_batch.max()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "num_extra_indices_per_batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_518": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(input_ids, (0, padding_len), value=pad_token_id)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_token_id",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "pad_520": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_mask.squeeze(dim=2).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(attention_mask, (0, padding_len), value=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_524": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(token_type_ids, (0, padding_len), value=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_527": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(position_ids, (0, padding_len), value=pad_token_id)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_token_id",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_533": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs_embeds, inputs_embeds_padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_mmbt.py": {
        "torch": {
            "Linear_40": {
                "variable": {
                    "value": "self.proj_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.modal_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "embedding_output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[modal_embeddings, txt_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_317": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_318": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_token_embeds.unsqueeze(1), token_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_embeddings, end_token_embeds.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_62": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "token_embeddings.size(1)",
                            "Call"
                        ],
                        [
                            "seq_length + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_modal.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input_modal.size(0), seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_modal.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_225": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_txt_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_236": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embedding_output.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_238": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(input_modal_shape, device=device, dtype=torch.long), attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_242": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embedding_output.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_244": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(input_modal_shape, device=device), encoder_attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_360": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_363": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_239": {
                "*size": {
                    "value": "input_modal_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "modal_embeddings.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_245": {
                "*size": {
                    "value": "input_modal_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "modal_embeddings.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_openai.py": {
        "torch": {
            "from_numpy_72": {
                "variable": {
                    "value": "model.tokens_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "model.positions_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_134": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_141": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "index_attn",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_220": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_233": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_235": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_333": {
                "variable": {
                    "value": "self.tokens_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_334": {
                "variable": {
                    "value": "self.positions_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_335": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_336": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_473": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_571": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_405": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "input_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_550": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_666": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_672": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tril_125": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_170": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "input": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "arange_147": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_125": {
                "*size": {
                    "value": "n_ctx",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "n_ctx",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_reformer.py": {
        "torch": {
            "ParameterList_98": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_172": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_176": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "position_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding(position_ids)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(position_embeddings, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.position_embeddings(position_ids)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_189": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_217": {
                "variable": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_embeds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.word_embeddings(input_ids)",
                            "Call"
                        ],
                        [
                            "torch.cat([inputs_embeds, padded_inputs_embeds], dim=-2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_303": {
                "variable": {
                    "value": "self.query_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_304": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_469": {
                "variable": {
                    "value": "random_rotations",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "rotations_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(self.num_attention_heads, vectors.shape[-1], num_hashes, rotation_size // 2)",
                            "Tuple"
                        ]
                    ]
                },
                "device": {
                    "value": "vectors.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vectors.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_472": {
                "variable": {
                    "value": "rotated_vectors",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bmtd,mdhr->bmhtr",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vectors.detach()",
                            "Call"
                        ],
                        [
                            "self._len_norm(vectors)",
                            "Call"
                        ],
                        [
                            "vectors * torch.rsqrt(torch.tensor(self.attention_head_size, device=vectors.device, dtype=vectors.dtype))",
                            "BinOp"
                        ],
                        [
                            "vectors.repeat(1, 1, num_hashes, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_494": {
                "variable": {
                    "value": "offsets",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "num_hashes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_hashes if num_hashes is not None else self.num_hashes",
                            "IfExp"
                        ],
                        [
                            "ctx.num_hashes",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "vectors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_553": {
                "variable": {
                    "value": "query_key_dots",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query(hidden_states)",
                            "Call"
                        ],
                        [
                            "self._split_hidden_size_dim(query_vectors, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ],
                        [
                            "self._split_seq_length_dim_to(query_vectors, -1, self.chunk_length, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_vectors.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ne_589": {
                "variable": {
                    "value": "self_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_bucket_idx.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "key_value_bucket_idx.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_594": {
                "variable": {
                    "value": "query_key_dots",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "self_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ne(query_bucket_idx.unsqueeze(-1), key_value_bucket_idx.unsqueeze(-2)).to(query_bucket_idx.device)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "query_key_dots",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query_vectors, key_vectors.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "torch.where(mask, query_key_dots, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.where(self_mask, query_key_dots, self_mask_value)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query_vectors, key_vectors.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "torch.where(mask, query_key_dots, mask_value)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self_mask_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.self_mask_value_float16.half()",
                            "Call"
                        ],
                        [
                            "self.self_mask_value_float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "logsumexp_599": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_key_dots",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query_vectors, key_vectors.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "torch.where(mask, query_key_dots, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.where(self_mask, query_key_dots, self_mask_value)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query_vectors, key_vectors.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "torch.where(mask, query_key_dots, mask_value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_601": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_key_dots - logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_607": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "torch.exp(query_key_dots - logits)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(attention_probs, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "torch.exp(query_key_dots - logits)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(attention_probs, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "()",
                            "Tuple"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_614": {
                "variable": {
                    "value": "out_vectors",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "torch.exp(query_key_dots - logits)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(attention_probs, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "torch.exp(query_key_dots - logits)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(attention_probs, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "()",
                            "Tuple"
                        ]
                    ]
                },
                "other": {
                    "value": "value_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.value(hidden_states)",
                            "Call"
                        ],
                        [
                            "self._split_hidden_size_dim(value_vectors, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ],
                        [
                            "self._gather_by_expansion(value_vectors, sorted_bucket_idx, num_hashes)",
                            "Call"
                        ],
                        [
                            "self._split_seq_length_dim_to(value_vectors, -1, self.chunk_length, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ],
                        [
                            "self._look_adjacent(value_vectors, self.num_chunks_before, self.num_chunks_after)",
                            "Call"
                        ],
                        [
                            "self.value(hidden_states)",
                            "Call"
                        ],
                        [
                            "self._split_hidden_size_dim(value_vectors, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ],
                        [
                            "self._split_seq_length_dim_to(value_vectors, -1, self.chunk_length, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ],
                        [
                            "self._look_adjacent(value_vectors, self.num_chunks_before, self.num_chunks_after)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_667": {
                "variable": {
                    "value": "variance",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_723": {
                "variable": {
                    "value": "sorted_bucket_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_bucket_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sorted_bucket_idx % sequence_length",
                            "BinOp"
                        ],
                        [
                            "torch.argsort(scaled_buckets, dim=-1)",
                            "Call"
                        ],
                        [
                            "ctx.sorted_bucket_idx",
                            "Attribute"
                        ],
                        [
                            "torch.reshape(sorted_bucket_idx, sorted_bucket_idx.shape[:2] + (num_hashes, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "sorted_bucket_idx.shape[:2] + (num_hashes, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_726": {
                "variable": {
                    "value": "grad_out_vectors",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_out_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_out_vectors.view(grad_out_vectors_shape[:2] + (num_hashes, -1) + grad_out_vectors_shape[-1:])",
                            "Call"
                        ],
                        [
                            "torch.gather(grad_out_vectors, 3, expanded_sort_indices)",
                            "Call"
                        ],
                        [
                            "torch.reshape(grad_out_vectors, grad_out_vectors_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "expanded_sort_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sorted_bucket_idx.unsqueeze(-1).expand(grad_out_vectors.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_727": {
                "variable": {
                    "value": "grad_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_logits.view(grad_logits_shape[:2] + (num_hashes, -1))",
                            "Call"
                        ],
                        [
                            "torch.gather(grad_logits, 3, sorted_bucket_idx)",
                            "Call"
                        ],
                        [
                            "torch.reshape(grad_logits, grad_logits_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sorted_bucket_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sorted_bucket_idx % sequence_length",
                            "BinOp"
                        ],
                        [
                            "torch.argsort(scaled_buckets, dim=-1)",
                            "Call"
                        ],
                        [
                            "ctx.sorted_bucket_idx",
                            "Attribute"
                        ],
                        [
                            "torch.reshape(sorted_bucket_idx, sorted_bucket_idx.shape[:2] + (num_hashes, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_730": {
                "variable": {
                    "value": "grad_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_logits.view(grad_logits_shape[:2] + (num_hashes, -1))",
                            "Call"
                        ],
                        [
                            "torch.gather(grad_logits, 3, sorted_bucket_idx)",
                            "Call"
                        ],
                        [
                            "torch.reshape(grad_logits, grad_logits_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "grad_logits_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_logits.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_731": {
                "variable": {
                    "value": "grad_out_vectors",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_out_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_out_vectors.view(grad_out_vectors_shape[:2] + (num_hashes, -1) + grad_out_vectors_shape[-1:])",
                            "Call"
                        ],
                        [
                            "torch.gather(grad_out_vectors, 3, expanded_sort_indices)",
                            "Call"
                        ],
                        [
                            "torch.reshape(grad_out_vectors, grad_out_vectors_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "grad_out_vectors_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_out_vectors.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_753": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_754": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_755": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_816": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "sequence_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "position_ids.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hidden_states.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hidden_states.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "query_vectors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_827": {
                "variable": {
                    "value": "query_key_dots",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query(hidden_states)",
                            "Call"
                        ],
                        [
                            "self._split_hidden_size_dim(query_vectors, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ],
                        [
                            "self._split_seq_length_dim_to(query_vectors, -1, self.chunk_length, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_vectors.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsumexp_847": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_key_dots",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query_vectors, key_vectors.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "torch.where(mask, query_key_dots, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.where(self_mask, query_key_dots, self_mask_value)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query_vectors, key_vectors.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "torch.where(mask, query_key_dots, mask_value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_848": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_key_dots - logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_854": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "torch.exp(query_key_dots - logits)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(attention_probs, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "torch.exp(query_key_dots - logits)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(attention_probs, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "()",
                            "Tuple"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_861": {
                "variable": {
                    "value": "out_vectors",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "()",
                            "Tuple"
                        ],
                        [
                            "torch.exp(query_key_dots - logits)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(attention_probs, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "torch.exp(query_key_dots - logits)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(attention_probs, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "()",
                            "Tuple"
                        ]
                    ]
                },
                "other": {
                    "value": "value_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.value(hidden_states)",
                            "Call"
                        ],
                        [
                            "self._split_hidden_size_dim(value_vectors, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ],
                        [
                            "self._gather_by_expansion(value_vectors, sorted_bucket_idx, num_hashes)",
                            "Call"
                        ],
                        [
                            "self._split_seq_length_dim_to(value_vectors, -1, self.chunk_length, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ],
                        [
                            "self._look_adjacent(value_vectors, self.num_chunks_before, self.num_chunks_after)",
                            "Call"
                        ],
                        [
                            "self.value(hidden_states)",
                            "Call"
                        ],
                        [
                            "self._split_hidden_size_dim(value_vectors, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ],
                        [
                            "self._split_seq_length_dim_to(value_vectors, -1, self.chunk_length, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ],
                        [
                            "self._look_adjacent(value_vectors, self.num_chunks_before, self.num_chunks_after)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_909": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "all_head_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.num_attention_heads * config.attention_head_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_913": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "hidden_states + self.feed_forward(attn_output)",
                            "BinOp"
                        ],
                        [
                            "hidden_states - res_hidden_states",
                            "BinOp"
                        ],
                        [
                            "hidden_states.detach()",
                            "Call"
                        ],
                        [
                            "layer_outputs.hidden_states",
                            "Attribute"
                        ],
                        [
                            "torch.cat([hidden_states, hidden_states], dim=-1)",
                            "Call"
                        ],
                        [
                            "_ReversibleFunction.apply(hidden_states, self.layers, attention_mask, head_mask, num_hashes, all_hidden_states, all_attentions, do_output_hidden_states, do_output_attentions)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.decoder(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_923": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_986": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.feed_forward_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_990": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "hidden_states + self.feed_forward(attn_output)",
                            "BinOp"
                        ],
                        [
                            "hidden_states - res_hidden_states",
                            "BinOp"
                        ],
                        [
                            "hidden_states.detach()",
                            "Call"
                        ],
                        [
                            "layer_outputs.hidden_states",
                            "Attribute"
                        ],
                        [
                            "torch.cat([hidden_states, hidden_states], dim=-1)",
                            "Call"
                        ],
                        [
                            "_ReversibleFunction.apply(hidden_states, self.layers, attention_mask, head_mask, num_hashes, all_hidden_states, all_attentions, do_output_hidden_states, do_output_attentions)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.decoder(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1000": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.feed_forward_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1004": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "hidden_states + self.feed_forward(attn_output)",
                            "BinOp"
                        ],
                        [
                            "hidden_states - res_hidden_states",
                            "BinOp"
                        ],
                        [
                            "hidden_states.detach()",
                            "Call"
                        ],
                        [
                            "layer_outputs.hidden_states",
                            "Attribute"
                        ],
                        [
                            "torch.cat([hidden_states, hidden_states], dim=-1)",
                            "Call"
                        ],
                        [
                            "_ReversibleFunction.apply(hidden_states, self.layers, attention_mask, head_mask, num_hashes, all_hidden_states, all_attentions, do_output_hidden_states, do_output_attentions)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.decoder(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_1014": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_1210": {
                "variable": {
                    "value": "(hidden_states, attn_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "hidden_states + self.feed_forward(attn_output)",
                            "BinOp"
                        ],
                        [
                            "hidden_states - res_hidden_states",
                            "BinOp"
                        ],
                        [
                            "hidden_states.detach()",
                            "Call"
                        ],
                        [
                            "layer_outputs.hidden_states",
                            "Attribute"
                        ],
                        [
                            "torch.cat([hidden_states, hidden_states], dim=-1)",
                            "Call"
                        ],
                        [
                            "_ReversibleFunction.apply(hidden_states, self.layers, attention_mask, head_mask, num_hashes, all_hidden_states, all_attentions, do_output_hidden_states, do_output_attentions)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.decoder(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_1247": {
                "variable": {
                    "value": "(grad_attn_output, grad_hidden_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1285": {
                "variable": {
                    "value": "grad_hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output.grad_attn_output, output.grad_hidden_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_1297": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ReformerLayer(config, i) for i in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_1300": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "2 * config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1316": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_states, hidden_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_1333": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "hidden_states + self.feed_forward(attn_output)",
                            "BinOp"
                        ],
                        [
                            "hidden_states - res_hidden_states",
                            "BinOp"
                        ],
                        [
                            "hidden_states.detach()",
                            "Call"
                        ],
                        [
                            "layer_outputs.hidden_states",
                            "Attribute"
                        ],
                        [
                            "torch.cat([hidden_states, hidden_states], dim=-1)",
                            "Call"
                        ],
                        [
                            "_ReversibleFunction.apply(hidden_states, self.layers, attention_mask, head_mask, num_hashes, all_hidden_states, all_attentions, do_output_hidden_states, do_output_attentions)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(hidden_states)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.decoder(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1347": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_1348": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1372": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "DUMMY_INPUTS",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_1373": {
                "variable": {
                    "value": "input_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "DUMMY_MASK",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "full_1623": {
                "variable": {
                    "value": "padded_input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_shape[0], padding_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.device",
                            "Attribute"
                        ],
                        [
                            "input_ids.device",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_45": {
                "input": {
                    "value": "nn.functional.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "position_encodings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "broadcasted_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[weight.expand((batch_size,) + self.axial_pos_shape + weight.shape[-1:]) for weight in self.weights]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_204": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.device",
                            "Attribute"
                        ],
                        [
                            "input_ids.device",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_251": {
                "tensors": {
                    "value": "slices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_266": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x.size()[0], -1, num_attn_heads * attn_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_416": {
                "variable": {
                    "value": "probs_vectors",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits - torch.logsumexp(logits, dim=2, keepdim=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_417": {
                "variable": {
                    "value": "out_vectors",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out_vectors * probs_vectors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "rotated_vectors",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rotated_vectors, -rotated_vectors]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_476": {
                "variable": {
                    "value": "buckets",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "rotated_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('bmtd,mdhr->bmhtr', vectors, random_rotations)",
                            "Call"
                        ],
                        [
                            "torch.cat([rotated_vectors, -rotated_vectors], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_509": {
                "variable": {
                    "value": "orig_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "num_hashes * sequence_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "buckets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_519": {
                "variable": {
                    "value": "sorted_bucket_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_buckets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence_length * buckets + orig_indices % sequence_length",
                            "BinOp"
                        ],
                        [
                            "scaled_buckets.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_523": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "sorted_bucket_idx.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "buckets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_574": {
                "variable": {
                    "value": "query_key_dots",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._compute_attn_mask(query_bucket_idx, key_value_bucket_idx, attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.ge(query_indices.unsqueeze(-1), key_indices.unsqueeze(-2)).to(query_indices.device)",
                            "Call"
                        ],
                        [
                            "mask * attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_mask",
                            "Name"
                        ],
                        [
                            "self._compute_attn_mask(query_indices, key_indices, attention_mask, query_key_dots.shape)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.ge(query_indices.unsqueeze(-1), key_indices.unsqueeze(-2)).to(query_indices.device)",
                            "Call"
                        ],
                        [
                            "mask * attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_mask",
                            "Name"
                        ]
                    ]
                },
                "x": {
                    "value": "query_key_dots",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query_vectors, key_vectors.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "torch.where(mask, query_key_dots, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.where(self_mask, query_key_dots, self_mask_value)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query_vectors, key_vectors.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "torch.where(mask, query_key_dots, mask_value)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.mask_value_float16.half()",
                            "Call"
                        ],
                        [
                            "self.mask_value_float32",
                            "Attribute"
                        ],
                        [
                            "self.mask_value_float16.half()",
                            "Call"
                        ],
                        [
                            "self.mask_value_float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ge_630": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_indices.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "key_indices.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_638": {
                "variable": {
                    "value": "key_attn_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_mask.to(torch.uint8)[:, None, None, :]",
                            "Subscript"
                        ],
                        [
                            "attention_mask.expand(query_indices.shape[:-1] + (-1,))",
                            "Call"
                        ],
                        [
                            "attention_mask.to(torch.uint8)[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "self._split_seq_length_dim_to(attention_mask, -1, self.chunk_length, 1)",
                            "Call"
                        ],
                        [
                            "ctx.attention_mask",
                            "Attribute"
                        ],
                        [
                            "torch.cat([attention_mask, torch.zeros(input_shape[0], padding_length, device=device, dtype=attention_mask.dtype)], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.ones(input_shape, device=device, dtype=torch.uint8), torch.zeros((input_shape[0], padding_length), device=device, dtype=torch.uint8)], dim=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "key_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._split_seq_length_dim_to(indices, -1, self.chunk_length, self.num_attention_heads)",
                            "Call"
                        ],
                        [
                            "self._look_adjacent(key_indices, self.num_chunks_before, self.num_chunks_after)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_639": {
                "variable": {
                    "value": "query_attn_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_mask.to(torch.uint8)[:, None, None, :]",
                            "Subscript"
                        ],
                        [
                            "attention_mask.expand(query_indices.shape[:-1] + (-1,))",
                            "Call"
                        ],
                        [
                            "attention_mask.to(torch.uint8)[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "self._split_seq_length_dim_to(attention_mask, -1, self.chunk_length, 1)",
                            "Call"
                        ],
                        [
                            "ctx.attention_mask",
                            "Attribute"
                        ],
                        [
                            "torch.cat([attention_mask, torch.zeros(input_shape[0], padding_length, device=device, dtype=attention_mask.dtype)], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.ones(input_shape, device=device, dtype=torch.uint8), torch.zeros((input_shape[0], padding_length), device=device, dtype=torch.uint8)], dim=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "query_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._split_seq_length_dim_to(indices, -1, self.chunk_length, self.num_attention_heads)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_677": {
                "input": {
                    "value": "vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vectors.detach()",
                            "Call"
                        ],
                        [
                            "self._len_norm(vectors)",
                            "Call"
                        ],
                        [
                            "vectors * torch.rsqrt(torch.tensor(self.attention_head_size, device=vectors.device, dtype=vectors.dtype))",
                            "BinOp"
                        ],
                        [
                            "vectors.repeat(1, 1, num_hashes, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "expanded_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "idxs.unsqueeze(-1).expand(-1, -1, -1, self.attention_head_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_698": {
                "variable": {
                    "value": "out_vectors",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._split_seq_length_dim_to(out_vectors, num_hashes, sequence_length, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ],
                        [
                            "torch.sum(out_vectors * probs_vectors, dim=2)",
                            "Call"
                        ],
                        [
                            "self._merge_hidden_size_dims(out_vectors, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention_probs, value_vectors)",
                            "Call"
                        ],
                        [
                            "out_vectors.flatten(start_dim=2, end_dim=3)",
                            "Call"
                        ],
                        [
                            "torch.gather(out_vectors, 2, expanded_undo_sort_indices)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention_probs, value_vectors)",
                            "Call"
                        ],
                        [
                            "out_vectors.flatten(start_dim=2, end_dim=3)",
                            "Call"
                        ],
                        [
                            "self._merge_hidden_size_dims(out_vectors, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "expanded_undo_sort_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "undo_sorted_bucket_idx.unsqueeze(-1).expand(out_vectors.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_699": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._split_seq_length_dim_to(logits, num_hashes, sequence_length, self.num_attention_heads, self.attention_head_size).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(query_key_dots, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "logits.flatten(start_dim=2, end_dim=3).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(logits, 2, undo_sorted_bucket_idx)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(query_key_dots, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.lm_head(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "undo_sorted_bucket_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sorted_bucket_idx.new(*sorted_bucket_idx.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "where_841": {
                "variable": {
                    "value": "query_key_dots",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._compute_attn_mask(query_bucket_idx, key_value_bucket_idx, attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.ge(query_indices.unsqueeze(-1), key_indices.unsqueeze(-2)).to(query_indices.device)",
                            "Call"
                        ],
                        [
                            "mask * attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_mask",
                            "Name"
                        ],
                        [
                            "self._compute_attn_mask(query_indices, key_indices, attention_mask, query_key_dots.shape)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.ge(query_indices.unsqueeze(-1), key_indices.unsqueeze(-2)).to(query_indices.device)",
                            "Call"
                        ],
                        [
                            "mask * attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_mask",
                            "Name"
                        ]
                    ]
                },
                "x": {
                    "value": "query_key_dots",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query_vectors, key_vectors.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "torch.where(mask, query_key_dots, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.where(self_mask, query_key_dots, self_mask_value)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query_vectors, key_vectors.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "torch.where(mask, query_key_dots, mask_value)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.mask_value_float16.half()",
                            "Call"
                        ],
                        [
                            "self.mask_value_float32",
                            "Attribute"
                        ],
                        [
                            "self.mask_value_float16.half()",
                            "Call"
                        ],
                        [
                            "self.mask_value_float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ge_889": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_indices.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "key_indices.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_1052": {
                "variable": {
                    "value": "device_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "seed_1053": {
                "variable": {
                    "value": "self.attention_seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_1072": {
                "variable": {
                    "value": "device_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "seed_1073": {
                "variable": {
                    "value": "self.feed_forward_seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1243": {
                "tensors": {
                    "value": "[attn_output, hidden_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1629": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, torch.zeros(input_shape[0], padding_length, device=device, dtype=attention_mask.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1637": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(input_shape, device=device, dtype=torch.uint8), torch.zeros((input_shape[0], padding_length), device=device, dtype=torch.uint8)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1647": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, padded_input_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1659": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs_embeds, padded_inputs_embeds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1752": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_45": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_132": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "broadcasted_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[weight.expand((batch_size,) + self.axial_pos_shape + weight.shape[-1:]) for weight in self.weights]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout2d_136": {
                "variable": {
                    "value": "dropped_transposed_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "transposed_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weights.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "position_encodings",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dropped_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dropped_transposed_weights.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, sequence_length, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "position_encodings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.reshape(weight, (batch_size, sequence_length, -1)) for weight in broadcasted_weights]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "input": {
                    "value": "vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vectors.detach()",
                            "Call"
                        ],
                        [
                            "self._len_norm(vectors)",
                            "Call"
                        ],
                        [
                            "vectors * torch.rsqrt(torch.tensor(self.attention_head_size, device=vectors.device, dtype=vectors.dtype))",
                            "BinOp"
                        ],
                        [
                            "vectors.repeat(1, 1, num_hashes, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "split_dim_shape + (attn_head_size,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_307": {
                "data": {
                    "value": "-1000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "data": {
                    "value": "-100000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_309": {
                "data": {
                    "value": "-10000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "data": {
                    "value": "-1000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_465": {
                "seed": {
                    "value": "self.hash_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_483": {
                "variable": {
                    "value": "rotated_vectors_factor",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rotated_vectors_factor, -rotated_vectors_factor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_505": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rsqrt_658": {
                "input": {
                    "value": "torch.tensor(self.attention_head_size, device=vectors.device, dtype=vectors.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_668": {
                "input": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_692": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_760": {
                "data": {
                    "value": "-10000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_761": {
                "data": {
                    "value": "-1000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_799": {
                "input": {
                    "value": "torch.tensor(self.attention_head_size, device=key_vectors.device, dtype=key_vectors.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_1054": {
                "seed": {
                    "value": "self.attention_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_1058": {
                "seed": {
                    "value": "self.attention_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_1074": {
                "seed": {
                    "value": "self.feed_forward_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_1078": {
                "seed": {
                    "value": "self.feed_forward_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1089": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_1139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_1143": {
                "seed": {
                    "value": "self.feed_forward_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_1156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_1160": {
                "seed": {
                    "value": "self.attention_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1348": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1652": {
                "variable": {
                    "value": "padded_position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "input_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "padded_seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.device",
                            "Attribute"
                        ],
                        [
                            "input_ids.device",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_1654": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[position_ids, padded_position_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_114": {
                "data": {
                    "value": "torch.ones(ax_shape, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "input": {
                    "value": "vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vectors.detach()",
                            "Call"
                        ],
                        [
                            "self._len_norm(vectors)",
                            "Call"
                        ],
                        [
                            "vectors * torch.rsqrt(torch.tensor(self.attention_head_size, device=vectors.device, dtype=vectors.dtype))",
                            "BinOp"
                        ],
                        [
                            "vectors.repeat(1, 1, num_hashes, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "split_dim_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(batch_size, num_attn_heads, dim_factor_1, dim_factor_2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "argmax_486": {
                "variable": {
                    "value": "buckets",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "rotated_vectors_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rotated_vectors[..., cur_sum:cur_sum + bucket_factor // 2]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([rotated_vectors_factor, -rotated_vectors_factor], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_659": {
                "data": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "vectors.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vectors.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_800": {
                "data": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "key_vectors.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "key_vectors.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_114": {
                "*size": {
                    "value": "ax_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * len(self.axial_pos_shape)",
                            "BinOp"
                        ],
                        [
                            "tuple(ax_shape) + (axial_pos_embd_dim,)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "[vectors[:, :, i:, ...], vectors[:, :, :i, ...]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_416": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._split_seq_length_dim_to(logits, num_hashes, sequence_length, self.num_attention_heads, self.attention_head_size).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(query_key_dots, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "logits.flatten(start_dim=2, end_dim=3).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(logits, 2, undo_sorted_bucket_idx)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(query_key_dots, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.lm_head(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "seed_1057": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "seed_1077": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1632": {
                "*size": {
                    "value": "input_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "padding_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "least_common_mult_chunk_length - input_shape[-1] % least_common_mult_chunk_length",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.device",
                            "Attribute"
                        ],
                        [
                            "input_ids.device",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "attention_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1639": {
                "*size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.device",
                            "Attribute"
                        ],
                        [
                            "input_ids.device",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1640": {
                "*size": {
                    "value": "(input_shape[0], padding_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.device",
                            "Attribute"
                        ],
                        [
                            "input_ids.device",
                            "Attribute"
                        ],
                        [
                            "inputs_embeds.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "input": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "module.weights",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, sequence_length, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_488": {
                "input": {
                    "value": "rotated_vectors_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rotated_vectors[..., cur_sum:cur_sum + bucket_factor // 2]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([rotated_vectors_factor, -rotated_vectors_factor], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_roberta.py": {
        "torch": {
            "Embedding_51": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_52": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_78": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sequence_length + self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs_embeds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_252": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_256": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_377": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_378": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_477": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_478": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_568": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_569": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_570": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_576": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "gelu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_597": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_240": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_455": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_547": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_691": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_256": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_353": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_356": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_552": {
                "variable": {
                    "value": "active_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_553": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_transfo_xl_utilities.py": {
        "torch": {
            "ModuleList_50": {
                "variable": {
                    "value": "self.out_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_51": {
                "variable": {
                    "value": "self.out_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.cluster_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters, self.d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.cluster_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_74": {
                "variable": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden[..., :-1, :].contiguous()",
                            "Call"
                        ],
                        [
                            "hidden.view(-1, hidden.size(-1))",
                            "Call"
                        ],
                        [
                            "hidden.view(-1, hidden.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "linear_77": {
                "variable": {
                    "value": "proj_hid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden[..., :-1, :].contiguous()",
                            "Call"
                        ],
                        [
                            "hidden.view(-1, hidden.size(-1))",
                            "Call"
                        ],
                        [
                            "hidden.view(-1, hidden.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "proj.t().contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_78": {
                "variable": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_hid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.linear(hidden, proj.t().contiguous())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log_softmax_140": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_232": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_117": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels[..., 1:].contiguous()",
                            "Call"
                        ],
                        [
                            "labels.view(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_208": {
                "input": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "d_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_token",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "weight_i",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "bias_i",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_174": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "weight_i",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "bias_i",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_244": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "d_emb_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_115": {
                "input": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_115": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "labels.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_115": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_utils.py": {
        "torch": {
            "Linear_2099": {
                "variable": {
                    "value": "new_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "new_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Embedding_416": {
                "variable": {
                    "value": "new_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_tokens",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "old_embedding_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_grad_805": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1349": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_1672": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_1673": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_1747": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Parameter_1749": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1750": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_1754": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1764": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_1789": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_1790": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_1791": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1792": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_1835": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_1836": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1837": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_2020": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_2031": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_2035": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_343": {
                "variable": {
                    "value": "output_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "input_embeddings.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_348": {
                "variable": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, output_embeddings.weight.shape[0] - output_embeddings.bias.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_1024": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bos_token_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bos_token_id if bos_token_id is not None else self.config.bos_token_id",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_1109": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(effective_batch_size * num_beams, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "decoder_start_token_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decoder_start_token_id if decoder_start_token_id is not None else self.config.decoder_start_token_id",
                            "IfExp"
                        ],
                        [
                            "bos_token_id",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1123": {
                "variable": {
                    "value": "expanded_batch_idxs",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_1277": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, tokens_to_add.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_1388": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "self.prepare_logits_for_generation(next_token_logits, cur_len=cur_len, max_length=max_length)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1515": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, beam_tokens.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1581": {
                "variable": {
                    "value": "decoded",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "best",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1943": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1962": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1964": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1968": {
                "variable": {
                    "value": "start_states",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1976": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_1978": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_1984": {
                "variable": {
                    "value": "start_states",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_2026": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_2033": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_2037": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_2081": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.ne(padding_idx).int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_2205": {
                "tensors": {
                    "value": "output_chunks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple((forward_fn(*input_tensors_chunk) for input_tensors_chunk in zip(*input_tensors_chunks)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "chunk_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_272": {
                "data": {
                    "value": "DUMMY_INPUTS",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "save_485": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(save_directory, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_663": {
                "variable": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download, local_files_only=local_files_only)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_1263": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "self.prepare_logits_for_generation(next_token_logits, cur_len=cur_len, max_length=max_length)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_1264": {
                "variable": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(next_token_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_1264": {
                "variable": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_1267": {
                "variable": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "self.prepare_logits_for_generation(next_token_logits, cur_len=cur_len, max_length=max_length)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1294": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, attention_mask.new_ones((attention_mask.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1427": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "_scores.contiguous().view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_1428": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(next_token_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1430": {
                "variable": {
                    "value": "next_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "_scores.contiguous().view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "next_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.multinomial(probs, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "torch.gather(next_tokens, -1, next_scores_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_1432": {
                "variable": {
                    "value": "(next_scores, next_scores_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(_scores, -1, next_tokens)",
                            "Call"
                        ],
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "next_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1433": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "next_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.multinomial(probs, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "torch.gather(next_tokens, -1, next_scores_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "next_scores_indices",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "topk_1443": {
                "variable": {
                    "value": "(next_scores, next_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(_scores, -1, next_tokens)",
                            "Call"
                        ],
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "next_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_1524": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, attention_mask.new_ones((attention_mask.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1673": {
                "input": {
                    "value": "sorted_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1750": {
                "*size": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_1816": {
                "tensors": {
                    "value": "[hidden_states, start_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1870": {
                "tensors": {
                    "value": "[start_states, cls_token_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1951": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_2029": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_188": {
                "variable": {
                    "value": "seq_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "all_1537": {
                "input": {
                    "value": "next_scores[batch_idx, :num_beams] == beam_scores.view(batch_size, num_beams)[batch_idx]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "topk_1668": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(max(top_k, min_tokens_to_keep), logits.size(-1))",
                            "Call"
                        ],
                        [
                            "top_k if top_k is not None else self.config.top_k",
                            "IfExp"
                        ]
                    ]
                }
            },
            "full_like_2054": {
                "variable": {
                    "value": "cls_index",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[..., :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "hidden_states.shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_119": {
                "obj": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "is_tensor_134": {
                "obj": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/modeling_xlm.py": {
        "torch": {
            "arange_63": {
                "variable": {
                    "value": "alen",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_107": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_168": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_172": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_173": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "variable": {
                    "value": "context",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_200": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "inputs_list",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "attns_list",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_349": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_354": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_355": {
                "variable": {
                    "value": "self.layer_norm_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_358": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_359": {
                "variable": {
                    "value": "self.layer_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_360": {
                "variable": {
                    "value": "self.ffns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_361": {
                "variable": {
                    "value": "self.layer_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_504": {
                "variable": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_embeds + self.position_embeddings(position_ids).expand_as(inputs_embeds)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.embeddings(token_type_ids)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_618": {
                "variable": {
                    "value": "mask_token",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "mask_token_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.config.mask_token_id",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_619": {
                "variable": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, mask_token]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_804": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1040": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1041": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "langs_list",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_353": {
                "variable": {
                    "value": "self.lang_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_langs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_470": {
                "variable": {
                    "value": "position_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_519": {
                "variable": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_567": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveLogSoftmaxWithLoss_569": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cutoffs": {
                    "value": "config.asm_cutoffs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "div_value": {
                    "value": "config.asm_div_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "head_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_like_621": {
                "variable": {
                    "value": "langs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([input_ids, mask_token], dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "lang_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.config.lang_id",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_901": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1108": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_585": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, self.n_words)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_784": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_787": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_1113": {
                "variable": {
                    "value": "active_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_368": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_373": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_113": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1114": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/optimization.py": {
        "torch": {
            "LambdaLR_31": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda _: 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_44": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Name",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_59": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Name",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_74": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Name",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_93": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Name",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_144": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/tokenization_transfo_xl.py": {
        "torch": {
            "load_668": {
                "variable": {
                    "value": "corpus_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_corpus_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cached_path(corpus_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_743": {
                "variable": {
                    "value": "corpus",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_pickle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_209": {
                "obj": {
                    "value": "self.__dict__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "vocab_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(vocab_path, VOCAB_FILES_NAMES['pretrained_vocab_file'])",
                            "Call"
                        ],
                        [
                            "vocab_path",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_245": {
                "variable": {
                    "value": "encoded",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_259": {
                "variable": {
                    "value": "encoded",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_673": {
                "variable": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_675": {
                "variable": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_677": {
                "variable": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_124": {
                "variable": {
                    "value": "vocab_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_vocab_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_765": {
                "obj": {
                    "value": "corpus",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(fn_pickle)",
                            "Call"
                        ],
                        [
                            "pickle.load(fp)",
                            "Call"
                        ],
                        [
                            "TransfoXLCorpus(datadir, dataset, **kwargs)",
                            "Call"
                        ],
                        [
                            "cls(*inputs, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Pruning/hg_transformers/trainer.py": {
        "torch": {
            "manual_seed_86": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "manual_seed_all_87": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DistributedSampler_150": {
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "xm.xrt_world_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "rank": {
                    "value": "xm.get_ordinal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_238": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_tpu_sampler(self.train_dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(self.train_dataset) if self.args.local_rank == -1 else DistributedSampler(self.train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.data_collator.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_262": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eval_dataset if eval_dataset is not None else self.eval_dataset",
                            "IfExp"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialDistributedSampler(eval_dataset, num_replicas=xm.xrt_world_size(), rank=xm.get_ordinal())",
                            "Call"
                        ],
                        [
                            "SequentialDistributedSampler(eval_dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ],
                        [
                            "SequentialDistributedSampler(test_dataset, num_replicas=xm.xrt_world_size(), rank=xm.get_ordinal())",
                            "Call"
                        ],
                        [
                            "SequentialDistributedSampler(test_dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.data_collator.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_282": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialDistributedSampler(eval_dataset, num_replicas=xm.xrt_world_size(), rank=xm.get_ordinal())",
                            "Call"
                        ],
                        [
                            "SequentialDistributedSampler(eval_dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ],
                        [
                            "SequentialDistributedSampler(test_dataset, num_replicas=xm.xrt_world_size(), rank=xm.get_ordinal())",
                            "Call"
                        ],
                        [
                            "SequentialDistributedSampler(test_dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.data_collator.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_827": {
                "variable": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_tensors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tensor.clone() for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RandomSampler_149": {
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataParallel_393": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_397": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[self.args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_745": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SummaryWriter_205": {
                "variable": {
                    "value": "self.tb_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.args.logging_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_260": {
                "variable": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eval_dataset if eval_dataset is not None else self.eval_dataset",
                            "IfExp"
                        ]
                    ]
                }
            },
            "SequentialSampler_280": {
                "variable": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "save_636": {
                "obj": {
                    "value": "self.args",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_233": {
                "data_source": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_235": {
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_381": {
                "f": {
                    "value": "os.path.join(model_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_383": {
                "f": {
                    "value": "os.path.join(model_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_769": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_781": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(preds, logits.detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_786": {
                "variable": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_ids, inputs['labels'].detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__481": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__483": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_543": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_544": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/hg_transformers/training_args.py": {
        "torch": {
            "device_129": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_137": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_138": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_143": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "self.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/optimization_for_taylor.py": {
        "torch": {
            "full_like_40": {
                "variable": {
                    "value": "self.data_accumulator_grad[p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "initial_accumulator_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_57": {
                "variable": {
                    "value": "taylor[p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.data_accumulator_grad[p].mul(p.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/pruning_one_step.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "taylor_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "taylor_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_169": {
                "variable": {
                    "value": "model.bert.encoder.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[model.bert.encoder.layer[i] for i in range(args.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "topk_39": {
                "variable": {
                    "value": "topk",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(self.score).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "nparams_toprune",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prune._compute_nparams_toprune(self.prun_ratio, tensor_size)",
                            "Call"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_70": {
                "variable": {
                    "value": "attn_score_chunks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "score_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score_attn_output.sum(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([chunk.sum() for chunk in attn_score_chunks])",
                            "Call"
                        ],
                        [
                            "attn_scores[layer_id]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "score_attn",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[chunk.sum() for chunk in attn_score_chunks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "manual_seed_157": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_40": {
                "input": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "new_word_emb1",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.dot(u[:, :emb_hidden_dim], s[:emb_hidden_dim, :emb_hidden_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "new_word_emb2",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v[:emb_hidden_dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_85": {
                "variable": {
                    "value": "model.bert.embeddings.word_embeddings1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_hidden_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "model.bert.embeddings.word_embeddings2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_hidden_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_101": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score_attn_output.sum(0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([chunk.sum() for chunk in attn_score_chunks])",
                            "Call"
                        ],
                        [
                            "attn_scores[layer_id]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "keep_heads",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "split_103": {
                "variable": {
                    "value": "weight_chunks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(attn_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_104": {
                "variable": {
                    "value": "bias_chunks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "module.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(attn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "module.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_chunks[i] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_chunks[i] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_108": {
                "variable": {
                    "value": "weight_chunks",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(attn_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_chunks[i] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remove_118": {
                "module": {
                    "value": "module",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remove_119": {
                "module": {
                    "value": "module",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remove_124": {
                "module": {
                    "value": "module",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/run_glue.py": {
        "torch": {
            "save_303": {
                "obj": {
                    "value": "score_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'%s/taylor.pkl' % output_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Pruning/transformer/optimization.py": {
        "torch": {
            "full_like_235": {
                "variable": {
                    "value": "self.data_accumulator_grad[p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_like_264": {
                "variable": {
                    "value": "self.data_accumulator_grad[p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_270": {
                "variable": {
                    "value": "taylor[p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.data_accumulator_grad[p].mul(p.data).div(total_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_300": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_302": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__309": {
                "parameters": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data_augmentation.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[token_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "segments_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[segments_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argsort_150": {
                "input": {
                    "value": "predictions[0, mask_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}